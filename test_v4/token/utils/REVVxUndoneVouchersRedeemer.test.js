const {artifacts, accounts, web3} = require('hardhat');
const {toWei} = web3.utils;
const {BN, expectEvent, expectRevert} = require('@openzeppelin/test-helpers');
const {ZeroAddress, EmptyByte, Zero, One, Two, MaxUInt256} = require('@animoca/ethereum-contracts-core/src/constants');

const {createFixtureLoader} = require('@animoca/ethereum-contracts-core/test/utils/fixture');

const voucherIds = [
  '57896058422150792899851115374307272562071931696206700252490261109846115876864',
  '57896058422150792899851112755296338465093902275203480024911089886324804550656',
  '57896058422150792899851112381151919308382755215060162849542636854393188646912',
  '57896058422150792899851112755284920483552254596155013737155493925225152643072',
  '57896058422150792899851114251868306101167666676252515582507104033501442211840',
  '57896058422150792899851113129429339640263401656298330912523946957156768546816',
  '57896058422150792899851114251862597110396842836728282438629306052951616258048',
  '57896058422150792899851112007007500151671608154916845674174183822461572743168',
  '57896058422150792899851113877718177953685695776584965263260853021020000354304',
  '57896058422150792899851112381146210317611931375535929705664838873843362693120',
  '57896058422150792899851115000157144414589960796539149933244010097364674019328',
  '57896058422150792899851113503573758796974548716441648087892399989088384450560',
  '57896058422150792899851115000162853405360784636063383077121808077914499973120',
  '57896058422150792899851115374295854580530284017158233964734665148746463969280',
  '57896058422150792899851113877729595935227343455633431551016448982119652261888',
  '57896058422150792899851113877723886944456519616109198407138651001569826308096',
  '57896058422150792899851112007001791160900784315392612530296385841911746789376',
  '57896058422150792899851112755290629474323078435679246881033291905774978596864',
  '57896058422150792899851115374301563571301107856682467108612463129296289923072',
  '57896058422150792899851113129440757621805049335346797200279542918256420454400',
  '57896058422150792899851113503585176778516196395490114375647995950188036358144',
  '57896058422150792899851112006996082170129960475868379386418587861361920835584',
  '57896058422150792899851114626012725257878813736395832757875557065433058115584',
  '57896058422150792899851114626018434248649637575920065901753355045982884069376',
  '57896058422150792899851113129435048631034225495822564056401744937706594500608',
  '57896058422150792899851114626007016267107989896871599613997759084883232161792',
  '57896058422150792899851115000151435423819136957014916789366212116814848065536',
  '57896058422150792899851112381140501326841107536011696561787040893293536739328',
  '57896058422150792899851113503579467787745372555965881231770197969638210404352',
  '57896058422150792899851114251874015091938490515776748726384902014051268165632',
];

const watchId = '57896058422150794506789157388431033163767141676509399538015095964082588614656';
const trophyId = '6901746348410056322507433411700820065828754498207766188347864897290240';
const collectibleId = '20705239041979021725421719529920778186533439998184369056485653098790912';
const keyId = '57896072225643486480978686502357678576698894478418773223478006436850590285824';

const voucherTokenValue = toWei('10000');

describe('REVVxUndoneVouchersRedeemer', function () {
  const fixtureLoader = createFixtureLoader(accounts, web3.eth.currentProvider);
  const fixture = async function () {
    this.redeemer = await artifacts.require('REVVxUndoneVouchersRedeemerMock').new(ZeroAddress, ZeroAddress, ZeroAddress);
  };

  beforeEach(async function () {
    await fixtureLoader(fixture, this);
  });

  describe('_voucherValue(uint256)', function () {
    it('reverts with a wrong voucher token id (watch)', async function () {
      await expectRevert(this.redeemer.voucherValue(watchId), 'Redeemer: wrong token');
    });
    it('reverts with a wrong voucher token id (trophy)', async function () {
      await expectRevert(this.redeemer.voucherValue(trophyId), 'Redeemer: wrong token');
    });
    it('reverts with a wrong voucher token id (collectible)', async function () {
      await expectRevert(this.redeemer.voucherValue(collectibleId), 'Redeemer: wrong token');
    });
    it('reverts with a wrong voucher token id (key)', async function () {
      await expectRevert(this.redeemer.voucherValue(keyId), 'Redeemer: wrong token');
    });

    it('returns the correct voucher value', async function () {
      for (const voucherId of voucherIds) {
        (await this.redeemer.voucherValue(voucherId)).should.be.bignumber.equal(voucherTokenValue);
      }
    });
  });
});
