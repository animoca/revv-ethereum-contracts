{"id":"1095490c7122fa88a79c380bfb8fefe2","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is Context, IERC173 {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual override returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual override {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC-173 Contract Ownership Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Emitted when the contract ownership changes.\n    /// @param previousOwner the previous contract owner.\n    /// @param newOwner the new contract owner.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        require(sender == previousOwner, \"Ownership: not the owner\");\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        require(account == s.contractOwner, \"Ownership: not the owner\");\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \"InterfaceDetection: wrong value\");\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {PauseStorage} from \"./../libraries/PauseStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Pausing mechanism (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract PauseBase is Context {\n    using PauseStorage for PauseStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Emitted when the pause is triggered.\n    event Paused();\n\n    /// @notice Emitted when the pause is lifted.\n    event Unpaused();\n\n    /// @notice Pauses the contract.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if the contract is paused.\n    /// @dev Emits a {Paused} event.\n    function pause() external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        PauseStorage.layout().pause();\n    }\n\n    /// @notice Unpauses the contract.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if the contract is not paused.\n    /// @dev Emits an {Unpaused} event.\n    function unpause() external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        PauseStorage.layout().unpause();\n    }\n\n    /// @notice Gets the paused state of the contract.\n    /// @return isPaused The paused state of the contract.\n    function paused() external view returns (bool) {\n        return PauseStorage.layout().paused();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\n\nlibrary PauseStorage {\n    using PauseStorage for PauseStorage.Layout;\n\n    struct Layout {\n        bool isPaused;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.lifecycle.Pause.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.lifecycle.Pause.phase\")) - 1);\n\n    event Paused();\n    event Unpaused();\n\n    /// @notice Initializes the storage with an initial pause state (immutable version).\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits a {Paused} event if `isPaused` is true.\n    /// @param isPaused The initial pause state.\n    function constructorInit(Layout storage s, bool isPaused) internal {\n        if (isPaused) {\n            s.isPaused = true;\n            emit Paused();\n        }\n    }\n\n    /// @notice Initializes the storage with an initial pause state (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits a {Paused} event if `isPaused` is true.\n    /// @param isPaused The initial pause state.\n    function proxyInit(Layout storage s, bool isPaused) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(isPaused);\n    }\n\n    /// @notice Pauses the contract.\n    /// @dev Reverts if the contract is paused.\n    /// @dev Emits a {Paused} event.\n    function pause(Layout storage s) internal {\n        s.enforceIsNotPaused();\n        s.isPaused = true;\n        emit Paused();\n    }\n\n    /// @notice Unpauses the contract.\n    /// @dev Reverts if the contract is not paused.\n    /// @dev Emits an {Unpaused} event.\n    function unpause(Layout storage s) internal {\n        s.enforceIsPaused();\n        s.isPaused = false;\n        emit Unpaused();\n    }\n\n    /// @notice Gets the paused state of the contract.\n    /// @return isPaused The paused state of the contract.\n    function paused(Layout storage s) internal view returns (bool isPaused) {\n        return s.isPaused;\n    }\n\n    /// @notice Ensures that the contract is paused.\n    /// @dev Reverts if the contract is not paused.\n    function enforceIsPaused(Layout storage s) internal view {\n        require(s.isPaused, \"Pause: not paused\");\n    }\n\n    /// @notice Ensures that the contract is not paused.\n    /// @dev Reverts if the contract is paused.\n    function enforceIsNotPaused(Layout storage s) internal view {\n        require(!s.isPaused, \"Pause: paused\");\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {PauseStorage} from \"./libraries/PauseStorage.sol\";\nimport {PauseBase} from \"./base/PauseBase.sol\";\nimport {ContractOwnership} from \"../access/ContractOwnership.sol\";\n\n/// @title Pausing mechanism (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract Pause is PauseBase, ContractOwnership {\n    using PauseStorage for PauseStorage.Layout;\n\n    /// @notice Initializes the storage with an initial pause state.\n    /// @dev Emits a {Paused} event if `isPaused` is true.\n    /// @param isPaused The initial pause state.\n    constructor(bool isPaused) {\n        PauseStorage.layout().constructorInit(isPaused);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {ContractOwnershipStorage} from \"./../access/libraries/ContractOwnershipStorage.sol\";\nimport {PauseStorage} from \"./../lifecycle/libraries/PauseStorage.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\nimport {Pause} from \"./../lifecycle/Pause.sol\";\n\n/// @title CumulativeMerkleClaim\n/// @notice This contract is designed for claiming payouts which will cumulate over time.\n/// @notice A merkle tree is generated with one leaf for each claim recipient together with the description of the claim (claimData).\n/// @notice Flow: when new claims become available, the contract is paused to avoid further claims, a new tree is generated by summing up the current\n/// @notice unclaimed payouts and the new payouts, per user. The new tree is set and replaces the previous one and the contract is unpaused.\n/// @notice A nonce is used for each new tree and is included in every leaf to prevent collisions with claims from previous trees.\nabstract contract CumulativeMerkleClaim is Pause {\n    using MerkleProof for bytes32[];\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using PauseStorage for PauseStorage.Layout;\n\n    bytes32 public root;\n    uint256 public nonce;\n\n    mapping(bytes32 => bool) public claimed;\n\n    /// @notice Emitted when a new merkle root is set.\n    /// @param root The new merkle root.\n    event MerkleRootSet(bytes32 root);\n\n    /// @notice Emitted when a payout is claimed.\n    /// @param root The merkle root on which the claim was made.\n    /// @param recipient The recipient of the claim.\n    /// @param claimData The encoded claim data for the claim.\n    /// @param nonce The nonce as when the claim was made.\n    event PayoutClaimed(bytes32 indexed root, address indexed recipient, bytes claimData, uint256 nonce);\n\n    /// @notice Thrown when trying to claim the same leaf more than once.\n    /// @param recipient The recipient of the claim.\n    /// @param claimData The encoded claim data for the claim.\n    /// @param nonce The nonce as when the claim was made.\n    error AlreadyClaimed(address recipient, bytes claimData, uint256 nonce);\n\n    /// @notice Thrown when a proof cannot be verified.\n    /// @param recipient The recipient of the claim.\n    /// @param claimData The encoded claim data for the claim.\n    /// @param nonce The nonce as when the claim was made.\n    error InvalidProof(address recipient, bytes claimData, uint256 nonce);\n\n    constructor() Pause(true) ContractOwnership(msg.sender) {}\n\n    /// @notice Sets the merkle root for a new claiming period and unpauses the contract.\n    /// @dev Reverts if not called by the contract owner.\n    /// @dev Reverts if the contract is not paused.\n    /// @dev Emits an {Unpaused} event.\n    /// @dev Emits a {MerkleRootSet} event.\n    /// @param merkleRoot The merkle root to set.\n    function setMerkleRoot(bytes32 merkleRoot) public {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        PauseStorage.layout().unpause();\n        root = merkleRoot;\n        ++nonce;\n        emit MerkleRootSet(merkleRoot);\n    }\n\n    /// @notice Executes the payout for a given user (anyone can call this function).\n    /// @dev Reverts if the contract is paused.\n    /// @dev Reverts with {AlreadyClaimed} if this specific payout has already been claimed.\n    /// @dev Reverts with {InvalidProof} if the merkle proof cannot be verified.\n    /// @dev Emits a {PayoutClaimed} event.\n    /// @param recipient Address of the user to claim the payout\n    /// @param claimData Encoded claim data for `recipient`\n    /// @param proof Merkle proof of the user based on the merkle root\n    function claimPayout(address recipient, bytes calldata claimData, bytes32[] calldata proof) external {\n        PauseStorage.layout().enforceIsNotPaused();\n\n        uint256 currentNonce = nonce;\n        bytes32 currentRoot = root;\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, claimData, currentNonce));\n\n        if (claimed[leaf]) {\n            revert AlreadyClaimed(recipient, claimData, currentNonce);\n        }\n\n        if (!proof.verifyCalldata(currentRoot, leaf)) {\n            revert InvalidProof(recipient, claimData, currentNonce);\n        }\n\n        claimed[leaf] = true;\n\n        emit PayoutClaimed(currentRoot, recipient, claimData, currentNonce);\n\n        _distributePayout(recipient, claimData);\n    }\n\n    /// @notice Distributes the payout to the recipient.\n    /// @dev This virtual function must be implemented by inheriting contracts.\n    /// @param recipient Address of the user to claim the payout\n    /// @param claimData Encoded claim data for `recipient`. The encoding is specific to the inheriting contract, for example a quantity of tokens.\n    function _distributePayout(address recipient, bytes calldata claimData) internal virtual;\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        require(currentVersion.value < phase, \"Storage: phase reached\");\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\ninterface IERC20Mintable {\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\n    /// @param to The account to mint the tokens to.\n    /// @param value The amount of tokens to mint.\n    function mint(address to, uint256 value) external;\n\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\n    /// @param recipients The list of accounts to mint the tokens to.\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"contracts/payment/REVVMotorsportShardClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {IERC20Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\";\nimport {CumulativeMerkleClaim} from \"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol\";\n\ncontract REVVMotorsportShardClaim is CumulativeMerkleClaim {\n    IERC20Mintable public immutable shard;\n\n    constructor(IERC20Mintable shard_) {\n        shard = shard_;\n    }\n\n    function _distributePayout(address claimer, bytes calldata claimData) internal virtual override {\n        uint256 amount = abi.decode(claimData, (uint256));\n        shard.mint(claimer, amount);\n    }\n}"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipBase":[82],"ContractOwnershipStorage":[307],"InterfaceDetection":[338]},"id":33,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":308,"src":"57:82:0","symbolAliases":[{"foreign":{"id":2,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"65:24:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":83,"src":"140:71:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"148:21:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":339,"src":"212:77:0","symbolAliases":[{"foreign":{"id":6,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"220:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"ContractOwnershipBase","nameLocations":["548:21:0"],"nodeType":"IdentifierPath","referencedDeclaration":82,"src":"548:21:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"548:21:0"},{"baseName":{"id":11,"name":"InterfaceDetection","nameLocations":["571:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":338,"src":"571:18:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"571:18:0"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"291:218:0","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":32,"linearizedBaseContracts":[32,338,350,82,105,1035],"name":"ContractOwnership","nameLocation":"527:17:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":16,"libraryName":{"id":13,"name":"ContractOwnershipStorage","nameLocations":["602:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"602:24:0"},"nodeType":"UsingForDirective","src":"596:67:0","typeName":{"id":15,"nodeType":"UserDefinedTypeName","pathNode":{"id":14,"name":"ContractOwnershipStorage.Layout","nameLocations":["631:24:0","656:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"631:31:0"},"referencedDeclaration":124,"src":"631:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":30,"nodeType":"Block","src":"997:80:0","statements":[{"expression":{"arguments":[{"id":27,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"1057:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":22,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"1007:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1032:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"1007:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1007:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":26,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1041:15:0","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":200,"src":"1007:49:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1007:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"1007:63:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"669:289:0","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":31,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"initialOwner","nameLocation":"983:12:0","nodeType":"VariableDeclaration","scope":31,"src":"975:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"975:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"974:22:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"997:0:0"},"scope":32,"src":"963:114:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":33,"src":"509:570:0","usedErrors":[]}],"src":"32:1048:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[1035],"ContractOwnershipBase":[82],"ContractOwnershipStorage":[307],"IERC173":[105]},"id":83,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":34,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":36,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":83,"sourceUnit":106,"src":"57:52:1","symbolAliases":[{"foreign":{"id":35,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"65:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":38,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":83,"sourceUnit":308,"src":"110:85:1","symbolAliases":[{"foreign":{"id":37,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"118:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":40,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":83,"sourceUnit":1036,"src":"196:66:1","symbolAliases":[{"foreign":{"id":39,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"204:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":42,"name":"Context","nameLocations":["585:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1035,"src":"585:7:1"},"id":43,"nodeType":"InheritanceSpecifier","src":"585:7:1"},{"baseName":{"id":44,"name":"IERC173","nameLocations":["594:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"594:7:1"},"id":45,"nodeType":"InheritanceSpecifier","src":"594:7:1"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"264:278:1","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":82,"linearizedBaseContracts":[82,105,1035],"name":"ContractOwnershipBase","nameLocation":"560:21:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":49,"libraryName":{"id":46,"name":"ContractOwnershipStorage","nameLocations":["614:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"614:24:1"},"nodeType":"UsingForDirective","src":"608:67:1","typeName":{"id":48,"nodeType":"UserDefinedTypeName","pathNode":{"id":47,"name":"ContractOwnershipStorage.Layout","nameLocations":["643:24:1","668:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"643:31:1"},"referencedDeclaration":124,"src":"643:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[104],"body":{"id":62,"nodeType":"Block","src":"773:65:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":56,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"790:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"815:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"790:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":58,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":59,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"824:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":276,"src":"790:39:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":55,"id":61,"nodeType":"Return","src":"783:48:1"}]},"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"681:23:1","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":63,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"718:5:1","nodeType":"FunctionDefinition","overrides":{"id":52,"nodeType":"OverrideSpecifier","overrides":[],"src":"746:8:1"},"parameters":{"id":51,"nodeType":"ParameterList","parameters":[],"src":"723:2:1"},"returnParameters":{"id":55,"nodeType":"ParameterList","parameters":[{"constant":false,"id":54,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63,"src":"764:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"764:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"763:9:1"},"scope":82,"src":"709:129:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[98],"body":{"id":80,"nodeType":"Block","src":"941:92:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":75,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"1003:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1003:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"1017:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":70,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"951:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"976:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"951:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":73,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":74,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"985:17:1","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":263,"src":"951:51:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$124_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":79,"nodeType":"ExpressionStatement","src":"951:75:1"}]},"documentation":{"id":64,"nodeType":"StructuredDocumentation","src":"844:23:1","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":81,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"881:17:1","nodeType":"FunctionDefinition","overrides":{"id":68,"nodeType":"OverrideSpecifier","overrides":[],"src":"932:8:1"},"parameters":{"id":67,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"mutability":"mutable","name":"newOwner","nameLocation":"907:8:1","nodeType":"VariableDeclaration","scope":81,"src":"899:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65,"name":"address","nodeType":"ElementaryTypeName","src":"899:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:18:1"},"returnParameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"941:0:1"},"scope":82,"src":"872:161:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":83,"src":"542:493:1","usedErrors":[]}],"src":"32:1004:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[105]},"id":106,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":84,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"57:170:2","text":"@title ERC-173 Contract Ownership Standard\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":105,"linearizedBaseContracts":[105],"name":"IERC173","nameLocation":"237:7:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":86,"nodeType":"StructuredDocumentation","src":"251:162:2","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":92,"name":"OwnershipTransferred","nameLocation":"424:20:2","nodeType":"EventDefinition","parameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"461:13:2","nodeType":"VariableDeclaration","scope":92,"src":"445:29:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":87,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":90,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"492:8:2","nodeType":"VariableDeclaration","scope":92,"src":"476:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":89,"name":"address","nodeType":"ElementaryTypeName","src":"476:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"444:57:2"},"src":"418:84:2"},{"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"508:342:2","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":98,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"864:17:2","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"newOwner","nameLocation":"890:8:2","nodeType":"VariableDeclaration","scope":98,"src":"882:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":94,"name":"address","nodeType":"ElementaryTypeName","src":"882:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"881:18:2"},"returnParameters":{"id":97,"nodeType":"ParameterList","parameters":[],"src":"908:0:2"},"scope":105,"src":"855:54:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"915:116:2","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":104,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1045:5:2","nodeType":"FunctionDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[],"src":"1050:2:2"},"returnParameters":{"id":103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"mutability":"mutable","name":"contractOwner","nameLocation":"1084:13:2","nodeType":"VariableDeclaration","scope":104,"src":"1076:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"1076:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1075:23:2"},"scope":105,"src":"1036:63:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":106,"src":"227:874:2","usedErrors":[]}],"src":"32:1070:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"ContractOwnershipStorage":[307],"IERC173":[105],"InterfaceDetectionStorage":[449],"ProxyInitialization":[991]},"id":308,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":107,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":109,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":308,"sourceUnit":106,"src":"57:52:3","symbolAliases":[{"foreign":{"id":108,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"65:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":111,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":308,"sourceUnit":992,"src":"110:84:3","symbolAliases":[{"foreign":{"id":110,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"118:19:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":113,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":308,"sourceUnit":450,"src":"195:104:3","symbolAliases":[{"foreign":{"id":112,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"203:25:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":307,"linearizedBaseContracts":[307],"name":"ContractOwnershipStorage","nameLocation":"309:24:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":117,"libraryName":{"id":114,"name":"ContractOwnershipStorage","nameLocations":["346:24:3"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"346:24:3"},"nodeType":"UsingForDirective","src":"340:67:3","typeName":{"id":116,"nodeType":"UserDefinedTypeName","pathNode":{"id":115,"name":"ContractOwnershipStorage.Layout","nameLocations":["375:24:3","400:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"375:31:3"},"referencedDeclaration":124,"src":"375:31:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":121,"libraryName":{"id":118,"name":"InterfaceDetectionStorage","nameLocations":["418:25:3"],"nodeType":"IdentifierPath","referencedDeclaration":449,"src":"418:25:3"},"nodeType":"UsingForDirective","src":"412:69:3","typeName":{"id":120,"nodeType":"UserDefinedTypeName","pathNode":{"id":119,"name":"InterfaceDetectionStorage.Layout","nameLocations":["448:25:3","474:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"448:32:3"},"referencedDeclaration":359,"src":"448:32:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":124,"members":[{"constant":false,"id":123,"mutability":"mutable","name":"contractOwner","nameLocation":"519:13:3","nodeType":"VariableDeclaration","scope":124,"src":"511:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"511:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"494:6:3","nodeType":"StructDefinition","scope":307,"src":"487:52:3","visibility":"public"},{"constant":true,"id":137,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"571:19:3","nodeType":"VariableDeclaration","scope":307,"src":"545:128:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":125,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"619:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":130,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"609:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"609:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"601:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":128,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:3","typeDescriptions":{}}},"id":133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"601:67:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"671:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"601:71:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":127,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"593:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":126,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:3","typeDescriptions":{}}},"id":136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"593:80:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":150,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"705:21:3","nodeType":"VariableDeclaration","scope":307,"src":"679:128:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"679:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"755:45:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":143,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"745:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"745:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"737:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":141,"name":"uint256","nodeType":"ElementaryTypeName","src":"737:7:3","typeDescriptions":{}}},"id":146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"737:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"805:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"737:69:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"729:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":139,"name":"bytes32","nodeType":"ElementaryTypeName","src":"729:7:3","typeDescriptions":{}}},"id":149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"729:78:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":156,"name":"OwnershipTransferred","nameLocation":"820:20:3","nodeType":"EventDefinition","parameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":152,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"857:13:3","nodeType":"VariableDeclaration","scope":156,"src":"841:29:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":151,"name":"address","nodeType":"ElementaryTypeName","src":"841:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":154,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"888:8:3","nodeType":"VariableDeclaration","scope":156,"src":"872:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":153,"name":"address","nodeType":"ElementaryTypeName","src":"872:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"840:57:3"},"src":"814:84:3"},{"body":{"id":199,"nodeType":"Block","src":"1406:267:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":165,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1420:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1444:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":167,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1436:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"1436:7:3","typeDescriptions":{}}},"id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1436:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1420:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":186,"nodeType":"IfStatement","src":"1416:152:3","trueBody":{"id":185,"nodeType":"Block","src":"1448:120:3","statements":[{"expression":{"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":171,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"1462:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":173,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1464:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"1462:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":174,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1480:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1462:30:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":176,"nodeType":"ExpressionStatement","src":"1462:30:3"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1540:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1532:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":178,"name":"address","nodeType":"ElementaryTypeName","src":"1532:7:3","typeDescriptions":{}}},"id":181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":182,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1544:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":177,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"1511:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1511:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":184,"nodeType":"EmitStatement","src":"1506:51:3"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":193,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"1639:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$105_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$105_$","typeString":"type(contract IERC173)"}],"id":192,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1634:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1634:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$105","typeString":"type(contract IERC173)"}},"id":195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1648:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1634:25:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1661:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":187,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"1577:25:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$449_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1603:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":448,"src":"1577:32:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1577:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":191,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1612:21:3","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":402,"src":"1577:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$359_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1577:89:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":198,"nodeType":"ExpressionStatement","src":"1577:89:3"}]},"documentation":{"id":157,"nodeType":"StructuredDocumentation","src":"904:423:3","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":200,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1341:15:3","nodeType":"FunctionDefinition","parameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":160,"mutability":"mutable","name":"s","nameLocation":"1372:1:3","nodeType":"VariableDeclaration","scope":200,"src":"1357:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":159,"nodeType":"UserDefinedTypeName","pathNode":{"id":158,"name":"Layout","nameLocations":["1357:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"1357:6:3"},"referencedDeclaration":124,"src":"1357:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":162,"mutability":"mutable","name":"initialOwner","nameLocation":"1383:12:3","nodeType":"VariableDeclaration","scope":200,"src":"1375:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"1375:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1356:40:3"},"returnParameters":{"id":164,"nodeType":"ParameterList","parameters":[],"src":"1406:0:3"},"scope":307,"src":"1332:341:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":222,"nodeType":"Block","src":"2297:112:3","statements":[{"expression":{"arguments":[{"id":212,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"2336:21:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2359:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":209,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"2307:19:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$991_$","typeString":"type(library ProxyInitialization)"}},"id":211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2327:8:3","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":990,"src":"2307:28:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2307:54:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":215,"nodeType":"ExpressionStatement","src":"2307:54:3"},{"expression":{"arguments":[{"id":219,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"2389:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":216,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"2371:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2373:15:3","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":200,"src":"2371:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2371:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"ExpressionStatement","src":"2371:31:3"}]},"documentation":{"id":201,"nodeType":"StructuredDocumentation","src":"1679:545:3","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":223,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2238:9:3","nodeType":"FunctionDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"s","nameLocation":"2263:1:3","nodeType":"VariableDeclaration","scope":223,"src":"2248:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":203,"nodeType":"UserDefinedTypeName","pathNode":{"id":202,"name":"Layout","nameLocations":["2248:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"2248:6:3"},"referencedDeclaration":124,"src":"2248:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"initialOwner","nameLocation":"2274:12:3","nodeType":"VariableDeclaration","scope":223,"src":"2266:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"2266:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:40:3"},"returnParameters":{"id":208,"nodeType":"ParameterList","parameters":[],"src":"2297:0:3"},"scope":307,"src":"2229:180:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":262,"nodeType":"Block","src":"2848:281:3","statements":[{"assignments":[235],"declarations":[{"constant":false,"id":235,"mutability":"mutable","name":"previousOwner","nameLocation":"2866:13:3","nodeType":"VariableDeclaration","scope":262,"src":"2858:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":234,"name":"address","nodeType":"ElementaryTypeName","src":"2858:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":238,"initialValue":{"expression":{"id":236,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"2882:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2884:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"2882:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2858:39:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":240,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"2915:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":241,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"2925:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2915:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","id":243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2940:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""},"value":"Ownership: not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""}],"id":239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2907:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2907:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":245,"nodeType":"ExpressionStatement","src":"2907:60:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":246,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"2981:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":247,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2998:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2981:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":261,"nodeType":"IfStatement","src":"2977:146:3","trueBody":{"id":260,"nodeType":"Block","src":"3008:115:3","statements":[{"expression":{"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":249,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"3022:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":251,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3024:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"3022:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":252,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"3040:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3022:26:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":254,"nodeType":"ExpressionStatement","src":"3022:26:3"},{"eventCall":{"arguments":[{"id":256,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"3088:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":257,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"3103:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":255,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"3067:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3067:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":259,"nodeType":"EmitStatement","src":"3062:50:3"}]}}]},"documentation":{"id":224,"nodeType":"StructuredDocumentation","src":"2415:340:3","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":263,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"2769:17:3","nodeType":"FunctionDefinition","parameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"s","nameLocation":"2802:1:3","nodeType":"VariableDeclaration","scope":263,"src":"2787:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":226,"nodeType":"UserDefinedTypeName","pathNode":{"id":225,"name":"Layout","nameLocations":["2787:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"2787:6:3"},"referencedDeclaration":124,"src":"2787:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"sender","nameLocation":"2813:6:3","nodeType":"VariableDeclaration","scope":263,"src":"2805:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"2805:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":231,"mutability":"mutable","name":"newOwner","nameLocation":"2829:8:3","nodeType":"VariableDeclaration","scope":263,"src":"2821:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":230,"name":"address","nodeType":"ElementaryTypeName","src":"2821:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2786:52:3"},"returnParameters":{"id":233,"nodeType":"ParameterList","parameters":[],"src":"2848:0:3"},"scope":307,"src":"2760:369:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":275,"nodeType":"Block","src":"3335:39:3","statements":[{"expression":{"expression":{"id":272,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"3352:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":273,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3354:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"3352:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":271,"id":274,"nodeType":"Return","src":"3345:22:3"}]},"documentation":{"id":264,"nodeType":"StructuredDocumentation","src":"3135:116:3","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":276,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3265:5:3","nodeType":"FunctionDefinition","parameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"s","nameLocation":"3286:1:3","nodeType":"VariableDeclaration","scope":276,"src":"3271:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":266,"nodeType":"UserDefinedTypeName","pathNode":{"id":265,"name":"Layout","nameLocations":["3271:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"3271:6:3"},"referencedDeclaration":124,"src":"3271:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3270:18:3"},"returnParameters":{"id":271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":270,"mutability":"mutable","name":"contractOwner","nameLocation":"3320:13:3","nodeType":"VariableDeclaration","scope":276,"src":"3312:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":269,"name":"address","nodeType":"ElementaryTypeName","src":"3312:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3311:23:3"},"scope":307,"src":"3256:118:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":293,"nodeType":"Block","src":"3621:80:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":286,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"3639:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":287,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"3650:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":288,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3652:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"3650:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3639:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3667:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""},"value":"Ownership: not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""}],"id":285,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3631:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3631:63:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":292,"nodeType":"ExpressionStatement","src":"3631:63:3"}]},"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"3380:155:3","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts if `account` is not the contract owner.\n @param account The account."},"id":294,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"3549:22:3","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"mutability":"mutable","name":"s","nameLocation":"3587:1:3","nodeType":"VariableDeclaration","scope":294,"src":"3572:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":279,"nodeType":"UserDefinedTypeName","pathNode":{"id":278,"name":"Layout","nameLocations":["3572:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"3572:6:3"},"referencedDeclaration":124,"src":"3572:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":282,"mutability":"mutable","name":"account","nameLocation":"3598:7:3","nodeType":"VariableDeclaration","scope":294,"src":"3590:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":281,"name":"address","nodeType":"ElementaryTypeName","src":"3590:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3571:35:3"},"returnParameters":{"id":284,"nodeType":"ParameterList","parameters":[],"src":"3621:0:3"},"scope":307,"src":"3540:161:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":305,"nodeType":"Block","src":"3766:115:3","statements":[{"assignments":[301],"declarations":[{"constant":false,"id":301,"mutability":"mutable","name":"position","nameLocation":"3784:8:3","nodeType":"VariableDeclaration","scope":305,"src":"3776:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3776:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":303,"initialValue":{"id":302,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"3795:19:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3776:38:3"},{"AST":{"nodeType":"YulBlock","src":"3833:42:3","statements":[{"nodeType":"YulAssignment","src":"3847:18:3","value":{"name":"position","nodeType":"YulIdentifier","src":"3857:8:3"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"3847:6:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":301,"isOffset":false,"isSlot":false,"src":"3857:8:3","valueSize":1},{"declaration":298,"isOffset":false,"isSlot":true,"src":"3847:6:3","suffix":"slot","valueSize":1}],"id":304,"nodeType":"InlineAssembly","src":"3824:51:3"}]},"id":306,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"3716:6:3","nodeType":"FunctionDefinition","parameters":{"id":295,"nodeType":"ParameterList","parameters":[],"src":"3722:2:3"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"s","nameLocation":"3763:1:3","nodeType":"VariableDeclaration","scope":306,"src":"3748:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":297,"nodeType":"UserDefinedTypeName","pathNode":{"id":296,"name":"Layout","nameLocations":["3748:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"3748:6:3"},"referencedDeclaration":124,"src":"3748:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3747:18:3"},"scope":307,"src":"3707:174:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":308,"src":"301:3582:3","usedErrors":[]}],"src":"32:3852:3"},"id":3},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[350],"InterfaceDetection":[338],"InterfaceDetectionStorage":[449]},"id":339,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":309,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:4"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":311,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":339,"sourceUnit":351,"src":"57:49:4","symbolAliases":[{"foreign":{"id":310,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"65:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":313,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":339,"sourceUnit":450,"src":"107:84:4","symbolAliases":[{"foreign":{"id":312,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"115:25:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":315,"name":"IERC165","nameLocations":["424:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":350,"src":"424:7:4"},"id":316,"nodeType":"InheritanceSpecifier","src":"424:7:4"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":314,"nodeType":"StructuredDocumentation","src":"193:191:4","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":338,"linearizedBaseContracts":[338,350],"name":"InterfaceDetection","nameLocation":"402:18:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":320,"libraryName":{"id":317,"name":"InterfaceDetectionStorage","nameLocations":["444:25:4"],"nodeType":"IdentifierPath","referencedDeclaration":449,"src":"444:25:4"},"nodeType":"UsingForDirective","src":"438:69:4","typeName":{"id":319,"nodeType":"UserDefinedTypeName","pathNode":{"id":318,"name":"InterfaceDetectionStorage.Layout","nameLocations":["474:25:4","500:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"474:32:4"},"referencedDeclaration":359,"src":"474:32:4","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[349],"body":{"id":336,"nodeType":"Block","src":"626:89:4","statements":[{"expression":{"arguments":[{"id":333,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"696:11:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":329,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"643:25:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$449_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"669:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":448,"src":"643:32:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"643:34:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":332,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"678:17:4","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":436,"src":"643:52:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"643:65:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":328,"id":335,"nodeType":"Return","src":"636:72:4"}]},"documentation":{"id":321,"nodeType":"StructuredDocumentation","src":"513:23:4","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":337,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"550:17:4","nodeType":"FunctionDefinition","overrides":{"id":325,"nodeType":"OverrideSpecifier","overrides":[],"src":"602:8:4"},"parameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"interfaceId","nameLocation":"575:11:4","nodeType":"VariableDeclaration","scope":337,"src":"568:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":322,"name":"bytes4","nodeType":"ElementaryTypeName","src":"568:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"567:20:4"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":337,"src":"620:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":326,"name":"bool","nodeType":"ElementaryTypeName","src":"620:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"619:6:4"},"scope":338,"src":"541:174:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":339,"src":"384:333:4","usedErrors":[]}],"src":"32:686:4"},"id":4},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[350]},"id":351,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":340,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":341,"nodeType":"StructuredDocumentation","src":"57:173:5","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":350,"linearizedBaseContracts":[350],"name":"IERC165","nameLocation":"240:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":342,"nodeType":"StructuredDocumentation","src":"254:340:5","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":349,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"608:17:5","nodeType":"FunctionDefinition","parameters":{"id":345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"interfaceId","nameLocation":"633:11:5","nodeType":"VariableDeclaration","scope":349,"src":"626:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":343,"name":"bytes4","nodeType":"ElementaryTypeName","src":"626:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"625:20:5"},"returnParameters":{"id":348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":347,"mutability":"mutable","name":"supported","nameLocation":"674:9:5","nodeType":"VariableDeclaration","scope":349,"src":"669:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":346,"name":"bool","nodeType":"ElementaryTypeName","src":"669:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"668:16:5"},"scope":350,"src":"599:86:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":351,"src":"230:457:5","usedErrors":[]}],"src":"32:656:5"},"id":5},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[350],"InterfaceDetectionStorage":[449]},"id":450,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":352,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":354,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":450,"sourceUnit":351,"src":"57:52:6","symbolAliases":[{"foreign":{"id":353,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"65:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":449,"linearizedBaseContracts":[449],"name":"InterfaceDetectionStorage","nameLocation":"119:25:6","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":359,"members":[{"constant":false,"id":358,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"199:19:6","nodeType":"VariableDeclaration","scope":359,"src":"175:43:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":357,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":355,"name":"bytes4","nodeType":"ElementaryTypeName","src":"183:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"175:23:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":356,"name":"bool","nodeType":"ElementaryTypeName","src":"193:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"158:6:6","nodeType":"StructDefinition","scope":449,"src":"151:74:6","visibility":"public"},{"constant":true,"id":372,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"257:19:6","nodeType":"VariableDeclaration","scope":449,"src":"231:136:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"231:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"305:55:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":365,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"295:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"295:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"287:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":363,"name":"uint256","nodeType":"ElementaryTypeName","src":"287:7:6","typeDescriptions":{}}},"id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"287:75:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"365:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"287:79:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"279:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"279:7:6","typeDescriptions":{}}},"id":371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"279:88:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":375,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"399:20:6","nodeType":"VariableDeclaration","scope":449,"src":"374:58:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":373,"name":"bytes4","nodeType":"ElementaryTypeName","src":"374:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"422:10:6","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":401,"nodeType":"Block","src":"764:152:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":387,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"782:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":388,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"797:20:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"782:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","id":390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"819:33:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","typeString":"literal_string \"InterfaceDetection: wrong value\""},"value":"InterfaceDetection: wrong value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","typeString":"literal_string \"InterfaceDetection: wrong value\""}],"id":386,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"774:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"774:79:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":392,"nodeType":"ExpressionStatement","src":"774:79:6"},{"expression":{"id":399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":393,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"863:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":396,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"865:19:6","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":358,"src":"863:21:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":397,"indexExpression":{"id":395,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"885:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"863:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":398,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"900:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"863:46:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":400,"nodeType":"ExpressionStatement","src":"863:46:6"}]},"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"439:226:6","text":"@notice Sets or unsets an ERC165 interface.\n @dev Reverts if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":402,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"679:21:6","nodeType":"FunctionDefinition","parameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"mutability":"mutable","name":"s","nameLocation":"716:1:6","nodeType":"VariableDeclaration","scope":402,"src":"701:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":378,"nodeType":"UserDefinedTypeName","pathNode":{"id":377,"name":"Layout","nameLocations":["701:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"701:6:6"},"referencedDeclaration":359,"src":"701:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":381,"mutability":"mutable","name":"interfaceId","nameLocation":"726:11:6","nodeType":"VariableDeclaration","scope":402,"src":"719:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":380,"name":"bytes4","nodeType":"ElementaryTypeName","src":"719:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":383,"mutability":"mutable","name":"supported","nameLocation":"744:9:6","nodeType":"VariableDeclaration","scope":402,"src":"739:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":382,"name":"bool","nodeType":"ElementaryTypeName","src":"739:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"700:54:6"},"returnParameters":{"id":385,"nodeType":"ParameterList","parameters":[],"src":"764:0:6"},"scope":449,"src":"670:246:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":435,"nodeType":"Block","src":"1371:236:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":413,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"1385:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":414,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"1400:20:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1385:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":419,"nodeType":"IfStatement","src":"1381:78:6","trueBody":{"id":418,"nodeType":"Block","src":"1422:37:6","statements":[{"expression":{"hexValue":"66616c7365","id":416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1443:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":412,"id":417,"nodeType":"Return","src":"1436:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":420,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"1472:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":422,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"1492:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$350_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$350_$","typeString":"type(contract IERC165)"}],"id":421,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1487:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1487:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$350","typeString":"type(contract IERC165)"}},"id":424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1501:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1487:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1472:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":429,"nodeType":"IfStatement","src":"1468:82:6","trueBody":{"id":428,"nodeType":"Block","src":"1514:36:6","statements":[{"expression":{"hexValue":"74727565","id":426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":412,"id":427,"nodeType":"Return","src":"1528:11:6"}]}},{"expression":{"baseExpression":{"expression":{"id":430,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"1566:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1568:19:6","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":358,"src":"1566:21:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":433,"indexExpression":{"id":432,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"1588:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1566:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":412,"id":434,"nodeType":"Return","src":"1559:41:6"}]},"documentation":{"id":403,"nodeType":"StructuredDocumentation","src":"922:340:6","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":436,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1276:17:6","nodeType":"FunctionDefinition","parameters":{"id":409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":406,"mutability":"mutable","name":"s","nameLocation":"1309:1:6","nodeType":"VariableDeclaration","scope":436,"src":"1294:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":405,"nodeType":"UserDefinedTypeName","pathNode":{"id":404,"name":"Layout","nameLocations":["1294:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"1294:6:6"},"referencedDeclaration":359,"src":"1294:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":408,"mutability":"mutable","name":"interfaceId","nameLocation":"1319:11:6","nodeType":"VariableDeclaration","scope":436,"src":"1312:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":407,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1312:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1293:38:6"},"returnParameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"mutability":"mutable","name":"supported","nameLocation":"1360:9:6","nodeType":"VariableDeclaration","scope":436,"src":"1355:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":410,"name":"bool","nodeType":"ElementaryTypeName","src":"1355:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1354:16:6"},"scope":449,"src":"1267:340:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":447,"nodeType":"Block","src":"1672:115:6","statements":[{"assignments":[443],"declarations":[{"constant":false,"id":443,"mutability":"mutable","name":"position","nameLocation":"1690:8:6","nodeType":"VariableDeclaration","scope":447,"src":"1682:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1682:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":445,"initialValue":{"id":444,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"1701:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1682:38:6"},{"AST":{"nodeType":"YulBlock","src":"1739:42:6","statements":[{"nodeType":"YulAssignment","src":"1753:18:6","value":{"name":"position","nodeType":"YulIdentifier","src":"1763:8:6"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"1753:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":443,"isOffset":false,"isSlot":false,"src":"1763:8:6","valueSize":1},{"declaration":440,"isOffset":false,"isSlot":true,"src":"1753:6:6","suffix":"slot","valueSize":1}],"id":446,"nodeType":"InlineAssembly","src":"1730:51:6"}]},"id":448,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1622:6:6","nodeType":"FunctionDefinition","parameters":{"id":437,"nodeType":"ParameterList","parameters":[],"src":"1628:2:6"},"returnParameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":440,"mutability":"mutable","name":"s","nameLocation":"1669:1:6","nodeType":"VariableDeclaration","scope":448,"src":"1654:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":439,"nodeType":"UserDefinedTypeName","pathNode":{"id":438,"name":"Layout","nameLocations":["1654:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"1654:6:6"},"referencedDeclaration":359,"src":"1654:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1653:18:6"},"scope":449,"src":"1613:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":450,"src":"111:1678:6","usedErrors":[]}],"src":"32:1758:6"},"id":6},"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol","exportedSymbols":{"ContractOwnership":[32],"Pause":[482],"PauseBase":[563],"PauseStorage":[748]},"id":483,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":451,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","file":"./libraries/PauseStorage.sol","id":453,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":483,"sourceUnit":749,"src":"57:58:7","symbolAliases":[{"foreign":{"id":452,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"65:12:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol","file":"./base/PauseBase.sol","id":455,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":483,"sourceUnit":564,"src":"116:47:7","symbolAliases":[{"foreign":{"id":454,"name":"PauseBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"124:9:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"../access/ContractOwnership.sol","id":457,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":483,"sourceUnit":33,"src":"164:66:7","symbolAliases":[{"foreign":{"id":456,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"172:17:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":459,"name":"PauseBase","nameLocations":["408:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":563,"src":"408:9:7"},"id":460,"nodeType":"InheritanceSpecifier","src":"408:9:7"},{"baseName":{"id":461,"name":"ContractOwnership","nameLocations":["419:17:7"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"419:17:7"},"id":462,"nodeType":"InheritanceSpecifier","src":"419:17:7"}],"canonicalName":"Pause","contractDependencies":[],"contractKind":"contract","documentation":{"id":458,"nodeType":"StructuredDocumentation","src":"232:149:7","text":"@title Pausing mechanism (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":482,"linearizedBaseContracts":[482,32,338,350,82,105,563,1035],"name":"Pause","nameLocation":"399:5:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":466,"libraryName":{"id":463,"name":"PauseStorage","nameLocations":["449:12:7"],"nodeType":"IdentifierPath","referencedDeclaration":748,"src":"449:12:7"},"nodeType":"UsingForDirective","src":"443:43:7","typeName":{"id":465,"nodeType":"UserDefinedTypeName","pathNode":{"id":464,"name":"PauseStorage.Layout","nameLocations":["466:12:7","479:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"466:19:7"},"referencedDeclaration":574,"src":"466:19:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"}}},{"body":{"id":480,"nodeType":"Block","src":"696:64:7","statements":[{"expression":{"arguments":[{"id":477,"name":"isPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"744:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":472,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"706:12:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$748_$","typeString":"type(library PauseStorage)"}},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"719:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":747,"src":"706:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"706:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":476,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"728:15:7","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":626,"src":"706:37:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$574_storage_ptr_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer,bool)"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"706:47:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":479,"nodeType":"ExpressionStatement","src":"706:47:7"}]},"documentation":{"id":467,"nodeType":"StructuredDocumentation","src":"492:172:7","text":"@notice Initializes the storage with an initial pause state.\n @dev Emits a {Paused} event if `isPaused` is true.\n @param isPaused The initial pause state."},"id":481,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":469,"mutability":"mutable","name":"isPaused","nameLocation":"686:8:7","nodeType":"VariableDeclaration","scope":481,"src":"681:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":468,"name":"bool","nodeType":"ElementaryTypeName","src":"681:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"680:15:7"},"returnParameters":{"id":471,"nodeType":"ParameterList","parameters":[],"src":"696:0:7"},"scope":482,"src":"669:91:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":483,"src":"381:381:7","usedErrors":[]}],"src":"32:731:7"},"id":7},"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol","exportedSymbols":{"Context":[1035],"ContractOwnershipStorage":[307],"PauseBase":[563],"PauseStorage":[748]},"id":564,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":484,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:8"},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","file":"./../libraries/PauseStorage.sol","id":486,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":564,"sourceUnit":749,"src":"57:61:8","symbolAliases":[{"foreign":{"id":485,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"65:12:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":488,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":564,"sourceUnit":308,"src":"119:95:8","symbolAliases":[{"foreign":{"id":487,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"127:24:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":490,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":564,"sourceUnit":1036,"src":"215:66:8","symbolAliases":[{"foreign":{"id":489,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"223:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":492,"name":"Context","nameLocations":["522:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1035,"src":"522:7:8"},"id":493,"nodeType":"InheritanceSpecifier","src":"522:7:8"}],"canonicalName":"PauseBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":491,"nodeType":"StructuredDocumentation","src":"283:208:8","text":"@title Pausing mechanism (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":563,"linearizedBaseContracts":[563,1035],"name":"PauseBase","nameLocation":"509:9:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":497,"libraryName":{"id":494,"name":"PauseStorage","nameLocations":["542:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":748,"src":"542:12:8"},"nodeType":"UsingForDirective","src":"536:43:8","typeName":{"id":496,"nodeType":"UserDefinedTypeName","pathNode":{"id":495,"name":"PauseStorage.Layout","nameLocations":["559:12:8","572:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"559:19:8"},"referencedDeclaration":574,"src":"559:19:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"}}},{"global":false,"id":501,"libraryName":{"id":498,"name":"ContractOwnershipStorage","nameLocations":["590:24:8"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"590:24:8"},"nodeType":"UsingForDirective","src":"584:67:8","typeName":{"id":500,"nodeType":"UserDefinedTypeName","pathNode":{"id":499,"name":"ContractOwnershipStorage.Layout","nameLocations":["619:24:8","644:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"619:31:8"},"referencedDeclaration":124,"src":"619:31:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"anonymous":false,"documentation":{"id":502,"nodeType":"StructuredDocumentation","src":"657:48:8","text":"@notice Emitted when the pause is triggered."},"eventSelector":"9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e752","id":504,"name":"Paused","nameLocation":"716:6:8","nodeType":"EventDefinition","parameters":{"id":503,"nodeType":"ParameterList","parameters":[],"src":"722:2:8"},"src":"710:15:8"},{"anonymous":false,"documentation":{"id":505,"nodeType":"StructuredDocumentation","src":"731:45:8","text":"@notice Emitted when the pause is lifted."},"eventSelector":"a45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d16933","id":507,"name":"Unpaused","nameLocation":"787:8:8","nodeType":"EventDefinition","parameters":{"id":506,"nodeType":"ParameterList","parameters":[],"src":"795:2:8"},"src":"781:17:8"},{"body":{"id":527,"nodeType":"Block","src":"1014:126:8","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":516,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"1081:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1081:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":511,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"1024:24:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1049:6:8","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"1024:31:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1024:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":515,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1058:22:8","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":294,"src":"1024:56:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1024:70:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":519,"nodeType":"ExpressionStatement","src":"1024:70:8"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":520,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"1104:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$748_$","typeString":"type(library PauseStorage)"}},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1117:6:8","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":747,"src":"1104:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1104:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":524,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1126:5:8","memberName":"pause","nodeType":"MemberAccess","referencedDeclaration":671,"src":"1104:27:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$574_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer)"}},"id":525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1104:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":526,"nodeType":"ExpressionStatement","src":"1104:29:8"}]},"documentation":{"id":508,"nodeType":"StructuredDocumentation","src":"804:179:8","text":"@notice Pauses the contract.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if the contract is paused.\n @dev Emits a {Paused} event."},"functionSelector":"8456cb59","id":528,"implemented":true,"kind":"function","modifiers":[],"name":"pause","nameLocation":"997:5:8","nodeType":"FunctionDefinition","parameters":{"id":509,"nodeType":"ParameterList","parameters":[],"src":"1002:2:8"},"returnParameters":{"id":510,"nodeType":"ParameterList","parameters":[],"src":"1014:0:8"},"scope":563,"src":"988:152:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":548,"nodeType":"Block","src":"1367:128:8","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":537,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"1434:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1434:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":532,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"1377:24:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1402:6:8","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"1377:31:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1377:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":536,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1411:22:8","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":294,"src":"1377:56:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1377:70:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":540,"nodeType":"ExpressionStatement","src":"1377:70:8"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":541,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"1457:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$748_$","typeString":"type(library PauseStorage)"}},"id":543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1470:6:8","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":747,"src":"1457:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1457:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":545,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1479:7:8","memberName":"unpause","nodeType":"MemberAccess","referencedDeclaration":693,"src":"1457:29:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$574_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer)"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1457:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":547,"nodeType":"ExpressionStatement","src":"1457:31:8"}]},"documentation":{"id":529,"nodeType":"StructuredDocumentation","src":"1146:188:8","text":"@notice Unpauses the contract.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if the contract is not paused.\n @dev Emits an {Unpaused} event."},"functionSelector":"3f4ba83a","id":549,"implemented":true,"kind":"function","modifiers":[],"name":"unpause","nameLocation":"1348:7:8","nodeType":"FunctionDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[],"src":"1355:2:8"},"returnParameters":{"id":531,"nodeType":"ParameterList","parameters":[],"src":"1367:0:8"},"scope":563,"src":"1339:156:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":561,"nodeType":"Block","src":"1662:54:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":555,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"1679:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$748_$","typeString":"type(library PauseStorage)"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1692:6:8","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":747,"src":"1679:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1679:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":558,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1701:6:8","memberName":"paused","nodeType":"MemberAccess","referencedDeclaration":706,"src":"1679:28:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$574_storage_ptr_$returns$_t_bool_$attached_to$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer) view returns (bool)"}},"id":559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1679:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":554,"id":560,"nodeType":"Return","src":"1672:37:8"}]},"documentation":{"id":550,"nodeType":"StructuredDocumentation","src":"1501:109:8","text":"@notice Gets the paused state of the contract.\n @return isPaused The paused state of the contract."},"functionSelector":"5c975abb","id":562,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1624:6:8","nodeType":"FunctionDefinition","parameters":{"id":551,"nodeType":"ParameterList","parameters":[],"src":"1630:2:8"},"returnParameters":{"id":554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":562,"src":"1656:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":552,"name":"bool","nodeType":"ElementaryTypeName","src":"1656:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1655:6:8"},"scope":563,"src":"1615:101:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":564,"src":"491:1227:8","usedErrors":[]}],"src":"32:1687:8"},"id":8},"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","exportedSymbols":{"PauseStorage":[748],"ProxyInitialization":[991]},"id":749,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":565,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:9"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":567,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":749,"sourceUnit":992,"src":"57:84:9","symbolAliases":[{"foreign":{"id":566,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"65:19:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"PauseStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":748,"linearizedBaseContracts":[748],"name":"PauseStorage","nameLocation":"151:12:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":571,"libraryName":{"id":568,"name":"PauseStorage","nameLocations":["176:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":748,"src":"176:12:9"},"nodeType":"UsingForDirective","src":"170:43:9","typeName":{"id":570,"nodeType":"UserDefinedTypeName","pathNode":{"id":569,"name":"PauseStorage.Layout","nameLocations":["193:12:9","206:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"193:19:9"},"referencedDeclaration":574,"src":"193:19:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"}}},{"canonicalName":"PauseStorage.Layout","id":574,"members":[{"constant":false,"id":573,"mutability":"mutable","name":"isPaused","nameLocation":"248:8:9","nodeType":"VariableDeclaration","scope":574,"src":"243:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":572,"name":"bool","nodeType":"ElementaryTypeName","src":"243:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Layout","nameLocation":"226:6:9","nodeType":"StructDefinition","scope":748,"src":"219:44:9","visibility":"public"},{"constant":true,"id":587,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"295:19:9","nodeType":"VariableDeclaration","scope":748,"src":"269:119:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"269:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6c6966656379636c652e50617573652e73746f72616765","id":581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"343:38:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f","typeString":"literal_string \"animoca.core.lifecycle.Pause.storage\""},"value":"animoca.core.lifecycle.Pause.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f","typeString":"literal_string \"animoca.core.lifecycle.Pause.storage\""}],"id":580,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"333:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"333:49:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"325:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":578,"name":"uint256","nodeType":"ElementaryTypeName","src":"325:7:9","typeDescriptions":{}}},"id":583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"325:58:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"386:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"325:62:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"317:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"317:7:9","typeDescriptions":{}}},"id":586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"317:71:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":600,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"420:21:9","nodeType":"VariableDeclaration","scope":748,"src":"394:119:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":588,"name":"bytes32","nodeType":"ElementaryTypeName","src":"394:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6c6966656379636c652e50617573652e7068617365","id":594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"470:36:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_3bee9ead429adf7e232b4f4b772a209623333b43e5466fc9b9a766da96c2ae0f","typeString":"literal_string \"animoca.core.lifecycle.Pause.phase\""},"value":"animoca.core.lifecycle.Pause.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3bee9ead429adf7e232b4f4b772a209623333b43e5466fc9b9a766da96c2ae0f","typeString":"literal_string \"animoca.core.lifecycle.Pause.phase\""}],"id":593,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"460:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"460:47:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"452:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":591,"name":"uint256","nodeType":"ElementaryTypeName","src":"452:7:9","typeDescriptions":{}}},"id":596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"452:56:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"511:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"452:60:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"444:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":589,"name":"bytes32","nodeType":"ElementaryTypeName","src":"444:7:9","typeDescriptions":{}}},"id":599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"444:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e752","id":602,"name":"Paused","nameLocation":"526:6:9","nodeType":"EventDefinition","parameters":{"id":601,"nodeType":"ParameterList","parameters":[],"src":"532:2:9"},"src":"520:15:9"},{"anonymous":false,"eventSelector":"a45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d16933","id":604,"name":"Unpaused","nameLocation":"546:8:9","nodeType":"EventDefinition","parameters":{"id":603,"nodeType":"ParameterList","parameters":[],"src":"554:2:9"},"src":"540:17:9"},{"body":{"id":625,"nodeType":"Block","src":"941:99:9","statements":[{"condition":{"id":613,"name":"isPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"955:8:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":624,"nodeType":"IfStatement","src":"951:83:9","trueBody":{"id":623,"nodeType":"Block","src":"965:69:9","statements":[{"expression":{"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":614,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"979:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":616,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"981:8:9","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":573,"src":"979:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"992:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"979:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":619,"nodeType":"ExpressionStatement","src":"979:17:9"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":620,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"1015:6:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1015:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":622,"nodeType":"EmitStatement","src":"1010:13:9"}]}}]},"documentation":{"id":605,"nodeType":"StructuredDocumentation","src":"563:306:9","text":"@notice Initializes the storage with an initial pause state (immutable version).\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits a {Paused} event if `isPaused` is true.\n @param isPaused The initial pause state."},"id":626,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"883:15:9","nodeType":"FunctionDefinition","parameters":{"id":611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":608,"mutability":"mutable","name":"s","nameLocation":"914:1:9","nodeType":"VariableDeclaration","scope":626,"src":"899:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":607,"nodeType":"UserDefinedTypeName","pathNode":{"id":606,"name":"Layout","nameLocations":["899:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"899:6:9"},"referencedDeclaration":574,"src":"899:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":610,"mutability":"mutable","name":"isPaused","nameLocation":"922:8:9","nodeType":"VariableDeclaration","scope":626,"src":"917:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":609,"name":"bool","nodeType":"ElementaryTypeName","src":"917:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"898:33:9"},"returnParameters":{"id":612,"nodeType":"ParameterList","parameters":[],"src":"941:0:9"},"scope":748,"src":"874:166:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":648,"nodeType":"Block","src":"1540:108:9","statements":[{"expression":{"arguments":[{"id":638,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"1579:21:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1602:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":635,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"1550:19:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$991_$","typeString":"type(library ProxyInitialization)"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1570:8:9","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":990,"src":"1550:28:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1550:54:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":641,"nodeType":"ExpressionStatement","src":"1550:54:9"},{"expression":{"arguments":[{"id":645,"name":"isPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":632,"src":"1632:8:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":642,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"1614:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1616:15:9","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":626,"src":"1614:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$574_storage_ptr_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer,bool)"}},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1614:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":647,"nodeType":"ExpressionStatement","src":"1614:27:9"}]},"documentation":{"id":627,"nodeType":"StructuredDocumentation","src":"1046:428:9","text":"@notice Initializes the storage with an initial pause state (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts if the proxy initialization phase is set to `1` or above.\n @dev Emits a {Paused} event if `isPaused` is true.\n @param isPaused The initial pause state."},"id":649,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"1488:9:9","nodeType":"FunctionDefinition","parameters":{"id":633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":630,"mutability":"mutable","name":"s","nameLocation":"1513:1:9","nodeType":"VariableDeclaration","scope":649,"src":"1498:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":629,"nodeType":"UserDefinedTypeName","pathNode":{"id":628,"name":"Layout","nameLocations":["1498:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"1498:6:9"},"referencedDeclaration":574,"src":"1498:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":632,"mutability":"mutable","name":"isPaused","nameLocation":"1521:8:9","nodeType":"VariableDeclaration","scope":649,"src":"1516:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":631,"name":"bool","nodeType":"ElementaryTypeName","src":"1516:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1497:33:9"},"returnParameters":{"id":634,"nodeType":"ParameterList","parameters":[],"src":"1540:0:9"},"scope":748,"src":"1479:169:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":670,"nodeType":"Block","src":"1818:89:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":656,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"1828:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":658,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1830:18:9","memberName":"enforceIsNotPaused","nodeType":"MemberAccess","referencedDeclaration":735,"src":"1828:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$574_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer) view"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":660,"nodeType":"ExpressionStatement","src":"1828:22:9"},{"expression":{"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":661,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"1860:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":663,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1862:8:9","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":573,"src":"1860:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1873:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1860:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":666,"nodeType":"ExpressionStatement","src":"1860:17:9"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":667,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"1892:6:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1892:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":669,"nodeType":"EmitStatement","src":"1887:13:9"}]},"documentation":{"id":650,"nodeType":"StructuredDocumentation","src":"1654:117:9","text":"@notice Pauses the contract.\n @dev Reverts if the contract is paused.\n @dev Emits a {Paused} event."},"id":671,"implemented":true,"kind":"function","modifiers":[],"name":"pause","nameLocation":"1785:5:9","nodeType":"FunctionDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":653,"mutability":"mutable","name":"s","nameLocation":"1806:1:9","nodeType":"VariableDeclaration","scope":671,"src":"1791:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":652,"nodeType":"UserDefinedTypeName","pathNode":{"id":651,"name":"Layout","nameLocations":["1791:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"1791:6:9"},"referencedDeclaration":574,"src":"1791:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"1790:18:9"},"returnParameters":{"id":655,"nodeType":"ParameterList","parameters":[],"src":"1818:0:9"},"scope":748,"src":"1776:131:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":692,"nodeType":"Block","src":"2088:89:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":678,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"2098:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":680,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2100:15:9","memberName":"enforceIsPaused","nodeType":"MemberAccess","referencedDeclaration":720,"src":"2098:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$574_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer) view"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2098:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":682,"nodeType":"ExpressionStatement","src":"2098:19:9"},{"expression":{"id":687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":683,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"2127:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":685,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2129:8:9","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":573,"src":"2127:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2140:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2127:18:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":688,"nodeType":"ExpressionStatement","src":"2127:18:9"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":689,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"2160:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2160:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":691,"nodeType":"EmitStatement","src":"2155:15:9"}]},"documentation":{"id":672,"nodeType":"StructuredDocumentation","src":"1913:126:9","text":"@notice Unpauses the contract.\n @dev Reverts if the contract is not paused.\n @dev Emits an {Unpaused} event."},"id":693,"implemented":true,"kind":"function","modifiers":[],"name":"unpause","nameLocation":"2053:7:9","nodeType":"FunctionDefinition","parameters":{"id":676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":675,"mutability":"mutable","name":"s","nameLocation":"2076:1:9","nodeType":"VariableDeclaration","scope":693,"src":"2061:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":674,"nodeType":"UserDefinedTypeName","pathNode":{"id":673,"name":"Layout","nameLocations":["2061:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"2061:6:9"},"referencedDeclaration":574,"src":"2061:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2060:18:9"},"returnParameters":{"id":677,"nodeType":"ParameterList","parameters":[],"src":"2088:0:9"},"scope":748,"src":"2044:133:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":705,"nodeType":"Block","src":"2369:34:9","statements":[{"expression":{"expression":{"id":702,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":697,"src":"2386:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":703,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2388:8:9","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":573,"src":"2386:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":701,"id":704,"nodeType":"Return","src":"2379:17:9"}]},"documentation":{"id":694,"nodeType":"StructuredDocumentation","src":"2183:109:9","text":"@notice Gets the paused state of the contract.\n @return isPaused The paused state of the contract."},"id":706,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"2306:6:9","nodeType":"FunctionDefinition","parameters":{"id":698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":697,"mutability":"mutable","name":"s","nameLocation":"2328:1:9","nodeType":"VariableDeclaration","scope":706,"src":"2313:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":696,"nodeType":"UserDefinedTypeName","pathNode":{"id":695,"name":"Layout","nameLocations":["2313:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"2313:6:9"},"referencedDeclaration":574,"src":"2313:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2312:18:9"},"returnParameters":{"id":701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":700,"mutability":"mutable","name":"isPaused","nameLocation":"2359:8:9","nodeType":"VariableDeclaration","scope":706,"src":"2354:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":699,"name":"bool","nodeType":"ElementaryTypeName","src":"2354:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2353:15:9"},"scope":748,"src":"2297:106:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":719,"nodeType":"Block","src":"2571:57:9","statements":[{"expression":{"arguments":[{"expression":{"id":714,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"2589:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":715,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2591:8:9","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":573,"src":"2589:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50617573653a206e6f7420706175736564","id":716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2601:19:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2","typeString":"literal_string \"Pause: not paused\""},"value":"Pause: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2","typeString":"literal_string \"Pause: not paused\""}],"id":713,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2581:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2581:40:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":718,"nodeType":"ExpressionStatement","src":"2581:40:9"}]},"documentation":{"id":707,"nodeType":"StructuredDocumentation","src":"2409:100:9","text":"@notice Ensures that the contract is paused.\n @dev Reverts if the contract is not paused."},"id":720,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsPaused","nameLocation":"2523:15:9","nodeType":"FunctionDefinition","parameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"s","nameLocation":"2554:1:9","nodeType":"VariableDeclaration","scope":720,"src":"2539:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":709,"nodeType":"UserDefinedTypeName","pathNode":{"id":708,"name":"Layout","nameLocations":["2539:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"2539:6:9"},"referencedDeclaration":574,"src":"2539:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2538:18:9"},"returnParameters":{"id":712,"nodeType":"ParameterList","parameters":[],"src":"2571:0:9"},"scope":748,"src":"2514:114:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":734,"nodeType":"Block","src":"2799:54:9","statements":[{"expression":{"arguments":[{"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2817:11:9","subExpression":{"expression":{"id":728,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"2818:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":729,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2820:8:9","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":573,"src":"2818:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50617573653a20706175736564","id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2830:15:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3","typeString":"literal_string \"Pause: paused\""},"value":"Pause: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3","typeString":"literal_string \"Pause: paused\""}],"id":727,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2809:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2809:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":733,"nodeType":"ExpressionStatement","src":"2809:37:9"}]},"documentation":{"id":721,"nodeType":"StructuredDocumentation","src":"2634:100:9","text":"@notice Ensures that the contract is not paused.\n @dev Reverts if the contract is paused."},"id":735,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsNotPaused","nameLocation":"2748:18:9","nodeType":"FunctionDefinition","parameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"s","nameLocation":"2782:1:9","nodeType":"VariableDeclaration","scope":735,"src":"2767:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":723,"nodeType":"UserDefinedTypeName","pathNode":{"id":722,"name":"Layout","nameLocations":["2767:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"2767:6:9"},"referencedDeclaration":574,"src":"2767:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2766:18:9"},"returnParameters":{"id":726,"nodeType":"ParameterList","parameters":[],"src":"2799:0:9"},"scope":748,"src":"2739:114:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":746,"nodeType":"Block","src":"2918:115:9","statements":[{"assignments":[742],"declarations":[{"constant":false,"id":742,"mutability":"mutable","name":"position","nameLocation":"2936:8:9","nodeType":"VariableDeclaration","scope":746,"src":"2928:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":741,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2928:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":744,"initialValue":{"id":743,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"2947:19:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2928:38:9"},{"AST":{"nodeType":"YulBlock","src":"2985:42:9","statements":[{"nodeType":"YulAssignment","src":"2999:18:9","value":{"name":"position","nodeType":"YulIdentifier","src":"3009:8:9"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"2999:6:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":742,"isOffset":false,"isSlot":false,"src":"3009:8:9","valueSize":1},{"declaration":739,"isOffset":false,"isSlot":true,"src":"2999:6:9","suffix":"slot","valueSize":1}],"id":745,"nodeType":"InlineAssembly","src":"2976:51:9"}]},"id":747,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"2868:6:9","nodeType":"FunctionDefinition","parameters":{"id":736,"nodeType":"ParameterList","parameters":[],"src":"2874:2:9"},"returnParameters":{"id":740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":739,"mutability":"mutable","name":"s","nameLocation":"2915:1:9","nodeType":"VariableDeclaration","scope":747,"src":"2900:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":738,"nodeType":"UserDefinedTypeName","pathNode":{"id":737,"name":"Layout","nameLocations":["2900:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"2900:6:9"},"referencedDeclaration":574,"src":"2900:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2899:18:9"},"scope":748,"src":"2859:174:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":749,"src":"143:2892:9","usedErrors":[]}],"src":"32:3004:9"},"id":9},"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipStorage":[307],"CumulativeMerkleClaim":[952],"MerkleProof":[1597],"Pause":[482],"PauseStorage":[748]},"id":953,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":750,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:10"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":752,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":953,"sourceUnit":1598,"src":"57:87:10","symbolAliases":[{"foreign":{"id":751,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"65:11:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../access/libraries/ContractOwnershipStorage.sol","id":754,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":953,"sourceUnit":308,"src":"145:92:10","symbolAliases":[{"foreign":{"id":753,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"153:24:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","file":"./../lifecycle/libraries/PauseStorage.sol","id":756,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":953,"sourceUnit":749,"src":"238:71:10","symbolAliases":[{"foreign":{"id":755,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"246:12:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../access/ContractOwnership.sol","id":758,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":953,"sourceUnit":33,"src":"310:68:10","symbolAliases":[{"foreign":{"id":757,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"318:17:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol","file":"./../lifecycle/Pause.sol","id":760,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":953,"sourceUnit":483,"src":"379:47:10","symbolAliases":[{"foreign":{"id":759,"name":"Pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"387:5:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":762,"name":"Pause","nameLocations":["1150:5:10"],"nodeType":"IdentifierPath","referencedDeclaration":482,"src":"1150:5:10"},"id":763,"nodeType":"InheritanceSpecifier","src":"1150:5:10"}],"canonicalName":"CumulativeMerkleClaim","contractDependencies":[],"contractKind":"contract","documentation":{"id":761,"nodeType":"StructuredDocumentation","src":"428:679:10","text":"@title CumulativeMerkleClaim\n @notice This contract is designed for claiming payouts which will cumulate over time.\n @notice A merkle tree is generated with one leaf for each claim recipient together with the description of the claim (claimData).\n @notice Flow: when new claims become available, the contract is paused to avoid further claims, a new tree is generated by summing up the current\n @notice unclaimed payouts and the new payouts, per user. The new tree is set and replaces the previous one and the contract is unpaused.\n @notice A nonce is used for each new tree and is included in every leaf to prevent collisions with claims from previous trees."},"fullyImplemented":false,"id":952,"linearizedBaseContracts":[952,482,32,338,350,82,105,563,1035],"name":"CumulativeMerkleClaim","nameLocation":"1125:21:10","nodeType":"ContractDefinition","nodes":[{"global":false,"id":767,"libraryName":{"id":764,"name":"MerkleProof","nameLocations":["1168:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1597,"src":"1168:11:10"},"nodeType":"UsingForDirective","src":"1162:32:10","typeName":{"baseType":{"id":765,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1184:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":766,"nodeType":"ArrayTypeName","src":"1184:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"global":false,"id":771,"libraryName":{"id":768,"name":"ContractOwnershipStorage","nameLocations":["1205:24:10"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"1205:24:10"},"nodeType":"UsingForDirective","src":"1199:67:10","typeName":{"id":770,"nodeType":"UserDefinedTypeName","pathNode":{"id":769,"name":"ContractOwnershipStorage.Layout","nameLocations":["1234:24:10","1259:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"1234:31:10"},"referencedDeclaration":124,"src":"1234:31:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":775,"libraryName":{"id":772,"name":"PauseStorage","nameLocations":["1277:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":748,"src":"1277:12:10"},"nodeType":"UsingForDirective","src":"1271:43:10","typeName":{"id":774,"nodeType":"UserDefinedTypeName","pathNode":{"id":773,"name":"PauseStorage.Layout","nameLocations":["1294:12:10","1307:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"1294:19:10"},"referencedDeclaration":574,"src":"1294:19:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout"}}},{"constant":false,"functionSelector":"ebf0c717","id":777,"mutability":"mutable","name":"root","nameLocation":"1335:4:10","nodeType":"VariableDeclaration","scope":952,"src":"1320:19:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":776,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1320:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"affed0e0","id":779,"mutability":"mutable","name":"nonce","nameLocation":"1360:5:10","nodeType":"VariableDeclaration","scope":952,"src":"1345:20:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":778,"name":"uint256","nodeType":"ElementaryTypeName","src":"1345:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"cc3c0f06","id":783,"mutability":"mutable","name":"claimed","nameLocation":"1404:7:10","nodeType":"VariableDeclaration","scope":952,"src":"1372:39:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":782,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":780,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1380:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1372:24:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":781,"name":"bool","nodeType":"ElementaryTypeName","src":"1391:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":784,"nodeType":"StructuredDocumentation","src":"1418:91:10","text":"@notice Emitted when a new merkle root is set.\n @param root The new merkle root."},"eventSelector":"42cbc405e4dbf1b691e85b9a34b08ecfcf7a9ad9078bf4d645ccfa1fac11c10b","id":788,"name":"MerkleRootSet","nameLocation":"1520:13:10","nodeType":"EventDefinition","parameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":786,"indexed":false,"mutability":"mutable","name":"root","nameLocation":"1542:4:10","nodeType":"VariableDeclaration","scope":788,"src":"1534:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":785,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1534:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1533:14:10"},"src":"1514:34:10"},{"anonymous":false,"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"1554:285:10","text":"@notice Emitted when a payout is claimed.\n @param root The merkle root on which the claim was made.\n @param recipient The recipient of the claim.\n @param claimData The encoded claim data for the claim.\n @param nonce The nonce as when the claim was made."},"eventSelector":"6a4408e44c908d501056e1ef88baf30a72467f3a181544a67a30cb14c8e80598","id":799,"name":"PayoutClaimed","nameLocation":"1850:13:10","nodeType":"EventDefinition","parameters":{"id":798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"indexed":true,"mutability":"mutable","name":"root","nameLocation":"1880:4:10","nodeType":"VariableDeclaration","scope":799,"src":"1864:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":790,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1864:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":793,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"1902:9:10","nodeType":"VariableDeclaration","scope":799,"src":"1886:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":792,"name":"address","nodeType":"ElementaryTypeName","src":"1886:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":795,"indexed":false,"mutability":"mutable","name":"claimData","nameLocation":"1919:9:10","nodeType":"VariableDeclaration","scope":799,"src":"1913:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":794,"name":"bytes","nodeType":"ElementaryTypeName","src":"1913:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":797,"indexed":false,"mutability":"mutable","name":"nonce","nameLocation":"1938:5:10","nodeType":"VariableDeclaration","scope":799,"src":"1930:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":796,"name":"uint256","nodeType":"ElementaryTypeName","src":"1930:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1863:81:10"},"src":"1844:101:10"},{"documentation":{"id":800,"nodeType":"StructuredDocumentation","src":"1951:244:10","text":"@notice Thrown when trying to claim the same leaf more than once.\n @param recipient The recipient of the claim.\n @param claimData The encoded claim data for the claim.\n @param nonce The nonce as when the claim was made."},"errorSelector":"7fbf2547","id":808,"name":"AlreadyClaimed","nameLocation":"2206:14:10","nodeType":"ErrorDefinition","parameters":{"id":807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":802,"mutability":"mutable","name":"recipient","nameLocation":"2229:9:10","nodeType":"VariableDeclaration","scope":808,"src":"2221:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":801,"name":"address","nodeType":"ElementaryTypeName","src":"2221:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":804,"mutability":"mutable","name":"claimData","nameLocation":"2246:9:10","nodeType":"VariableDeclaration","scope":808,"src":"2240:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":803,"name":"bytes","nodeType":"ElementaryTypeName","src":"2240:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":806,"mutability":"mutable","name":"nonce","nameLocation":"2265:5:10","nodeType":"VariableDeclaration","scope":808,"src":"2257:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":805,"name":"uint256","nodeType":"ElementaryTypeName","src":"2257:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2220:51:10"},"src":"2200:72:10"},{"documentation":{"id":809,"nodeType":"StructuredDocumentation","src":"2278:226:10","text":"@notice Thrown when a proof cannot be verified.\n @param recipient The recipient of the claim.\n @param claimData The encoded claim data for the claim.\n @param nonce The nonce as when the claim was made."},"errorSelector":"91ebfb31","id":817,"name":"InvalidProof","nameLocation":"2515:12:10","nodeType":"ErrorDefinition","parameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"recipient","nameLocation":"2536:9:10","nodeType":"VariableDeclaration","scope":817,"src":"2528:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":810,"name":"address","nodeType":"ElementaryTypeName","src":"2528:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":813,"mutability":"mutable","name":"claimData","nameLocation":"2553:9:10","nodeType":"VariableDeclaration","scope":817,"src":"2547:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":812,"name":"bytes","nodeType":"ElementaryTypeName","src":"2547:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":815,"mutability":"mutable","name":"nonce","nameLocation":"2572:5:10","nodeType":"VariableDeclaration","scope":817,"src":"2564:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":814,"name":"uint256","nodeType":"ElementaryTypeName","src":"2564:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2527:51:10"},"src":"2509:70:10"},{"body":{"id":827,"nodeType":"Block","src":"2641:2:10","statements":[]},"id":828,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"74727565","id":820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2605:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"id":821,"kind":"baseConstructorSpecifier","modifierName":{"id":819,"name":"Pause","nameLocations":["2599:5:10"],"nodeType":"IdentifierPath","referencedDeclaration":482,"src":"2599:5:10"},"nodeType":"ModifierInvocation","src":"2599:11:10"},{"arguments":[{"expression":{"id":823,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2629:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2633:6:10","memberName":"sender","nodeType":"MemberAccess","src":"2629:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":825,"kind":"baseConstructorSpecifier","modifierName":{"id":822,"name":"ContractOwnership","nameLocations":["2611:17:10"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"2611:17:10"},"nodeType":"ModifierInvocation","src":"2611:29:10"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":818,"nodeType":"ParameterList","parameters":[],"src":"2596:2:10"},"returnParameters":{"id":826,"nodeType":"ParameterList","parameters":[],"src":"2641:0:10"},"scope":952,"src":"2585:58:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":861,"nodeType":"Block","src":"3033:212:10","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":839,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"3100:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3100:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":834,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"3043:24:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3068:6:10","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"3043:31:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3043:33:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":838,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3077:22:10","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":294,"src":"3043:56:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3043:70:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":842,"nodeType":"ExpressionStatement","src":"3043:70:10"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":843,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"3123:12:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$748_$","typeString":"type(library PauseStorage)"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3136:6:10","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":747,"src":"3123:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3123:21:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":847,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3145:7:10","memberName":"unpause","nodeType":"MemberAccess","referencedDeclaration":693,"src":"3123:29:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$574_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer)"}},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3123:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":849,"nodeType":"ExpressionStatement","src":"3123:31:10"},{"expression":{"id":852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":850,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"3164:4:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":851,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"3171:10:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3164:17:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":853,"nodeType":"ExpressionStatement","src":"3164:17:10"},{"expression":{"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3191:7:10","subExpression":{"id":854,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"3193:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":856,"nodeType":"ExpressionStatement","src":"3191:7:10"},{"eventCall":{"arguments":[{"id":858,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"3227:10:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":857,"name":"MerkleRootSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"3213:13:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3213:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":860,"nodeType":"EmitStatement","src":"3208:30:10"}]},"documentation":{"id":829,"nodeType":"StructuredDocumentation","src":"2649:329:10","text":"@notice Sets the merkle root for a new claiming period and unpauses the contract.\n @dev Reverts if not called by the contract owner.\n @dev Reverts if the contract is not paused.\n @dev Emits an {Unpaused} event.\n @dev Emits a {MerkleRootSet} event.\n @param merkleRoot The merkle root to set."},"functionSelector":"7cb64759","id":862,"implemented":true,"kind":"function","modifiers":[],"name":"setMerkleRoot","nameLocation":"2992:13:10","nodeType":"FunctionDefinition","parameters":{"id":832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":831,"mutability":"mutable","name":"merkleRoot","nameLocation":"3014:10:10","nodeType":"VariableDeclaration","scope":862,"src":"3006:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3006:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3005:20:10"},"returnParameters":{"id":833,"nodeType":"ParameterList","parameters":[],"src":"3033:0:10"},"scope":952,"src":"2983:262:10","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":942,"nodeType":"Block","src":"3900:628:10","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":873,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"3910:12:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$748_$","typeString":"type(library PauseStorage)"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:6:10","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":747,"src":"3910:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3910:21:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$574_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":877,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3932:18:10","memberName":"enforceIsNotPaused","nodeType":"MemberAccess","referencedDeclaration":735,"src":"3910:40:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$574_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$574_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer) view"}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3910:42:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":879,"nodeType":"ExpressionStatement","src":"3910:42:10"},{"assignments":[881],"declarations":[{"constant":false,"id":881,"mutability":"mutable","name":"currentNonce","nameLocation":"3971:12:10","nodeType":"VariableDeclaration","scope":942,"src":"3963:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":880,"name":"uint256","nodeType":"ElementaryTypeName","src":"3963:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":883,"initialValue":{"id":882,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"3986:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3963:28:10"},{"assignments":[885],"declarations":[{"constant":false,"id":885,"mutability":"mutable","name":"currentRoot","nameLocation":"4009:11:10","nodeType":"VariableDeclaration","scope":942,"src":"4001:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":884,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4001:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":887,"initialValue":{"id":886,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"4023:4:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4001:26:10"},{"assignments":[889],"declarations":[{"constant":false,"id":889,"mutability":"mutable","name":"leaf","nameLocation":"4045:4:10","nodeType":"VariableDeclaration","scope":942,"src":"4037:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":888,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4037:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":898,"initialValue":{"arguments":[{"arguments":[{"id":893,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4079:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":894,"name":"claimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"4090:9:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":895,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"4101:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":891,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4062:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":892,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4066:12:10","memberName":"encodePacked","nodeType":"MemberAccess","src":"4062:16:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4062:52:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":890,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4052:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4052:63:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4037:78:10"},{"condition":{"baseExpression":{"id":899,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"4130:7:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":901,"indexExpression":{"id":900,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"4138:4:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4130:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":909,"nodeType":"IfStatement","src":"4126:101:10","trueBody":{"id":908,"nodeType":"Block","src":"4145:82:10","statements":[{"errorCall":{"arguments":[{"id":903,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4181:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":904,"name":"claimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"4192:9:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":905,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"4203:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":902,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"4166:14:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,bytes memory,uint256) pure"}},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4166:50:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":907,"nodeType":"RevertStatement","src":"4159:57:10"}]}},{"condition":{"id":915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4241:40:10","subExpression":{"arguments":[{"id":912,"name":"currentRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"4263:11:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":913,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"4276:4:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":910,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"4242:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4248:14:10","memberName":"verifyCalldata","nodeType":"MemberAccess","referencedDeclaration":1140,"src":"4242:20:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_calldata_ptr_$","typeString":"function (bytes32[] calldata,bytes32,bytes32) pure returns (bool)"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4242:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":923,"nodeType":"IfStatement","src":"4237:126:10","trueBody":{"id":922,"nodeType":"Block","src":"4283:80:10","statements":[{"errorCall":{"arguments":[{"id":917,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4317:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":918,"name":"claimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"4328:9:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":919,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"4339:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":916,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"4304:12:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,bytes memory,uint256) pure"}},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4304:48:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":921,"nodeType":"RevertStatement","src":"4297:55:10"}]}},{"expression":{"id":928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":924,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"4373:7:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":926,"indexExpression":{"id":925,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"4381:4:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4373:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4389:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4373:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":929,"nodeType":"ExpressionStatement","src":"4373:20:10"},{"eventCall":{"arguments":[{"id":931,"name":"currentRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"4423:11:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":932,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4436:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":933,"name":"claimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"4447:9:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":934,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"4458:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":930,"name":"PayoutClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"4409:13:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,bytes memory,uint256)"}},"id":935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4409:62:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":936,"nodeType":"EmitStatement","src":"4404:67:10"},{"expression":{"arguments":[{"id":938,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4500:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":939,"name":"claimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"4511:9:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":937,"name":"_distributePayout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"4482:17:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_calldata_ptr_$returns$__$","typeString":"function (address,bytes calldata)"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4482:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":941,"nodeType":"ExpressionStatement","src":"4482:39:10"}]},"documentation":{"id":863,"nodeType":"StructuredDocumentation","src":"3251:543:10","text":"@notice Executes the payout for a given user (anyone can call this function).\n @dev Reverts if the contract is paused.\n @dev Reverts with {AlreadyClaimed} if this specific payout has already been claimed.\n @dev Reverts with {InvalidProof} if the merkle proof cannot be verified.\n @dev Emits a {PayoutClaimed} event.\n @param recipient Address of the user to claim the payout\n @param claimData Encoded claim data for `recipient`\n @param proof Merkle proof of the user based on the merkle root"},"functionSelector":"edcdebcc","id":943,"implemented":true,"kind":"function","modifiers":[],"name":"claimPayout","nameLocation":"3808:11:10","nodeType":"FunctionDefinition","parameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":865,"mutability":"mutable","name":"recipient","nameLocation":"3828:9:10","nodeType":"VariableDeclaration","scope":943,"src":"3820:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":864,"name":"address","nodeType":"ElementaryTypeName","src":"3820:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":867,"mutability":"mutable","name":"claimData","nameLocation":"3854:9:10","nodeType":"VariableDeclaration","scope":943,"src":"3839:24:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":866,"name":"bytes","nodeType":"ElementaryTypeName","src":"3839:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":870,"mutability":"mutable","name":"proof","nameLocation":"3884:5:10","nodeType":"VariableDeclaration","scope":943,"src":"3865:24:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":868,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3865:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":869,"nodeType":"ArrayTypeName","src":"3865:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3819:71:10"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[],"src":"3900:0:10"},"scope":952,"src":"3799:729:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":944,"nodeType":"StructuredDocumentation","src":"4534:345:10","text":"@notice Distributes the payout to the recipient.\n @dev This virtual function must be implemented by inheriting contracts.\n @param recipient Address of the user to claim the payout\n @param claimData Encoded claim data for `recipient`. The encoding is specific to the inheriting contract, for example a quantity of tokens."},"id":951,"implemented":false,"kind":"function","modifiers":[],"name":"_distributePayout","nameLocation":"4893:17:10","nodeType":"FunctionDefinition","parameters":{"id":949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":946,"mutability":"mutable","name":"recipient","nameLocation":"4919:9:10","nodeType":"VariableDeclaration","scope":951,"src":"4911:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":945,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":948,"mutability":"mutable","name":"claimData","nameLocation":"4945:9:10","nodeType":"VariableDeclaration","scope":951,"src":"4930:24:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":947,"name":"bytes","nodeType":"ElementaryTypeName","src":"4930:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4910:45:10"},"returnParameters":{"id":950,"nodeType":"ParameterList","parameters":[],"src":"4972:0:10"},"scope":952,"src":"4884:89:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":953,"src":"1107:3868:10","usedErrors":[808,817]}],"src":"32:4944:10"},"id":10},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"ProxyInitialization":[991],"StorageSlot":[1095]},"id":992,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":954,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:11"},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":956,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":992,"sourceUnit":1096,"src":"57:74:11","symbolAliases":[{"foreign":{"id":955,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"65:11:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":957,"nodeType":"StructuredDocumentation","src":"133:92:11","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":991,"linearizedBaseContracts":[991],"name":"ProxyInitialization","nameLocation":"233:19:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":989,"nodeType":"Block","src":"600:216:11","statements":[{"assignments":[969],"declarations":[{"constant":false,"id":969,"mutability":"mutable","name":"currentVersion","nameLocation":"642:14:11","nodeType":"VariableDeclaration","scope":989,"src":"610:46:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1050_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":968,"nodeType":"UserDefinedTypeName","pathNode":{"id":967,"name":"StorageSlot.Uint256Slot","nameLocations":["610:11:11","622:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":1050,"src":"610:23:11"},"referencedDeclaration":1050,"src":"610:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1050_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":974,"initialValue":{"arguments":[{"id":972,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"686:11:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":970,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"659:11:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1095_$","typeString":"type(library StorageSlot)"}},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"671:14:11","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":1094,"src":"659:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$1050_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"659:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1050_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"610:88:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":976,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"716:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1050_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":977,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"731:5:11","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1049,"src":"716:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":978,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"739:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"716:28:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53746f726167653a2070686173652072656163686564","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"746:24:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef8a00474db48c1563590c05781d34a97d92c92640007c22c7decc1b54f3c741","typeString":"literal_string \"Storage: phase reached\""},"value":"Storage: phase reached"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef8a00474db48c1563590c05781d34a97d92c92640007c22c7decc1b54f3c741","typeString":"literal_string \"Storage: phase reached\""}],"id":975,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"708:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"708:63:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":982,"nodeType":"ExpressionStatement","src":"708:63:11"},{"expression":{"id":987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":983,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"781:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1050_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":985,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"796:5:11","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1049,"src":"781:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":986,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"804:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"781:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":988,"nodeType":"ExpressionStatement","src":"781:28:11"}]},"documentation":{"id":958,"nodeType":"StructuredDocumentation","src":"259:273:11","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":990,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"546:8:11","nodeType":"FunctionDefinition","parameters":{"id":963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":960,"mutability":"mutable","name":"storageSlot","nameLocation":"563:11:11","nodeType":"VariableDeclaration","scope":990,"src":"555:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"555:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":962,"mutability":"mutable","name":"phase","nameLocation":"584:5:11","nodeType":"VariableDeclaration","scope":990,"src":"576:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":961,"name":"uint256","nodeType":"ElementaryTypeName","src":"576:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"554:36:11"},"returnParameters":{"id":964,"nodeType":"ParameterList","parameters":[],"src":"600:0:11"},"scope":991,"src":"537:279:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":992,"src":"225:593:11","usedErrors":[]}],"src":"32:787:11"},"id":11},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol","exportedSymbols":{"IERC20Mintable":[1013]},"id":1014,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":993,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":994,"nodeType":"StructuredDocumentation","src":"57:186:12","text":"@title ERC20 Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x28963e1e."},"fullyImplemented":false,"id":1013,"linearizedBaseContracts":[1013],"name":"IERC20Mintable","nameLocation":"253:14:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":995,"nodeType":"StructuredDocumentation","src":"274:371:12","text":"@notice Mints an amount of tokens to a recipient, increasing the total supply.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the total supply overflows.\n @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\n @param to The account to mint the tokens to.\n @param value The amount of tokens to mint."},"functionSelector":"40c10f19","id":1002,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"659:4:12","nodeType":"FunctionDefinition","parameters":{"id":1000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":997,"mutability":"mutable","name":"to","nameLocation":"672:2:12","nodeType":"VariableDeclaration","scope":1002,"src":"664:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":996,"name":"address","nodeType":"ElementaryTypeName","src":"664:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":999,"mutability":"mutable","name":"value","nameLocation":"684:5:12","nodeType":"VariableDeclaration","scope":1002,"src":"676:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":998,"name":"uint256","nodeType":"ElementaryTypeName","src":"676:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"663:27:12"},"returnParameters":{"id":1001,"nodeType":"ParameterList","parameters":[],"src":"699:0:12"},"scope":1013,"src":"650:50:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1003,"nodeType":"StructuredDocumentation","src":"706:544:12","text":"@notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n @dev Reverts if `recipients` and `values` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if the total supply overflows.\n @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\n @param recipients The list of accounts to mint the tokens to.\n @param values The list of amounts of tokens to mint to each of `recipients`."},"functionSelector":"68573107","id":1012,"implemented":false,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"1264:9:12","nodeType":"FunctionDefinition","parameters":{"id":1010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1006,"mutability":"mutable","name":"recipients","nameLocation":"1293:10:12","nodeType":"VariableDeclaration","scope":1012,"src":"1274:29:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1004,"name":"address","nodeType":"ElementaryTypeName","src":"1274:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1005,"nodeType":"ArrayTypeName","src":"1274:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1009,"mutability":"mutable","name":"values","nameLocation":"1324:6:12","nodeType":"VariableDeclaration","scope":1012,"src":"1305:25:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1007,"name":"uint256","nodeType":"ElementaryTypeName","src":"1305:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1008,"nodeType":"ArrayTypeName","src":"1305:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1273:58:12"},"returnParameters":{"id":1011,"nodeType":"ParameterList","parameters":[],"src":"1340:0:12"},"scope":1013,"src":"1255:86:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1014,"src":"243:1100:12","usedErrors":[]}],"src":"32:1312:12"},"id":12},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1035]},"id":1036,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1015,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:13"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1016,"nodeType":"StructuredDocumentation","src":"111:496:13","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1035,"linearizedBaseContracts":[1035],"name":"Context","nameLocation":"626:7:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":1024,"nodeType":"Block","src":"702:34:13","statements":[{"expression":{"expression":{"id":1021,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:13","memberName":"sender","nodeType":"MemberAccess","src":"719:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1020,"id":1023,"nodeType":"Return","src":"712:17:13"}]},"id":1025,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:13","nodeType":"FunctionDefinition","parameters":{"id":1017,"nodeType":"ParameterList","parameters":[],"src":"659:2:13"},"returnParameters":{"id":1020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1025,"src":"693:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1018,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:13"},"scope":1035,"src":"640:96:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1033,"nodeType":"Block","src":"809:32:13","statements":[{"expression":{"expression":{"id":1030,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:13","memberName":"data","nodeType":"MemberAccess","src":"826:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1029,"id":1032,"nodeType":"Return","src":"819:15:13"}]},"id":1034,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:13","nodeType":"FunctionDefinition","parameters":{"id":1026,"nodeType":"ParameterList","parameters":[],"src":"759:2:13"},"returnParameters":{"id":1029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1034,"src":"793:14:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1027,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:13"},"scope":1035,"src":"742:99:13","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1036,"src":"608:235:13","usedErrors":[]}],"src":"86:758:13"},"id":13},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1095]},"id":1096,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1037,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":1038,"nodeType":"StructuredDocumentation","src":"130:1148:14","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":1095,"linearizedBaseContracts":[1095],"name":"StorageSlot","nameLocation":"1287:11:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":1041,"members":[{"constant":false,"id":1040,"mutability":"mutable","name":"value","nameLocation":"1342:5:14","nodeType":"VariableDeclaration","scope":1041,"src":"1334:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1039,"name":"address","nodeType":"ElementaryTypeName","src":"1334:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1312:11:14","nodeType":"StructDefinition","scope":1095,"src":"1305:49:14","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":1044,"members":[{"constant":false,"id":1043,"mutability":"mutable","name":"value","nameLocation":"1394:5:14","nodeType":"VariableDeclaration","scope":1044,"src":"1389:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1042,"name":"bool","nodeType":"ElementaryTypeName","src":"1389:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1367:11:14","nodeType":"StructDefinition","scope":1095,"src":"1360:46:14","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":1047,"members":[{"constant":false,"id":1046,"mutability":"mutable","name":"value","nameLocation":"1449:5:14","nodeType":"VariableDeclaration","scope":1047,"src":"1441:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1045,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1441:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1419:11:14","nodeType":"StructDefinition","scope":1095,"src":"1412:49:14","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":1050,"members":[{"constant":false,"id":1049,"mutability":"mutable","name":"value","nameLocation":"1504:5:14","nodeType":"VariableDeclaration","scope":1050,"src":"1496:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1048,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1474:11:14","nodeType":"StructDefinition","scope":1095,"src":"1467:49:14","visibility":"public"},{"body":{"id":1060,"nodeType":"Block","src":"1698:106:14","statements":[{"AST":{"nodeType":"YulBlock","src":"1760:38:14","statements":[{"nodeType":"YulAssignment","src":"1774:14:14","value":{"name":"slot","nodeType":"YulIdentifier","src":"1784:4:14"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1774:6:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1057,"isOffset":false,"isSlot":true,"src":"1774:6:14","suffix":"slot","valueSize":1},{"declaration":1053,"isOffset":false,"isSlot":false,"src":"1784:4:14","valueSize":1}],"id":1059,"nodeType":"InlineAssembly","src":"1751:47:14"}]},"documentation":{"id":1051,"nodeType":"StructuredDocumentation","src":"1522:87:14","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1061,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1623:14:14","nodeType":"FunctionDefinition","parameters":{"id":1054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1053,"mutability":"mutable","name":"slot","nameLocation":"1646:4:14","nodeType":"VariableDeclaration","scope":1061,"src":"1638:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1638:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1637:14:14"},"returnParameters":{"id":1058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1057,"mutability":"mutable","name":"r","nameLocation":"1695:1:14","nodeType":"VariableDeclaration","scope":1061,"src":"1675:21:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1041_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":1056,"nodeType":"UserDefinedTypeName","pathNode":{"id":1055,"name":"AddressSlot","nameLocations":["1675:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":1041,"src":"1675:11:14"},"referencedDeclaration":1041,"src":"1675:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1041_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1674:23:14"},"scope":1095,"src":"1614:190:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1071,"nodeType":"Block","src":"1986:106:14","statements":[{"AST":{"nodeType":"YulBlock","src":"2048:38:14","statements":[{"nodeType":"YulAssignment","src":"2062:14:14","value":{"name":"slot","nodeType":"YulIdentifier","src":"2072:4:14"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2062:6:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1068,"isOffset":false,"isSlot":true,"src":"2062:6:14","suffix":"slot","valueSize":1},{"declaration":1064,"isOffset":false,"isSlot":false,"src":"2072:4:14","valueSize":1}],"id":1070,"nodeType":"InlineAssembly","src":"2039:47:14"}]},"documentation":{"id":1062,"nodeType":"StructuredDocumentation","src":"1810:87:14","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1072,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1911:14:14","nodeType":"FunctionDefinition","parameters":{"id":1065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1064,"mutability":"mutable","name":"slot","nameLocation":"1934:4:14","nodeType":"VariableDeclaration","scope":1072,"src":"1926:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1063,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1926:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1925:14:14"},"returnParameters":{"id":1069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1068,"mutability":"mutable","name":"r","nameLocation":"1983:1:14","nodeType":"VariableDeclaration","scope":1072,"src":"1963:21:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1044_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":1067,"nodeType":"UserDefinedTypeName","pathNode":{"id":1066,"name":"BooleanSlot","nameLocations":["1963:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":1044,"src":"1963:11:14"},"referencedDeclaration":1044,"src":"1963:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1044_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"1962:23:14"},"scope":1095,"src":"1902:190:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1082,"nodeType":"Block","src":"2274:106:14","statements":[{"AST":{"nodeType":"YulBlock","src":"2336:38:14","statements":[{"nodeType":"YulAssignment","src":"2350:14:14","value":{"name":"slot","nodeType":"YulIdentifier","src":"2360:4:14"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2350:6:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1079,"isOffset":false,"isSlot":true,"src":"2350:6:14","suffix":"slot","valueSize":1},{"declaration":1075,"isOffset":false,"isSlot":false,"src":"2360:4:14","valueSize":1}],"id":1081,"nodeType":"InlineAssembly","src":"2327:47:14"}]},"documentation":{"id":1073,"nodeType":"StructuredDocumentation","src":"2098:87:14","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1083,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2199:14:14","nodeType":"FunctionDefinition","parameters":{"id":1076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1075,"mutability":"mutable","name":"slot","nameLocation":"2222:4:14","nodeType":"VariableDeclaration","scope":1083,"src":"2214:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1074,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2214:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2213:14:14"},"returnParameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1079,"mutability":"mutable","name":"r","nameLocation":"2271:1:14","nodeType":"VariableDeclaration","scope":1083,"src":"2251:21:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1047_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":1078,"nodeType":"UserDefinedTypeName","pathNode":{"id":1077,"name":"Bytes32Slot","nameLocations":["2251:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":1047,"src":"2251:11:14"},"referencedDeclaration":1047,"src":"2251:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1047_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2250:23:14"},"scope":1095,"src":"2190:190:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1093,"nodeType":"Block","src":"2562:106:14","statements":[{"AST":{"nodeType":"YulBlock","src":"2624:38:14","statements":[{"nodeType":"YulAssignment","src":"2638:14:14","value":{"name":"slot","nodeType":"YulIdentifier","src":"2648:4:14"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2638:6:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1090,"isOffset":false,"isSlot":true,"src":"2638:6:14","suffix":"slot","valueSize":1},{"declaration":1086,"isOffset":false,"isSlot":false,"src":"2648:4:14","valueSize":1}],"id":1092,"nodeType":"InlineAssembly","src":"2615:47:14"}]},"documentation":{"id":1084,"nodeType":"StructuredDocumentation","src":"2386:87:14","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1094,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2487:14:14","nodeType":"FunctionDefinition","parameters":{"id":1087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1086,"mutability":"mutable","name":"slot","nameLocation":"2510:4:14","nodeType":"VariableDeclaration","scope":1094,"src":"2502:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1085,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2502:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2501:14:14"},"returnParameters":{"id":1091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1090,"mutability":"mutable","name":"r","nameLocation":"2559:1:14","nodeType":"VariableDeclaration","scope":1094,"src":"2539:21:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1050_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1089,"nodeType":"UserDefinedTypeName","pathNode":{"id":1088,"name":"Uint256Slot","nameLocations":["2539:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":1050,"src":"2539:11:14"},"referencedDeclaration":1050,"src":"2539:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1050_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2538:23:14"},"scope":1095,"src":"2478:190:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1096,"src":"1279:1391:14","usedErrors":[]}],"src":"105:2566:14"},"id":14},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[1597]},"id":1598,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1097,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":1098,"nodeType":"StructuredDocumentation","src":"143:658:15","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":1597,"linearizedBaseContracts":[1597],"name":"MerkleProof","nameLocation":"810:11:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":1118,"nodeType":"Block","src":"1283:57:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1112,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"1313:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1113,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"1320:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1111,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"1300:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1115,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"1329:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1110,"id":1117,"nodeType":"Return","src":"1293:40:15"}]},"documentation":{"id":1099,"nodeType":"StructuredDocumentation","src":"828:323:15","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":1119,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:15","nodeType":"FunctionDefinition","parameters":{"id":1107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1102,"mutability":"mutable","name":"proof","nameLocation":"1198:5:15","nodeType":"VariableDeclaration","scope":1119,"src":"1181:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1101,"nodeType":"ArrayTypeName","src":"1181:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1104,"mutability":"mutable","name":"root","nameLocation":"1221:4:15","nodeType":"VariableDeclaration","scope":1119,"src":"1213:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1103,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1106,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:15","nodeType":"VariableDeclaration","scope":1119,"src":"1235:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1105,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:15"},"returnParameters":{"id":1110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1109,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1119,"src":"1277:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1108,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:15"},"scope":1597,"src":"1156:184:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1139,"nodeType":"Block","src":"1578:65:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1133,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"1616:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1134,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"1623:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1132,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"1595:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1136,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"1632:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1131,"id":1138,"nodeType":"Return","src":"1588:48:15"}]},"documentation":{"id":1120,"nodeType":"StructuredDocumentation","src":"1346:90:15","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":1140,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:15","nodeType":"FunctionDefinition","parameters":{"id":1128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1123,"mutability":"mutable","name":"proof","nameLocation":"1493:5:15","nodeType":"VariableDeclaration","scope":1140,"src":"1474:24:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1121,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1122,"nodeType":"ArrayTypeName","src":"1474:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1125,"mutability":"mutable","name":"root","nameLocation":"1516:4:15","nodeType":"VariableDeclaration","scope":1140,"src":"1508:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1127,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:15","nodeType":"VariableDeclaration","scope":1140,"src":"1530:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1126,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:15"},"returnParameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1140,"src":"1572:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1129,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:15"},"scope":1597,"src":"1441:202:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1179,"nodeType":"Block","src":"2086:198:15","statements":[{"assignments":[1152],"declarations":[{"constant":false,"id":1152,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:15","nodeType":"VariableDeclaration","scope":1179,"src":"2096:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1151,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1154,"initialValue":{"id":1153,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"2119:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:15"},{"body":{"id":1175,"nodeType":"Block","src":"2176:73:15","statements":[{"expression":{"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1166,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"2190:12:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1168,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"2215:12:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1169,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"2229:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1171,"indexExpression":{"id":1170,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"2235:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1167,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"2205:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1174,"nodeType":"ExpressionStatement","src":"2190:48:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1159,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"2153:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1160,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"2157:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:15","memberName":"length","nodeType":"MemberAccess","src":"2157:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1176,"initializationExpression":{"assignments":[1156],"declarations":[{"constant":false,"id":1156,"mutability":"mutable","name":"i","nameLocation":"2146:1:15","nodeType":"VariableDeclaration","scope":1176,"src":"2138:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1155,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1158,"initialValue":{"hexValue":"30","id":1157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:15"},"loopExpression":{"expression":{"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:15","subExpression":{"id":1163,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"2171:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1165,"nodeType":"ExpressionStatement","src":"2171:3:15"},"nodeType":"ForStatement","src":"2133:116:15"},{"expression":{"id":1177,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"2265:12:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1150,"id":1178,"nodeType":"Return","src":"2258:19:15"}]},"documentation":{"id":1141,"nodeType":"StructuredDocumentation","src":"1649:340:15","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":1180,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:15","nodeType":"FunctionDefinition","parameters":{"id":1147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1144,"mutability":"mutable","name":"proof","nameLocation":"2033:5:15","nodeType":"VariableDeclaration","scope":1180,"src":"2016:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1142,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1143,"nodeType":"ArrayTypeName","src":"2016:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1146,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:15","nodeType":"VariableDeclaration","scope":1180,"src":"2040:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1145,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:15"},"returnParameters":{"id":1150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1149,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1180,"src":"2077:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:15"},"scope":1597,"src":"1994:290:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1219,"nodeType":"Block","src":"2493:198:15","statements":[{"assignments":[1192],"declarations":[{"constant":false,"id":1192,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:15","nodeType":"VariableDeclaration","scope":1219,"src":"2503:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1191,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1194,"initialValue":{"id":1193,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1186,"src":"2526:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:15"},{"body":{"id":1215,"nodeType":"Block","src":"2583:73:15","statements":[{"expression":{"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1206,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"2597:12:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1208,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"2622:12:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1209,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"2636:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1211,"indexExpression":{"id":1210,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"2642:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1207,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"2612:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1214,"nodeType":"ExpressionStatement","src":"2597:48:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1199,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"2560:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1200,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"2564:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:15","memberName":"length","nodeType":"MemberAccess","src":"2564:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1216,"initializationExpression":{"assignments":[1196],"declarations":[{"constant":false,"id":1196,"mutability":"mutable","name":"i","nameLocation":"2553:1:15","nodeType":"VariableDeclaration","scope":1216,"src":"2545:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1195,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1198,"initialValue":{"hexValue":"30","id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:15"},"loopExpression":{"expression":{"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:15","subExpression":{"id":1203,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"2578:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1205,"nodeType":"ExpressionStatement","src":"2578:3:15"},"nodeType":"ForStatement","src":"2540:116:15"},{"expression":{"id":1217,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"2672:12:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1190,"id":1218,"nodeType":"Return","src":"2665:19:15"}]},"documentation":{"id":1181,"nodeType":"StructuredDocumentation","src":"2290:96:15","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":1220,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:15","nodeType":"FunctionDefinition","parameters":{"id":1187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1184,"mutability":"mutable","name":"proof","nameLocation":"2440:5:15","nodeType":"VariableDeclaration","scope":1220,"src":"2421:24:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1182,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1183,"nodeType":"ArrayTypeName","src":"2421:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1186,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:15","nodeType":"VariableDeclaration","scope":1220,"src":"2447:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1185,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:15"},"returnParameters":{"id":1190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1189,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1220,"src":"2484:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1188,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:15"},"scope":1597,"src":"2391:300:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1245,"nodeType":"Block","src":"3234:76:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1238,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"3269:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1239,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"3276:10:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":1240,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"3288:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1237,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3251:17:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1242,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1229,"src":"3299:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1236,"id":1244,"nodeType":"Return","src":"3244:59:15"}]},"documentation":{"id":1221,"nodeType":"StructuredDocumentation","src":"2697:350:15","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1246,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:15","nodeType":"FunctionDefinition","parameters":{"id":1233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1224,"mutability":"mutable","name":"proof","nameLocation":"3104:5:15","nodeType":"VariableDeclaration","scope":1246,"src":"3087:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1222,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1223,"nodeType":"ArrayTypeName","src":"3087:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1227,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:15","nodeType":"VariableDeclaration","scope":1246,"src":"3119:24:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1225,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1226,"nodeType":"ArrayTypeName","src":"3119:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1229,"mutability":"mutable","name":"root","nameLocation":"3161:4:15","nodeType":"VariableDeclaration","scope":1246,"src":"3153:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1228,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1232,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:15","nodeType":"VariableDeclaration","scope":1246,"src":"3175:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1231,"nodeType":"ArrayTypeName","src":"3175:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:15"},"returnParameters":{"id":1236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1235,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1246,"src":"3228:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1234,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:15"},"scope":1597,"src":"3052:258:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1271,"nodeType":"Block","src":"3715:84:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1264,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"3758:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1265,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"3765:10:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1266,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"3777:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1263,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"3732:25:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1268,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"3788:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1262,"id":1270,"nodeType":"Return","src":"3725:67:15"}]},"documentation":{"id":1247,"nodeType":"StructuredDocumentation","src":"3316:200:15","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1272,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:15","nodeType":"FunctionDefinition","parameters":{"id":1259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1250,"mutability":"mutable","name":"proof","nameLocation":"3583:5:15","nodeType":"VariableDeclaration","scope":1272,"src":"3564:24:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1248,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1249,"nodeType":"ArrayTypeName","src":"3564:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1253,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:15","nodeType":"VariableDeclaration","scope":1272,"src":"3598:26:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1251,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1252,"nodeType":"ArrayTypeName","src":"3598:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1255,"mutability":"mutable","name":"root","nameLocation":"3642:4:15","nodeType":"VariableDeclaration","scope":1272,"src":"3634:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1258,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:15","nodeType":"VariableDeclaration","scope":1272,"src":"3656:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1256,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1257,"nodeType":"ArrayTypeName","src":"3656:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:15"},"returnParameters":{"id":1262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1272,"src":"3709:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1260,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:15"},"scope":1597,"src":"3521:278:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1416,"nodeType":"Block","src":"4753:1860:15","statements":[{"assignments":[1288],"declarations":[{"constant":false,"id":1288,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:15","nodeType":"VariableDeclaration","scope":1416,"src":"5136:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1287,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1291,"initialValue":{"expression":{"id":1289,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"5156:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:15","memberName":"length","nodeType":"MemberAccess","src":"5156:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:15"},{"assignments":[1293],"declarations":[{"constant":false,"id":1293,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:15","nodeType":"VariableDeclaration","scope":1416,"src":"5179:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1292,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1296,"initialValue":{"expression":{"id":1294,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"5201:10:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:15","memberName":"length","nodeType":"MemberAccess","src":"5201:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1298,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"5270:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1299,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"5282:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:15","memberName":"length","nodeType":"MemberAccess","src":"5282:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1304,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"5302:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1297,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5262:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1308,"nodeType":"ExpressionStatement","src":"5262:87:15"},{"assignments":[1313],"declarations":[{"constant":false,"id":1313,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:15","nodeType":"VariableDeclaration","scope":1416,"src":"5594:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1311,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1312,"nodeType":"ArrayTypeName","src":"5594:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1319,"initialValue":{"arguments":[{"id":1317,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"5634:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1315,"nodeType":"ArrayTypeName","src":"5624:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:15"},{"assignments":[1321],"declarations":[{"constant":false,"id":1321,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:15","nodeType":"VariableDeclaration","scope":1416,"src":"5656:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1320,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1323,"initialValue":{"hexValue":"30","id":1322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:15"},{"assignments":[1325],"declarations":[{"constant":false,"id":1325,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:15","nodeType":"VariableDeclaration","scope":1416,"src":"5685:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1324,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1327,"initialValue":{"hexValue":"30","id":1326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:15"},{"assignments":[1329],"declarations":[{"constant":false,"id":1329,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:15","nodeType":"VariableDeclaration","scope":1416,"src":"5714:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1328,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1331,"initialValue":{"hexValue":"30","id":1330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:15"},{"body":{"id":1389,"nodeType":"Block","src":"6151:258:15","statements":[{"assignments":[1343],"declarations":[{"constant":false,"id":1343,"mutability":"mutable","name":"a","nameLocation":"6173:1:15","nodeType":"VariableDeclaration","scope":1389,"src":"6165:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1356,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1344,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"6177:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1345,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"6187:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1351,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"6219:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1354,"indexExpression":{"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:15","subExpression":{"id":1352,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"6226:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:15","trueExpression":{"baseExpression":{"id":1347,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"6199:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1350,"indexExpression":{"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:15","subExpression":{"id":1348,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"6206:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:15"},{"assignments":[1358],"declarations":[{"constant":false,"id":1358,"mutability":"mutable","name":"b","nameLocation":"6258:1:15","nodeType":"VariableDeclaration","scope":1389,"src":"6250:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1379,"initialValue":{"condition":{"baseExpression":{"id":1359,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"6262:10:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1361,"indexExpression":{"id":1360,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"6273:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1374,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"6340:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1377,"indexExpression":{"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:15","subExpression":{"id":1375,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"6346:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:15","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1362,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"6278:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1363,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"6288:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1369,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"6320:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1372,"indexExpression":{"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:15","subExpression":{"id":1370,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"6327:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:15","trueExpression":{"baseExpression":{"id":1365,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"6300:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1368,"indexExpression":{"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:15","subExpression":{"id":1366,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"6307:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:15"},{"expression":{"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1380,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"6371:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1382,"indexExpression":{"id":1381,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"6378:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1384,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"6393:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1385,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"6396:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1383,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"6383:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1388,"nodeType":"ExpressionStatement","src":"6371:27:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1336,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"6129:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1337,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"6133:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1390,"initializationExpression":{"assignments":[1333],"declarations":[{"constant":false,"id":1333,"mutability":"mutable","name":"i","nameLocation":"6122:1:15","nodeType":"VariableDeclaration","scope":1390,"src":"6114:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1332,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1335,"initialValue":{"hexValue":"30","id":1334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:15"},"loopExpression":{"expression":{"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:15","subExpression":{"id":1339,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"6146:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1341,"nodeType":"ExpressionStatement","src":"6146:3:15"},"nodeType":"ForStatement","src":"6109:300:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1391,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"6423:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1401,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"6505:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1413,"nodeType":"Block","src":"6567:40:15","statements":[{"expression":{"baseExpression":{"id":1409,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"6588:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1411,"indexExpression":{"hexValue":"30","id":1410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1286,"id":1412,"nodeType":"Return","src":"6581:15:15"}]},"id":1414,"nodeType":"IfStatement","src":"6501:106:15","trueBody":{"id":1408,"nodeType":"Block","src":"6520:41:15","statements":[{"expression":{"baseExpression":{"id":1404,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"6541:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1406,"indexExpression":{"hexValue":"30","id":1405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1286,"id":1407,"nodeType":"Return","src":"6534:16:15"}]}},"id":1415,"nodeType":"IfStatement","src":"6419:188:15","trueBody":{"id":1400,"nodeType":"Block","src":"6440:55:15","statements":[{"expression":{"baseExpression":{"id":1394,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"6461:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1398,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1395,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"6468:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1286,"id":1399,"nodeType":"Return","src":"6454:30:15"}]}}]},"documentation":{"id":1273,"nodeType":"StructuredDocumentation","src":"3805:768:15","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":1417,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:15","nodeType":"FunctionDefinition","parameters":{"id":1283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1276,"mutability":"mutable","name":"proof","nameLocation":"4631:5:15","nodeType":"VariableDeclaration","scope":1417,"src":"4614:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1274,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1275,"nodeType":"ArrayTypeName","src":"4614:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1279,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:15","nodeType":"VariableDeclaration","scope":1417,"src":"4646:24:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1277,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1278,"nodeType":"ArrayTypeName","src":"4646:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1282,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:15","nodeType":"VariableDeclaration","scope":1417,"src":"4680:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1281,"nodeType":"ArrayTypeName","src":"4680:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:15"},"returnParameters":{"id":1286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1285,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:15","nodeType":"VariableDeclaration","scope":1417,"src":"4733:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1284,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:15"},"scope":1597,"src":"4578:2035:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1561,"nodeType":"Block","src":"7013:1860:15","statements":[{"assignments":[1433],"declarations":[{"constant":false,"id":1433,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:15","nodeType":"VariableDeclaration","scope":1561,"src":"7396:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1432,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1436,"initialValue":{"expression":{"id":1434,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1427,"src":"7416:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:15","memberName":"length","nodeType":"MemberAccess","src":"7416:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:15"},{"assignments":[1438],"declarations":[{"constant":false,"id":1438,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:15","nodeType":"VariableDeclaration","scope":1561,"src":"7439:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1437,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1441,"initialValue":{"expression":{"id":1439,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"7461:10:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:15","memberName":"length","nodeType":"MemberAccess","src":"7461:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1443,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"7530:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1444,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"7542:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:15","memberName":"length","nodeType":"MemberAccess","src":"7542:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1449,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"7562:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1442,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7522:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1453,"nodeType":"ExpressionStatement","src":"7522:87:15"},{"assignments":[1458],"declarations":[{"constant":false,"id":1458,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:15","nodeType":"VariableDeclaration","scope":1561,"src":"7854:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1456,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1457,"nodeType":"ArrayTypeName","src":"7854:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1464,"initialValue":{"arguments":[{"id":1462,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"7894:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1459,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1460,"nodeType":"ArrayTypeName","src":"7884:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:15"},{"assignments":[1466],"declarations":[{"constant":false,"id":1466,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:15","nodeType":"VariableDeclaration","scope":1561,"src":"7916:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1465,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1468,"initialValue":{"hexValue":"30","id":1467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:15"},{"assignments":[1470],"declarations":[{"constant":false,"id":1470,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:15","nodeType":"VariableDeclaration","scope":1561,"src":"7945:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1469,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1472,"initialValue":{"hexValue":"30","id":1471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:15"},{"assignments":[1474],"declarations":[{"constant":false,"id":1474,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:15","nodeType":"VariableDeclaration","scope":1561,"src":"7974:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1473,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1476,"initialValue":{"hexValue":"30","id":1475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:15"},{"body":{"id":1534,"nodeType":"Block","src":"8411:258:15","statements":[{"assignments":[1488],"declarations":[{"constant":false,"id":1488,"mutability":"mutable","name":"a","nameLocation":"8433:1:15","nodeType":"VariableDeclaration","scope":1534,"src":"8425:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1501,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1489,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"8437:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1490,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"8447:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1496,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"8479:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1499,"indexExpression":{"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:15","subExpression":{"id":1497,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"8486:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:15","trueExpression":{"baseExpression":{"id":1492,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1427,"src":"8459:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1495,"indexExpression":{"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:15","subExpression":{"id":1493,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"8466:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:15"},{"assignments":[1503],"declarations":[{"constant":false,"id":1503,"mutability":"mutable","name":"b","nameLocation":"8518:1:15","nodeType":"VariableDeclaration","scope":1534,"src":"8510:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1502,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1524,"initialValue":{"condition":{"baseExpression":{"id":1504,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"8522:10:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1506,"indexExpression":{"id":1505,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"8533:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1519,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"8600:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1522,"indexExpression":{"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:15","subExpression":{"id":1520,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"8606:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:15","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1507,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"8538:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1508,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"8548:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1514,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"8580:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1517,"indexExpression":{"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:15","subExpression":{"id":1515,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"8587:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:15","trueExpression":{"baseExpression":{"id":1510,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1427,"src":"8560:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1513,"indexExpression":{"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:15","subExpression":{"id":1511,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"8567:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:15"},{"expression":{"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1525,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"8631:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1527,"indexExpression":{"id":1526,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"8638:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1529,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"8653:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1530,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"8656:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1528,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"8643:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1533,"nodeType":"ExpressionStatement","src":"8631:27:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1481,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"8389:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1482,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"8393:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1535,"initializationExpression":{"assignments":[1478],"declarations":[{"constant":false,"id":1478,"mutability":"mutable","name":"i","nameLocation":"8382:1:15","nodeType":"VariableDeclaration","scope":1535,"src":"8374:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1477,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1480,"initialValue":{"hexValue":"30","id":1479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:15"},"loopExpression":{"expression":{"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:15","subExpression":{"id":1484,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"8406:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1486,"nodeType":"ExpressionStatement","src":"8406:3:15"},"nodeType":"ForStatement","src":"8369:300:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1536,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"8683:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1546,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"8765:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1558,"nodeType":"Block","src":"8827:40:15","statements":[{"expression":{"baseExpression":{"id":1554,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"8848:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1556,"indexExpression":{"hexValue":"30","id":1555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1431,"id":1557,"nodeType":"Return","src":"8841:15:15"}]},"id":1559,"nodeType":"IfStatement","src":"8761:106:15","trueBody":{"id":1553,"nodeType":"Block","src":"8780:41:15","statements":[{"expression":{"baseExpression":{"id":1549,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1427,"src":"8801:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1551,"indexExpression":{"hexValue":"30","id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1431,"id":1552,"nodeType":"Return","src":"8794:16:15"}]}},"id":1560,"nodeType":"IfStatement","src":"8679:188:15","trueBody":{"id":1545,"nodeType":"Block","src":"8700:55:15","statements":[{"expression":{"baseExpression":{"id":1539,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"8721:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1543,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1540,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"8728:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1431,"id":1544,"nodeType":"Return","src":"8714:30:15"}]}}]},"documentation":{"id":1418,"nodeType":"StructuredDocumentation","src":"6619:202:15","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1562,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:15","nodeType":"FunctionDefinition","parameters":{"id":1428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1421,"mutability":"mutable","name":"proof","nameLocation":"6889:5:15","nodeType":"VariableDeclaration","scope":1562,"src":"6870:24:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1420,"nodeType":"ArrayTypeName","src":"6870:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1424,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:15","nodeType":"VariableDeclaration","scope":1562,"src":"6904:26:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1422,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1423,"nodeType":"ArrayTypeName","src":"6904:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1427,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:15","nodeType":"VariableDeclaration","scope":1562,"src":"6940:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1426,"nodeType":"ArrayTypeName","src":"6940:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:15"},"returnParameters":{"id":1431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1430,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:15","nodeType":"VariableDeclaration","scope":1562,"src":"6993:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1429,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:15"},"scope":1597,"src":"6826:2047:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1584,"nodeType":"Block","src":"8951:75:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1571,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"8968:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1572,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"8972:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1579,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"9014:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1580,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"9017:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1578,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"8999:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:15","trueExpression":{"arguments":[{"id":1575,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"8991:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1576,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"8994:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1574,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"8976:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1570,"id":1583,"nodeType":"Return","src":"8961:58:15"}]},"id":1585,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:15","nodeType":"FunctionDefinition","parameters":{"id":1567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1564,"mutability":"mutable","name":"a","nameLocation":"8906:1:15","nodeType":"VariableDeclaration","scope":1585,"src":"8898:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1566,"mutability":"mutable","name":"b","nameLocation":"8917:1:15","nodeType":"VariableDeclaration","scope":1585,"src":"8909:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1565,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:15"},"returnParameters":{"id":1570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1585,"src":"8942:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1568,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:15"},"scope":1597,"src":"8879:147:15","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1595,"nodeType":"Block","src":"9115:178:15","statements":[{"AST":{"nodeType":"YulBlock","src":"9177:110:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9198:4:15","type":"","value":"0x00"},{"name":"a","nodeType":"YulIdentifier","src":"9204:1:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9191:6:15"},"nodeType":"YulFunctionCall","src":"9191:15:15"},"nodeType":"YulExpressionStatement","src":"9191:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9226:4:15","type":"","value":"0x20"},{"name":"b","nodeType":"YulIdentifier","src":"9232:1:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9219:6:15"},"nodeType":"YulFunctionCall","src":"9219:15:15"},"nodeType":"YulExpressionStatement","src":"9219:15:15"},{"nodeType":"YulAssignment","src":"9247:30:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9266:4:15","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"9272:4:15","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9256:9:15"},"nodeType":"YulFunctionCall","src":"9256:21:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9247:5:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1587,"isOffset":false,"isSlot":false,"src":"9204:1:15","valueSize":1},{"declaration":1589,"isOffset":false,"isSlot":false,"src":"9232:1:15","valueSize":1},{"declaration":1592,"isOffset":false,"isSlot":false,"src":"9247:5:15","valueSize":1}],"id":1594,"nodeType":"InlineAssembly","src":"9168:119:15"}]},"id":1596,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:15","nodeType":"FunctionDefinition","parameters":{"id":1590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1587,"mutability":"mutable","name":"a","nameLocation":"9064:1:15","nodeType":"VariableDeclaration","scope":1596,"src":"9056:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1586,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1589,"mutability":"mutable","name":"b","nameLocation":"9075:1:15","nodeType":"VariableDeclaration","scope":1596,"src":"9067:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1588,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:15"},"returnParameters":{"id":1593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1592,"mutability":"mutable","name":"value","nameLocation":"9108:5:15","nodeType":"VariableDeclaration","scope":1596,"src":"9100:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1591,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:15"},"scope":1597,"src":"9032:261:15","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1598,"src":"802:8493:15","usedErrors":[]}],"src":"118:9178:15"},"id":15},"contracts/payment/REVVMotorsportShardClaim.sol":{"ast":{"absolutePath":"contracts/payment/REVVMotorsportShardClaim.sol","exportedSymbols":{"CumulativeMerkleClaim":[952],"IERC20Mintable":[1013],"REVVMotorsportShardClaim":[1646]},"id":1647,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1599,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"32:23:16"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol","id":1601,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1647,"sourceUnit":1014,"src":"57:111:16","symbolAliases":[{"foreign":{"id":1600,"name":"IERC20Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1013,"src":"65:14:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol","file":"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol","id":1603,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1647,"sourceUnit":953,"src":"169:110:16","symbolAliases":[{"foreign":{"id":1602,"name":"CumulativeMerkleClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"177:21:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1604,"name":"CumulativeMerkleClaim","nameLocations":["318:21:16"],"nodeType":"IdentifierPath","referencedDeclaration":952,"src":"318:21:16"},"id":1605,"nodeType":"InheritanceSpecifier","src":"318:21:16"}],"canonicalName":"REVVMotorsportShardClaim","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1646,"linearizedBaseContracts":[1646,952,482,32,338,350,82,105,563,1035],"name":"REVVMotorsportShardClaim","nameLocation":"290:24:16","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"996373c3","id":1608,"mutability":"immutable","name":"shard","nameLocation":"378:5:16","nodeType":"VariableDeclaration","scope":1646,"src":"346:37:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Mintable_$1013","typeString":"contract IERC20Mintable"},"typeName":{"id":1607,"nodeType":"UserDefinedTypeName","pathNode":{"id":1606,"name":"IERC20Mintable","nameLocations":["346:14:16"],"nodeType":"IdentifierPath","referencedDeclaration":1013,"src":"346:14:16"},"referencedDeclaration":1013,"src":"346:14:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Mintable_$1013","typeString":"contract IERC20Mintable"}},"visibility":"public"},{"body":{"id":1618,"nodeType":"Block","src":"425:31:16","statements":[{"expression":{"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1614,"name":"shard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"435:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Mintable_$1013","typeString":"contract IERC20Mintable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1615,"name":"shard_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"443:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Mintable_$1013","typeString":"contract IERC20Mintable"}},"src":"435:14:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Mintable_$1013","typeString":"contract IERC20Mintable"}},"id":1617,"nodeType":"ExpressionStatement","src":"435:14:16"}]},"id":1619,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1611,"mutability":"mutable","name":"shard_","nameLocation":"417:6:16","nodeType":"VariableDeclaration","scope":1619,"src":"402:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Mintable_$1013","typeString":"contract IERC20Mintable"},"typeName":{"id":1610,"nodeType":"UserDefinedTypeName","pathNode":{"id":1609,"name":"IERC20Mintable","nameLocations":["402:14:16"],"nodeType":"IdentifierPath","referencedDeclaration":1013,"src":"402:14:16"},"referencedDeclaration":1013,"src":"402:14:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Mintable_$1013","typeString":"contract IERC20Mintable"}},"visibility":"internal"}],"src":"401:23:16"},"returnParameters":{"id":1613,"nodeType":"ParameterList","parameters":[],"src":"425:0:16"},"scope":1646,"src":"390:66:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[951],"body":{"id":1644,"nodeType":"Block","src":"558:103:16","statements":[{"assignments":[1628],"declarations":[{"constant":false,"id":1628,"mutability":"mutable","name":"amount","nameLocation":"576:6:16","nodeType":"VariableDeclaration","scope":1644,"src":"568:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1627,"name":"uint256","nodeType":"ElementaryTypeName","src":"568:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1636,"initialValue":{"arguments":[{"id":1631,"name":"claimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"596:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":1633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"608:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1632,"name":"uint256","nodeType":"ElementaryTypeName","src":"608:7:16","typeDescriptions":{}}}],"id":1634,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"607:9:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":1629,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"585:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"589:6:16","memberName":"decode","nodeType":"MemberAccess","src":"585:10:16","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"585:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"568:49:16"},{"expression":{"arguments":[{"id":1640,"name":"claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"638:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1641,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"647:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1637,"name":"shard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"627:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Mintable_$1013","typeString":"contract IERC20Mintable"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"633:4:16","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":1002,"src":"627:10:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1643,"nodeType":"ExpressionStatement","src":"627:27:16"}]},"id":1645,"implemented":true,"kind":"function","modifiers":[],"name":"_distributePayout","nameLocation":"471:17:16","nodeType":"FunctionDefinition","overrides":{"id":1625,"nodeType":"OverrideSpecifier","overrides":[],"src":"549:8:16"},"parameters":{"id":1624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1621,"mutability":"mutable","name":"claimer","nameLocation":"497:7:16","nodeType":"VariableDeclaration","scope":1645,"src":"489:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1620,"name":"address","nodeType":"ElementaryTypeName","src":"489:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1623,"mutability":"mutable","name":"claimData","nameLocation":"521:9:16","nodeType":"VariableDeclaration","scope":1645,"src":"506:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1622,"name":"bytes","nodeType":"ElementaryTypeName","src":"506:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"488:43:16"},"returnParameters":{"id":1626,"nodeType":"ParameterList","parameters":[],"src":"558:0:16"},"scope":1646,"src":"462:199:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1647,"src":"281:382:16","usedErrors":[808,817]}],"src":"32:631:16"},"id":16}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e73b3ee2e80bd8c4218ab079861a4738450e393fe78b7c9ff8c6364df98f699864736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 EXTCODESIZE RETURNDATACOPY 0xE2 0xE8 SIGNEXTEND 0xD8 0xC4 0x21 DUP11 0xB0 PUSH26 0x861A4738450E393FE78B7C9FF8C6364DF98F699864736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"301:3582:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;301:3582:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e73b3ee2e80bd8c4218ab079861a4738450e393fe78b7c9ff8c6364df98f699864736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 EXTCODESIZE RETURNDATACOPY 0xE2 0xE8 SIGNEXTEND 0xD8 0xC4 0x21 DUP11 0xB0 PUSH26 0x861A4738450E393FE78B7C9FF8C6364DF98F699864736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"301:3582:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201c8f4c5b3c5829156a53ed424a50b54f214e80af1e8a44e74710ecfde820eddb64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR DUP16 0x4C JUMPDEST EXTCODECOPY PC 0x29 ISZERO PUSH11 0x53ED424A50B54F214E80AF 0x1E DUP11 PREVRANDAO 0xE7 SELFBALANCE LT 0xEC REVERT 0xE8 KECCAK256 0xED 0xDB PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"111:1678:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;111:1678:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201c8f4c5b3c5829156a53ed424a50b54f214e80af1e8a44e74710ecfde820eddb64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR DUP16 0x4C JUMPDEST EXTCODECOPY PC 0x29 ISZERO PUSH11 0x53ED424A50B54F214E80AF 0x1E DUP11 PREVRANDAO 0xE7 SELFBALANCE LT 0xEC REVERT 0xE8 KECCAK256 0xED 0xDB PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"111:1678:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol":{"Pause":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpaused","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits a {Paused} event if `isPaused` is true.","params":{"isPaused":"The initial pause state."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"pause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event."},"paused()":{"returns":{"_0":"isPaused The paused state of the contract."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"unpause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event."}},"title":"Pausing mechanism (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits a {Paused} event if `isPaused` is true.\",\"params\":{\"isPaused\":\"The initial pause state.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"pause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event.\"},\"paused()\":{\"returns\":{\"_0\":\"isPaused The paused state of the contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"unpause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event.\"}},\"title\":\"Pausing mechanism (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"Paused()\":{\"notice\":\"Emitted when the pause is triggered.\"},\"Unpaused()\":{\"notice\":\"Emitted when the pause is lifted.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial pause state.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"paused()\":{\"notice\":\"Gets the paused state of the contract.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol\":\"Pause\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {PauseStorage} from \\\"./libraries/PauseStorage.sol\\\";\\nimport {PauseBase} from \\\"./base/PauseBase.sol\\\";\\nimport {ContractOwnership} from \\\"../access/ContractOwnership.sol\\\";\\n\\n/// @title Pausing mechanism (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract Pause is PauseBase, ContractOwnership {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial pause state.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    constructor(bool isPaused) {\\n        PauseStorage.layout().constructorInit(isPaused);\\n    }\\n}\\n\",\"keccak256\":\"0x8fa8023486d561e0a2941485e1d02d9db3f899f143c7f8a6ab0643beeb3258de\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {PauseStorage} from \\\"./../libraries/PauseStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Pausing mechanism (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PauseBase is Context {\\n    using PauseStorage for PauseStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when the pause is triggered.\\n    event Paused();\\n\\n    /// @notice Emitted when the pause is lifted.\\n    event Unpaused();\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().unpause();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused() external view returns (bool) {\\n        return PauseStorage.layout().paused();\\n    }\\n}\\n\",\"keccak256\":\"0x771539326a06f752e7fe6bca3e1f36668749a158bef6e9107e8502d16abe9fd1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PauseStorage {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    struct Layout {\\n        bool isPaused;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.phase\\\")) - 1);\\n\\n    event Paused();\\n    event Unpaused();\\n\\n    /// @notice Initializes the storage with an initial pause state (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function constructorInit(Layout storage s, bool isPaused) internal {\\n        if (isPaused) {\\n            s.isPaused = true;\\n            emit Paused();\\n        }\\n    }\\n\\n    /// @notice Initializes the storage with an initial pause state (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function proxyInit(Layout storage s, bool isPaused) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(isPaused);\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause(Layout storage s) internal {\\n        s.enforceIsNotPaused();\\n        s.isPaused = true;\\n        emit Paused();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause(Layout storage s) internal {\\n        s.enforceIsPaused();\\n        s.isPaused = false;\\n        emit Unpaused();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused(Layout storage s) internal view returns (bool isPaused) {\\n        return s.isPaused;\\n    }\\n\\n    /// @notice Ensures that the contract is paused.\\n    /// @dev Reverts if the contract is not paused.\\n    function enforceIsPaused(Layout storage s) internal view {\\n        require(s.isPaused, \\\"Pause: not paused\\\");\\n    }\\n\\n    /// @notice Ensures that the contract is not paused.\\n    /// @dev Reverts if the contract is paused.\\n    function enforceIsNotPaused(Layout storage s) internal view {\\n        require(!s.isPaused, \\\"Pause: paused\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb10c9dfe4535fea92eb0975b33171b65bdb955d997771cb1abf7adb4d27d4756\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"Paused()":{"notice":"Emitted when the pause is triggered."},"Unpaused()":{"notice":"Emitted when the pause is lifted."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial pause state."},"owner()":{"notice":"Gets the address of the contract owner."},"pause()":{"notice":"Pauses the contract."},"paused()":{"notice":"Gets the paused state of the contract."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"unpause()":{"notice":"Unpauses the contract."}},"version":1}}},"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol":{"PauseBase":{"abi":[{"anonymous":false,"inputs":[],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpaused","type":"event"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","kind":"dev","methods":{"pause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event."},"paused()":{"returns":{"_0":"isPaused The paused state of the contract."}},"unpause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event."}},"title":"Pausing mechanism (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"pause()":"8456cb59","paused()":"5c975abb","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"kind\":\"dev\",\"methods\":{\"pause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event.\"},\"paused()\":{\"returns\":{\"_0\":\"isPaused The paused state of the contract.\"}},\"unpause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event.\"}},\"title\":\"Pausing mechanism (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"Paused()\":{\"notice\":\"Emitted when the pause is triggered.\"},\"Unpaused()\":{\"notice\":\"Emitted when the pause is lifted.\"}},\"kind\":\"user\",\"methods\":{\"pause()\":{\"notice\":\"Pauses the contract.\"},\"paused()\":{\"notice\":\"Gets the paused state of the contract.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\":\"PauseBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {PauseStorage} from \\\"./../libraries/PauseStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Pausing mechanism (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PauseBase is Context {\\n    using PauseStorage for PauseStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when the pause is triggered.\\n    event Paused();\\n\\n    /// @notice Emitted when the pause is lifted.\\n    event Unpaused();\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().unpause();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused() external view returns (bool) {\\n        return PauseStorage.layout().paused();\\n    }\\n}\\n\",\"keccak256\":\"0x771539326a06f752e7fe6bca3e1f36668749a158bef6e9107e8502d16abe9fd1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PauseStorage {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    struct Layout {\\n        bool isPaused;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.phase\\\")) - 1);\\n\\n    event Paused();\\n    event Unpaused();\\n\\n    /// @notice Initializes the storage with an initial pause state (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function constructorInit(Layout storage s, bool isPaused) internal {\\n        if (isPaused) {\\n            s.isPaused = true;\\n            emit Paused();\\n        }\\n    }\\n\\n    /// @notice Initializes the storage with an initial pause state (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function proxyInit(Layout storage s, bool isPaused) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(isPaused);\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause(Layout storage s) internal {\\n        s.enforceIsNotPaused();\\n        s.isPaused = true;\\n        emit Paused();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause(Layout storage s) internal {\\n        s.enforceIsPaused();\\n        s.isPaused = false;\\n        emit Unpaused();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused(Layout storage s) internal view returns (bool isPaused) {\\n        return s.isPaused;\\n    }\\n\\n    /// @notice Ensures that the contract is paused.\\n    /// @dev Reverts if the contract is not paused.\\n    function enforceIsPaused(Layout storage s) internal view {\\n        require(s.isPaused, \\\"Pause: not paused\\\");\\n    }\\n\\n    /// @notice Ensures that the contract is not paused.\\n    /// @dev Reverts if the contract is paused.\\n    function enforceIsNotPaused(Layout storage s) internal view {\\n        require(!s.isPaused, \\\"Pause: paused\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb10c9dfe4535fea92eb0975b33171b65bdb955d997771cb1abf7adb4d27d4756\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Paused()":{"notice":"Emitted when the pause is triggered."},"Unpaused()":{"notice":"Emitted when the pause is lifted."}},"kind":"user","methods":{"pause()":{"notice":"Pauses the contract."},"paused()":{"notice":"Gets the paused state of the contract."},"unpause()":{"notice":"Unpauses the contract."}},"version":1}}},"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol":{"PauseStorage":{"abi":[{"anonymous":false,"inputs":[],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpaused","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206c3976496bffbb335dd89f0f85c14c166f1717a96e3e18de09fecdb19f7f73bb64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0x3976496BFFBB335DD89F0F85C1 0x4C AND PUSH16 0x1717A96E3E18DE09FECDB19F7F73BB64 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"143:2892:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;143:2892:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206c3976496bffbb335dd89f0f85c14c166f1717a96e3e18de09fecdb19f7f73bb64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0x3976496BFFBB335DD89F0F85C1 0x4C AND PUSH16 0x1717A96E3E18DE09FECDB19F7F73BB64 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"143:2892:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct PauseStorage.Layout storage pointer,bool)":"infinite","enforceIsNotPaused(struct PauseStorage.Layout storage pointer)":"infinite","enforceIsPaused(struct PauseStorage.Layout storage pointer)":"infinite","layout()":"infinite","pause(struct PauseStorage.Layout storage pointer)":"infinite","paused(struct PauseStorage.Layout storage pointer)":"infinite","proxyInit(struct PauseStorage.Layout storage pointer,bool)":"infinite","unpause(struct PauseStorage.Layout storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":\"PauseStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PauseStorage {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    struct Layout {\\n        bool isPaused;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.phase\\\")) - 1);\\n\\n    event Paused();\\n    event Unpaused();\\n\\n    /// @notice Initializes the storage with an initial pause state (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function constructorInit(Layout storage s, bool isPaused) internal {\\n        if (isPaused) {\\n            s.isPaused = true;\\n            emit Paused();\\n        }\\n    }\\n\\n    /// @notice Initializes the storage with an initial pause state (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function proxyInit(Layout storage s, bool isPaused) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(isPaused);\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause(Layout storage s) internal {\\n        s.enforceIsNotPaused();\\n        s.isPaused = true;\\n        emit Paused();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause(Layout storage s) internal {\\n        s.enforceIsPaused();\\n        s.isPaused = false;\\n        emit Unpaused();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused(Layout storage s) internal view returns (bool isPaused) {\\n        return s.isPaused;\\n    }\\n\\n    /// @notice Ensures that the contract is paused.\\n    /// @dev Reverts if the contract is not paused.\\n    function enforceIsPaused(Layout storage s) internal view {\\n        require(s.isPaused, \\\"Pause: not paused\\\");\\n    }\\n\\n    /// @notice Ensures that the contract is not paused.\\n    /// @dev Reverts if the contract is paused.\\n    function enforceIsNotPaused(Layout storage s) internal view {\\n        require(!s.isPaused, \\\"Pause: paused\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb10c9dfe4535fea92eb0975b33171b65bdb955d997771cb1abf7adb4d27d4756\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol":{"CumulativeMerkleClaim":{"abi":[{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"claimData","type":"bytes"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"claimData","type":"bytes"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"InvalidProof","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"MerkleRootSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"bytes","name":"claimData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"claimData","type":"bytes"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"claimPayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"root","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"setMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AlreadyClaimed(address,bytes,uint256)":[{"params":{"claimData":"The encoded claim data for the claim.","nonce":"The nonce as when the claim was made.","recipient":"The recipient of the claim."}}],"InvalidProof(address,bytes,uint256)":[{"params":{"claimData":"The encoded claim data for the claim.","nonce":"The nonce as when the claim was made.","recipient":"The recipient of the claim."}}]},"events":{"MerkleRootSet(bytes32)":{"params":{"root":"The new merkle root."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"PayoutClaimed(bytes32,address,bytes,uint256)":{"params":{"claimData":"The encoded claim data for the claim.","nonce":"The nonce as when the claim was made.","recipient":"The recipient of the claim.","root":"The merkle root on which the claim was made."}}},"kind":"dev","methods":{"claimPayout(address,bytes,bytes32[])":{"details":"Reverts if the contract is paused.Reverts with {AlreadyClaimed} if this specific payout has already been claimed.Reverts with {InvalidProof} if the merkle proof cannot be verified.Emits a {PayoutClaimed} event.","params":{"claimData":"Encoded claim data for `recipient`","proof":"Merkle proof of the user based on the merkle root","recipient":"Address of the user to claim the payout"}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"pause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event."},"paused()":{"returns":{"_0":"isPaused The paused state of the contract."}},"setMerkleRoot(bytes32)":{"details":"Reverts if not called by the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event.Emits a {MerkleRootSet} event.","params":{"merkleRoot":"The merkle root to set."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"unpause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event."}},"title":"CumulativeMerkleClaim","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"claimPayout(address,bytes,bytes32[])":"edcdebcc","claimed(bytes32)":"cc3c0f06","nonce()":"affed0e0","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","root()":"ebf0c717","setMerkleRoot(bytes32)":"7cb64759","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyClaimed(address,bytes,uint256)\":[{\"params\":{\"claimData\":\"The encoded claim data for the claim.\",\"nonce\":\"The nonce as when the claim was made.\",\"recipient\":\"The recipient of the claim.\"}}],\"InvalidProof(address,bytes,uint256)\":[{\"params\":{\"claimData\":\"The encoded claim data for the claim.\",\"nonce\":\"The nonce as when the claim was made.\",\"recipient\":\"The recipient of the claim.\"}}]},\"events\":{\"MerkleRootSet(bytes32)\":{\"params\":{\"root\":\"The new merkle root.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"PayoutClaimed(bytes32,address,bytes,uint256)\":{\"params\":{\"claimData\":\"The encoded claim data for the claim.\",\"nonce\":\"The nonce as when the claim was made.\",\"recipient\":\"The recipient of the claim.\",\"root\":\"The merkle root on which the claim was made.\"}}},\"kind\":\"dev\",\"methods\":{\"claimPayout(address,bytes,bytes32[])\":{\"details\":\"Reverts if the contract is paused.Reverts with {AlreadyClaimed} if this specific payout has already been claimed.Reverts with {InvalidProof} if the merkle proof cannot be verified.Emits a {PayoutClaimed} event.\",\"params\":{\"claimData\":\"Encoded claim data for `recipient`\",\"proof\":\"Merkle proof of the user based on the merkle root\",\"recipient\":\"Address of the user to claim the payout\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"pause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event.\"},\"paused()\":{\"returns\":{\"_0\":\"isPaused The paused state of the contract.\"}},\"setMerkleRoot(bytes32)\":{\"details\":\"Reverts if not called by the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event.Emits a {MerkleRootSet} event.\",\"params\":{\"merkleRoot\":\"The merkle root to set.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"unpause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event.\"}},\"title\":\"CumulativeMerkleClaim\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(address,bytes,uint256)\":[{\"notice\":\"Thrown when trying to claim the same leaf more than once.\"}],\"InvalidProof(address,bytes,uint256)\":[{\"notice\":\"Thrown when a proof cannot be verified.\"}]},\"events\":{\"MerkleRootSet(bytes32)\":{\"notice\":\"Emitted when a new merkle root is set.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"Paused()\":{\"notice\":\"Emitted when the pause is triggered.\"},\"PayoutClaimed(bytes32,address,bytes,uint256)\":{\"notice\":\"Emitted when a payout is claimed.\"},\"Unpaused()\":{\"notice\":\"Emitted when the pause is lifted.\"}},\"kind\":\"user\",\"methods\":{\"claimPayout(address,bytes,bytes32[])\":{\"notice\":\"Executes the payout for a given user (anyone can call this function).\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"paused()\":{\"notice\":\"Gets the paused state of the contract.\"},\"setMerkleRoot(bytes32)\":{\"notice\":\"Sets the merkle root for a new claiming period and unpauses the contract.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"}},\"notice\":\"This contract is designed for claiming payouts which will cumulate over time.A merkle tree is generated with one leaf for each claim recipient together with the description of the claim (claimData).Flow: when new claims become available, the contract is paused to avoid further claims, a new tree is generated by summing up the currentunclaimed payouts and the new payouts, per user. The new tree is set and replaces the previous one and the contract is unpaused.A nonce is used for each new tree and is included in every leaf to prevent collisions with claims from previous trees.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol\":\"CumulativeMerkleClaim\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {PauseStorage} from \\\"./libraries/PauseStorage.sol\\\";\\nimport {PauseBase} from \\\"./base/PauseBase.sol\\\";\\nimport {ContractOwnership} from \\\"../access/ContractOwnership.sol\\\";\\n\\n/// @title Pausing mechanism (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract Pause is PauseBase, ContractOwnership {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial pause state.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    constructor(bool isPaused) {\\n        PauseStorage.layout().constructorInit(isPaused);\\n    }\\n}\\n\",\"keccak256\":\"0x8fa8023486d561e0a2941485e1d02d9db3f899f143c7f8a6ab0643beeb3258de\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {PauseStorage} from \\\"./../libraries/PauseStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Pausing mechanism (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PauseBase is Context {\\n    using PauseStorage for PauseStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when the pause is triggered.\\n    event Paused();\\n\\n    /// @notice Emitted when the pause is lifted.\\n    event Unpaused();\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().unpause();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused() external view returns (bool) {\\n        return PauseStorage.layout().paused();\\n    }\\n}\\n\",\"keccak256\":\"0x771539326a06f752e7fe6bca3e1f36668749a158bef6e9107e8502d16abe9fd1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PauseStorage {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    struct Layout {\\n        bool isPaused;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.phase\\\")) - 1);\\n\\n    event Paused();\\n    event Unpaused();\\n\\n    /// @notice Initializes the storage with an initial pause state (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function constructorInit(Layout storage s, bool isPaused) internal {\\n        if (isPaused) {\\n            s.isPaused = true;\\n            emit Paused();\\n        }\\n    }\\n\\n    /// @notice Initializes the storage with an initial pause state (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function proxyInit(Layout storage s, bool isPaused) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(isPaused);\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause(Layout storage s) internal {\\n        s.enforceIsNotPaused();\\n        s.isPaused = true;\\n        emit Paused();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause(Layout storage s) internal {\\n        s.enforceIsPaused();\\n        s.isPaused = false;\\n        emit Unpaused();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused(Layout storage s) internal view returns (bool isPaused) {\\n        return s.isPaused;\\n    }\\n\\n    /// @notice Ensures that the contract is paused.\\n    /// @dev Reverts if the contract is not paused.\\n    function enforceIsPaused(Layout storage s) internal view {\\n        require(s.isPaused, \\\"Pause: not paused\\\");\\n    }\\n\\n    /// @notice Ensures that the contract is not paused.\\n    /// @dev Reverts if the contract is paused.\\n    function enforceIsNotPaused(Layout storage s) internal view {\\n        require(!s.isPaused, \\\"Pause: paused\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb10c9dfe4535fea92eb0975b33171b65bdb955d997771cb1abf7adb4d27d4756\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {PauseStorage} from \\\"./../lifecycle/libraries/PauseStorage.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\nimport {Pause} from \\\"./../lifecycle/Pause.sol\\\";\\n\\n/// @title CumulativeMerkleClaim\\n/// @notice This contract is designed for claiming payouts which will cumulate over time.\\n/// @notice A merkle tree is generated with one leaf for each claim recipient together with the description of the claim (claimData).\\n/// @notice Flow: when new claims become available, the contract is paused to avoid further claims, a new tree is generated by summing up the current\\n/// @notice unclaimed payouts and the new payouts, per user. The new tree is set and replaces the previous one and the contract is unpaused.\\n/// @notice A nonce is used for each new tree and is included in every leaf to prevent collisions with claims from previous trees.\\nabstract contract CumulativeMerkleClaim is Pause {\\n    using MerkleProof for bytes32[];\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    bytes32 public root;\\n    uint256 public nonce;\\n\\n    mapping(bytes32 => bool) public claimed;\\n\\n    /// @notice Emitted when a new merkle root is set.\\n    /// @param root The new merkle root.\\n    event MerkleRootSet(bytes32 root);\\n\\n    /// @notice Emitted when a payout is claimed.\\n    /// @param root The merkle root on which the claim was made.\\n    /// @param recipient The recipient of the claim.\\n    /// @param claimData The encoded claim data for the claim.\\n    /// @param nonce The nonce as when the claim was made.\\n    event PayoutClaimed(bytes32 indexed root, address indexed recipient, bytes claimData, uint256 nonce);\\n\\n    /// @notice Thrown when trying to claim the same leaf more than once.\\n    /// @param recipient The recipient of the claim.\\n    /// @param claimData The encoded claim data for the claim.\\n    /// @param nonce The nonce as when the claim was made.\\n    error AlreadyClaimed(address recipient, bytes claimData, uint256 nonce);\\n\\n    /// @notice Thrown when a proof cannot be verified.\\n    /// @param recipient The recipient of the claim.\\n    /// @param claimData The encoded claim data for the claim.\\n    /// @param nonce The nonce as when the claim was made.\\n    error InvalidProof(address recipient, bytes claimData, uint256 nonce);\\n\\n    constructor() Pause(true) ContractOwnership(msg.sender) {}\\n\\n    /// @notice Sets the merkle root for a new claiming period and unpauses the contract.\\n    /// @dev Reverts if not called by the contract owner.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    /// @dev Emits a {MerkleRootSet} event.\\n    /// @param merkleRoot The merkle root to set.\\n    function setMerkleRoot(bytes32 merkleRoot) public {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().unpause();\\n        root = merkleRoot;\\n        ++nonce;\\n        emit MerkleRootSet(merkleRoot);\\n    }\\n\\n    /// @notice Executes the payout for a given user (anyone can call this function).\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Reverts with {AlreadyClaimed} if this specific payout has already been claimed.\\n    /// @dev Reverts with {InvalidProof} if the merkle proof cannot be verified.\\n    /// @dev Emits a {PayoutClaimed} event.\\n    /// @param recipient Address of the user to claim the payout\\n    /// @param claimData Encoded claim data for `recipient`\\n    /// @param proof Merkle proof of the user based on the merkle root\\n    function claimPayout(address recipient, bytes calldata claimData, bytes32[] calldata proof) external {\\n        PauseStorage.layout().enforceIsNotPaused();\\n\\n        uint256 currentNonce = nonce;\\n        bytes32 currentRoot = root;\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, claimData, currentNonce));\\n\\n        if (claimed[leaf]) {\\n            revert AlreadyClaimed(recipient, claimData, currentNonce);\\n        }\\n\\n        if (!proof.verifyCalldata(currentRoot, leaf)) {\\n            revert InvalidProof(recipient, claimData, currentNonce);\\n        }\\n\\n        claimed[leaf] = true;\\n\\n        emit PayoutClaimed(currentRoot, recipient, claimData, currentNonce);\\n\\n        _distributePayout(recipient, claimData);\\n    }\\n\\n    /// @notice Distributes the payout to the recipient.\\n    /// @dev This virtual function must be implemented by inheriting contracts.\\n    /// @param recipient Address of the user to claim the payout\\n    /// @param claimData Encoded claim data for `recipient`. The encoding is specific to the inheriting contract, for example a quantity of tokens.\\n    function _distributePayout(address recipient, bytes calldata claimData) internal virtual;\\n}\\n\",\"keccak256\":\"0x1361aea9edc2186ef05761ec228892ce4f8ec2e9c6d47f4dc5d2cae29d7175f2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":777,"contract":"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol:CumulativeMerkleClaim","label":"root","offset":0,"slot":"0","type":"t_bytes32"},{"astId":779,"contract":"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol:CumulativeMerkleClaim","label":"nonce","offset":0,"slot":"1","type":"t_uint256"},{"astId":783,"contract":"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol:CumulativeMerkleClaim","label":"claimed","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(address,bytes,uint256)":[{"notice":"Thrown when trying to claim the same leaf more than once."}],"InvalidProof(address,bytes,uint256)":[{"notice":"Thrown when a proof cannot be verified."}]},"events":{"MerkleRootSet(bytes32)":{"notice":"Emitted when a new merkle root is set."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"Paused()":{"notice":"Emitted when the pause is triggered."},"PayoutClaimed(bytes32,address,bytes,uint256)":{"notice":"Emitted when a payout is claimed."},"Unpaused()":{"notice":"Emitted when the pause is lifted."}},"kind":"user","methods":{"claimPayout(address,bytes,bytes32[])":{"notice":"Executes the payout for a given user (anyone can call this function)."},"owner()":{"notice":"Gets the address of the contract owner."},"pause()":{"notice":"Pauses the contract."},"paused()":{"notice":"Gets the paused state of the contract."},"setMerkleRoot(bytes32)":{"notice":"Sets the merkle root for a new claiming period and unpauses the contract."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"unpause()":{"notice":"Unpauses the contract."}},"notice":"This contract is designed for claiming payouts which will cumulate over time.A merkle tree is generated with one leaf for each claim recipient together with the description of the claim (claimData).Flow: when new claims become available, the contract is paused to avoid further claims, a new tree is generated by summing up the currentunclaimed payouts and the new payouts, per user. The new tree is set and replaces the previous one and the contract is unpaused.A nonce is used for each new tree and is included in every leaf to prevent collisions with claims from previous trees.","version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207c0ff71ae3367767dea217c7ad058a7959a20e6931ee35071c56cb12dcf3b20e64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0xFF71AE3367767DEA217C7AD058A7959A20E6931EE35071C56CB12DCF3 0xB2 0xE PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"225:593:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;225:593:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207c0ff71ae3367767dea217c7ad058a7959a20e6931ee35071c56cb12dcf3b20e64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0xFF71AE3367767DEA217C7AD058A7959A20E6931EE35071C56CB12DCF3 0xB2 0xE PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"225:593:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol":{"IERC20Mintable":{"abi":[{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x28963e1e.","kind":"dev","methods":{"batchMint(address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the total supply overflows.Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.","params":{"recipients":"The list of accounts to mint the tokens to.","values":"The list of amounts of tokens to mint to each of `recipients`."}},"mint(address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if the total supply overflows.Emits an {IERC20-Transfer} event with `from` set to the zero address.","params":{"to":"The account to mint the tokens to.","value":"The amount of tokens to mint."}}},"title":"ERC20 Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchMint(address[],uint256[])":"68573107","mint(address,uint256)":"40c10f19"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x28963e1e.\",\"kind\":\"dev\",\"methods\":{\"batchMint(address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the total supply overflows.Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\",\"params\":{\"recipients\":\"The list of accounts to mint the tokens to.\",\"values\":\"The list of amounts of tokens to mint to each of `recipients`.\"}},\"mint(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the total supply overflows.Emits an {IERC20-Transfer} event with `from` set to the zero address.\",\"params\":{\"to\":\"The account to mint the tokens to.\",\"value\":\"The amount of tokens to mint.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchMint(address[],uint256[])\":{\"notice\":\"Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\"},\"mint(address,uint256)\":{\"notice\":\"Mints an amount of tokens to a recipient, increasing the total supply.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":\"IERC20Mintable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchMint(address[],uint256[])":{"notice":"Mints multiple amounts of tokens to multiple recipients, increasing the total supply."},"mint(address,uint256)":{"notice":"Mints an amount of tokens to a recipient, increasing the total supply."}},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122025b26ee8466bb860fc2e78680a76994d3d0d86639aebeac59cfd043de2e90e1264736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 0xB2 PUSH15 0xE8466BB860FC2E78680A76994D3D0D DUP7 PUSH4 0x9AEBEAC5 SWAP13 REVERT DIV RETURNDATASIZE 0xE2 0xE9 0xE SLT PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1279:1391:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1391:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122025b26ee8466bb860fc2e78680a76994d3d0d86639aebeac59cfd043de2e90e1264736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 0xB2 PUSH15 0xE8466BB860FC2E78680A76994D3D0D DUP7 PUSH4 0x9AEBEAC5 SWAP13 REVERT DIV RETURNDATASIZE 0xE2 0xE9 0xE SLT PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1279:1391:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201f8844b065c3a95333dbf2d89e2d9325049f53eef73b7a5543759265fef995db64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F DUP9 PREVRANDAO 0xB0 PUSH6 0xC3A95333DBF2 0xD8 SWAP15 0x2D SWAP4 0x25 DIV SWAP16 MSTORE8 0xEE 0xF7 EXTCODESIZE PUSH27 0x5543759265FEF995DB64736F6C6343000813003300000000000000 ","sourceMap":"802:8493:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8493:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201f8844b065c3a95333dbf2d89e2d9325049f53eef73b7a5543759265fef995db64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F DUP9 PREVRANDAO 0xB0 PUSH6 0xC3A95333DBF2 0xD8 SWAP15 0x2D SWAP4 0x25 DIV SWAP16 MSTORE8 0xEE 0xF7 EXTCODESIZE PUSH27 0x5543759265FEF995DB64736F6C6343000813003300000000000000 ","sourceMap":"802:8493:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/payment/REVVMotorsportShardClaim.sol":{"REVVMotorsportShardClaim":{"abi":[{"inputs":[{"internalType":"contract IERC20Mintable","name":"shard_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"claimData","type":"bytes"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"claimData","type":"bytes"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"InvalidProof","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"MerkleRootSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"bytes","name":"claimData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"claimData","type":"bytes"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"claimPayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"root","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"setMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"shard","outputs":[{"internalType":"contract IERC20Mintable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AlreadyClaimed(address,bytes,uint256)":[{"params":{"claimData":"The encoded claim data for the claim.","nonce":"The nonce as when the claim was made.","recipient":"The recipient of the claim."}}],"InvalidProof(address,bytes,uint256)":[{"params":{"claimData":"The encoded claim data for the claim.","nonce":"The nonce as when the claim was made.","recipient":"The recipient of the claim."}}]},"events":{"MerkleRootSet(bytes32)":{"params":{"root":"The new merkle root."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"PayoutClaimed(bytes32,address,bytes,uint256)":{"params":{"claimData":"The encoded claim data for the claim.","nonce":"The nonce as when the claim was made.","recipient":"The recipient of the claim.","root":"The merkle root on which the claim was made."}}},"kind":"dev","methods":{"claimPayout(address,bytes,bytes32[])":{"details":"Reverts if the contract is paused.Reverts with {AlreadyClaimed} if this specific payout has already been claimed.Reverts with {InvalidProof} if the merkle proof cannot be verified.Emits a {PayoutClaimed} event.","params":{"claimData":"Encoded claim data for `recipient`","proof":"Merkle proof of the user based on the merkle root","recipient":"Address of the user to claim the payout"}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"pause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event."},"paused()":{"returns":{"_0":"isPaused The paused state of the contract."}},"setMerkleRoot(bytes32)":{"details":"Reverts if not called by the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event.Emits a {MerkleRootSet} event.","params":{"merkleRoot":"The merkle root to set."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"unpause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1619":{"entryPoint":null,"id":1619,"parameterSlots":1,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_481":{"entryPoint":null,"id":481,"parameterSlots":1,"returnSlots":0},"@_828":{"entryPoint":null,"id":828,"parameterSlots":0,"returnSlots":0},"@constructorInit_200":{"entryPoint":173,"id":200,"parameterSlots":2,"returnSlots":0},"@constructorInit_626":{"entryPoint":344,"id":626,"parameterSlots":2,"returnSlots":0},"@layout_306":{"entryPoint":119,"id":306,"parameterSlots":0,"returnSlots":1},"@layout_448":{"entryPoint":407,"id":448,"parameterSlots":0,"returnSlots":1},"@layout_747":{"entryPoint":296,"id":747,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_402":{"entryPoint":455,"id":402,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IERC20Mintable_$1013_fromMemory":{"entryPoint":599,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":649,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:919:17","statements":[{"nodeType":"YulBlock","src":"6:3:17","statements":[]},{"body":{"nodeType":"YulBlock","src":"118:209:17","statements":[{"body":{"nodeType":"YulBlock","src":"164:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"173:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"176:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"166:6:17"},"nodeType":"YulFunctionCall","src":"166:12:17"},"nodeType":"YulExpressionStatement","src":"166:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"139:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"148:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"135:3:17"},"nodeType":"YulFunctionCall","src":"135:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"160:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"131:3:17"},"nodeType":"YulFunctionCall","src":"131:32:17"},"nodeType":"YulIf","src":"128:52:17"},{"nodeType":"YulVariableDeclaration","src":"189:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"208:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"202:5:17"},"nodeType":"YulFunctionCall","src":"202:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"193:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"281:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"290:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"293:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"283:6:17"},"nodeType":"YulFunctionCall","src":"283:12:17"},"nodeType":"YulExpressionStatement","src":"283:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"240:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"251:5:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"266:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"262:3:17"},"nodeType":"YulFunctionCall","src":"262:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"275:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"258:3:17"},"nodeType":"YulFunctionCall","src":"258:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"247:3:17"},"nodeType":"YulFunctionCall","src":"247:31:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"237:2:17"},"nodeType":"YulFunctionCall","src":"237:42:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"230:6:17"},"nodeType":"YulFunctionCall","src":"230:50:17"},"nodeType":"YulIf","src":"227:70:17"},{"nodeType":"YulAssignment","src":"306:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"316:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"306:6:17"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20Mintable_$1013_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"95:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"107:6:17","type":""}],"src":"14:313:17"},{"body":{"nodeType":"YulBlock","src":"381:176:17","statements":[{"nodeType":"YulAssignment","src":"391:17:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"403:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"406:1:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"399:3:17"},"nodeType":"YulFunctionCall","src":"399:9:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"391:4:17"}]},{"body":{"nodeType":"YulBlock","src":"440:111:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"461:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"468:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"473:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"464:3:17"},"nodeType":"YulFunctionCall","src":"464:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"454:6:17"},"nodeType":"YulFunctionCall","src":"454:31:17"},"nodeType":"YulExpressionStatement","src":"454:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"505:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"508:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"498:6:17"},"nodeType":"YulFunctionCall","src":"498:15:17"},"nodeType":"YulExpressionStatement","src":"498:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"533:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"536:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"526:6:17"},"nodeType":"YulFunctionCall","src":"526:15:17"},"nodeType":"YulExpressionStatement","src":"526:15:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"423:4:17"},{"name":"x","nodeType":"YulIdentifier","src":"429:1:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"420:2:17"},"nodeType":"YulFunctionCall","src":"420:11:17"},"nodeType":"YulIf","src":"417:134:17"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"363:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"366:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"372:4:17","type":""}],"src":"332:225:17"},{"body":{"nodeType":"YulBlock","src":"736:181:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"753:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"764:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"746:6:17"},"nodeType":"YulFunctionCall","src":"746:21:17"},"nodeType":"YulExpressionStatement","src":"746:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"787:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"783:3:17"},"nodeType":"YulFunctionCall","src":"783:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"803:2:17","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"776:6:17"},"nodeType":"YulFunctionCall","src":"776:30:17"},"nodeType":"YulExpressionStatement","src":"776:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"826:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"837:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"822:3:17"},"nodeType":"YulFunctionCall","src":"822:18:17"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"842:33:17","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"815:6:17"},"nodeType":"YulFunctionCall","src":"815:61:17"},"nodeType":"YulExpressionStatement","src":"815:61:17"},{"nodeType":"YulAssignment","src":"885:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"897:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"908:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"893:3:17"},"nodeType":"YulFunctionCall","src":"893:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"885:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"713:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"727:4:17","type":""}],"src":"562:355:17"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_IERC20Mintable_$1013_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n}","id":17,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b50604051620010b7380380620010b7833981016040819052620000349162000257565b6001336200004d816200004662000077565b90620000ad565b5062000064816200005d62000128565b9062000158565b506001600160a01b0316608052620002ab565b600080620000a760017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000289565b92915050565b6001600160a01b03811615620001045781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001246307f5828d60e41b60016200011c62000197565b9190620001c7565b5050565b600080620000a760017f0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f62000289565b80156200012457815460ff191660011782556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a15050565b600080620000a760017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000289565b600160e01b6001600160e01b0319831601620002295760405162461bcd60e51b815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c756500604482015260640160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6000602082840312156200026a57600080fd5b81516001600160a01b03811681146200028257600080fd5b9392505050565b81810381811115620000a757634e487b7160e01b600052601160045260246000fd5b608051610de9620002ce6000396000818161016001526108310152610de96000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063996373c311610081578063ebf0c7171161005b578063ebf0c717146101bc578063edcdebcc146101c5578063f2fde38b146101d857600080fd5b8063996373c31461015b578063affed0e014610182578063cc3c0f061461019957600080fd5b80637cb64759116100b25780637cb64759146101135780638456cb59146101265780638da5cb5b1461012e57600080fd5b806301ffc9a7146100d95780633f4ba83a146101015780635c975abb1461010b575b600080fd5b6100ec6100e7366004610aa1565b6101eb565b60405190151581526020015b60405180910390f35b610109610205565b005b6100ec61022a565b610109610121366004610ae3565b610243565b6101096102a7565b6101366102c0565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f8565b6101367f000000000000000000000000000000000000000000000000000000000000000081565b61018b60015481565b6040519081526020016100f8565b6100ec6101a7366004610ae3565b60026020526000908152604090205460ff1681565b61018b60005481565b6101096101d3366004610b25565b6102e7565b6101096101e6366004610c01565b610495565b60006101ff826101f96104ac565b906104da565b92915050565b610218335b6102126105b4565b906105e2565b610228610223610669565b610697565b565b600061023e610237610669565b5460ff1690565b905090565b61024c3361020a565b610257610223610669565b8060008190555060016000815461026d90610c4b565b909155506040518181527f42cbc405e4dbf1b691e85b9a34b08ecfcf7a9ad9078bf4d645ccfa1fac11c10b9060200160405180910390a150565b6102b03361020a565b6102286102bb610669565b6106f2565b600061023e6102cd6105b4565b5473ffffffffffffffffffffffffffffffffffffffff1690565b6102f76102f2610669565b610750565b60015460008054604051909190610318908990899089908790602001610c83565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600290935291205490915060ff16156103a957878787856040517f7fbf25470000000000000000000000000000000000000000000000000000000081526004016103a09493929190610d0c565b60405180910390fd5b6103b5858584846107bc565b6103f357878787856040517f91ebfb310000000000000000000000000000000000000000000000000000000081526004016103a09493929190610d0c565b6000818152600260205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555173ffffffffffffffffffffffffffffffffffffffff89169083907f6a4408e44c908d501056e1ef88baf30a72467f3a181544a67a30cb14c8e8059890610478908b908b908990610d4d565b60405180910390a361048b8888886107d4565b5050505050505050565b6104a933826104a26105b4565b919061088b565b50565b6000806101ff60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610d71565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161052a575060006101ff565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161057b575060016101ff565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000806101ff60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610d71565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e6572000000000000000060448201526064016103a0565b5050565b6000806101ff60017f0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f610d71565b6106a0816109b8565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681556040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693390600090a150565b6106fb81610750565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011781556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a150565b805460ff16156104a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50617573653a207061757365640000000000000000000000000000000000000060448201526064016103a0565b6000826107ca868685610a23565b1495945050505050565b60006107e282840184610ae3565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018390529192507f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b15801561087757600080fd5b505af115801561048b573d6000803e3d6000fd5b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e6572000000000000000060448201526064016103a0565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109b25783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b805460ff166104a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f50617573653a206e6f742070617573656400000000000000000000000000000060448201526064016103a0565b600081815b84811015610a6657610a5282878784818110610a4657610a46610d84565b90506020020135610a6f565b915080610a5e81610c4b565b915050610a28565b50949350505050565b6000818310610a8b576000828152602084905260409020610a9a565b60008381526020839052604090205b9392505050565b600060208284031215610ab357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a9a57600080fd5b600060208284031215610af557600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b2057600080fd5b919050565b600080600080600060608688031215610b3d57600080fd5b610b4686610afc565b9450602086013567ffffffffffffffff80821115610b6357600080fd5b818801915088601f830112610b7757600080fd5b813581811115610b8657600080fd5b896020828501011115610b9857600080fd5b602083019650809550506040880135915080821115610bb657600080fd5b818801915088601f830112610bca57600080fd5b813581811115610bd957600080fd5b8960208260051b8501011115610bee57600080fd5b9699959850939650602001949392505050565b600060208284031215610c1357600080fd5b610a9a82610afc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c7c57610c7c610c1c565b5060010190565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b16815282846014830137601492019182015260340192915050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff85168152606060208201526000610d3c606083018587610cc3565b905082604083015295945050505050565b604081526000610d61604083018587610cc3565b9050826020830152949350505050565b818103818111156101ff576101ff610c1c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220d0d93996c24da7a18561e607c4a327b710b2273e0f28b8447edc88ad2131593c64736f6c63430008130033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x10B7 CODESIZE SUB DUP1 PUSH3 0x10B7 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x257 JUMP JUMPDEST PUSH1 0x1 CALLER PUSH3 0x4D DUP2 PUSH3 0x46 PUSH3 0x77 JUMP JUMPDEST SWAP1 PUSH3 0xAD JUMP JUMPDEST POP PUSH3 0x64 DUP2 PUSH3 0x5D PUSH3 0x128 JUMP JUMPDEST SWAP1 PUSH3 0x158 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH3 0x2AB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xA7 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x289 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x104 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x124 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x11C PUSH3 0x197 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x1C7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xA7 PUSH1 0x1 PUSH32 0x186A05F63B1553398AD5EA3233C0CE68B8C9EECC47717F123C5C2B42FBD6D9F PUSH3 0x289 JUMP JUMPDEST DUP1 ISZERO PUSH3 0x124 JUMPI DUP2 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP3 SSTORE PUSH1 0x40 MLOAD PUSH32 0x9E87FAC88FF661F02D44F95383C817FECE4BCE600A3DAB7A54406878B965E752 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xA7 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x289 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x229 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x26A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xA7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH2 0xDE9 PUSH3 0x2CE PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x160 ADD MSTORE PUSH2 0x831 ADD MSTORE PUSH2 0xDE9 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x996373C3 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xEBF0C717 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xEBF0C717 EQ PUSH2 0x1BC JUMPI DUP1 PUSH4 0xEDCDEBCC EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x996373C3 EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7CB64759 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x10B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEC PUSH2 0xE7 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA1 JUMP JUMPDEST PUSH2 0x1EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x109 PUSH2 0x205 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEC PUSH2 0x22A JUMP JUMPDEST PUSH2 0x109 PUSH2 0x121 CALLDATASIZE PUSH1 0x4 PUSH2 0xAE3 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST PUSH2 0x109 PUSH2 0x2A7 JUMP JUMPDEST PUSH2 0x136 PUSH2 0x2C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0x136 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x18B PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xEC PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0xAE3 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x18B PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x109 PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0xB25 JUMP JUMPDEST PUSH2 0x2E7 JUMP JUMPDEST PUSH2 0x109 PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x495 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FF DUP3 PUSH2 0x1F9 PUSH2 0x4AC JUMP JUMPDEST SWAP1 PUSH2 0x4DA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x218 CALLER JUMPDEST PUSH2 0x212 PUSH2 0x5B4 JUMP JUMPDEST SWAP1 PUSH2 0x5E2 JUMP JUMPDEST PUSH2 0x228 PUSH2 0x223 PUSH2 0x669 JUMP JUMPDEST PUSH2 0x697 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E PUSH2 0x237 PUSH2 0x669 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x24C CALLER PUSH2 0x20A JUMP JUMPDEST PUSH2 0x257 PUSH2 0x223 PUSH2 0x669 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x26D SWAP1 PUSH2 0xC4B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x42CBC405E4DBF1B691E85B9A34B08ECFCF7A9AD9078BF4D645CCFA1FAC11C10B SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x2B0 CALLER PUSH2 0x20A JUMP JUMPDEST PUSH2 0x228 PUSH2 0x2BB PUSH2 0x669 JUMP JUMPDEST PUSH2 0x6F2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E PUSH2 0x2CD PUSH2 0x5B4 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2F7 PUSH2 0x2F2 PUSH2 0x669 JUMP JUMPDEST PUSH2 0x750 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x318 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP8 SWAP1 PUSH1 0x20 ADD PUSH2 0xC83 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x3A9 JUMPI DUP8 DUP8 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH32 0x7FBF254700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A0 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3B5 DUP6 DUP6 DUP5 DUP5 PUSH2 0x7BC JUMP JUMPDEST PUSH2 0x3F3 JUMPI DUP8 DUP8 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH32 0x91EBFB3100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A0 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD0C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP1 DUP4 SWAP1 PUSH32 0x6A4408E44C908D501056E1EF88BAF30A72467F3A181544A67A30CB14C8E80598 SWAP1 PUSH2 0x478 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP10 SWAP1 PUSH2 0xD4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x48B DUP9 DUP9 DUP9 PUSH2 0x7D4 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4A9 CALLER DUP3 PUSH2 0x4A2 PUSH2 0x5B4 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x88B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FF PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xD71 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x52A JUMPI POP PUSH1 0x0 PUSH2 0x1FF JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x57B JUMPI POP PUSH1 0x1 PUSH2 0x1FF JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FF PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xD71 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x665 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FF PUSH1 0x1 PUSH32 0x186A05F63B1553398AD5EA3233C0CE68B8C9EECC47717F123C5C2B42FBD6D9F PUSH2 0xD71 JUMP JUMPDEST PUSH2 0x6A0 DUP2 PUSH2 0x9B8 JUMP JUMPDEST DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xA45F47FDEA8A1EFDD9029A5691C7F759C32B7C698632B563573E155625D16933 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x6FB DUP2 PUSH2 0x750 JUMP JUMPDEST DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x9E87FAC88FF661F02D44F95383C817FECE4BCE600A3DAB7A54406878B965E752 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50617573653A2070617573656400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7CA DUP7 DUP7 DUP6 PUSH2 0xA23 JUMP JUMPDEST EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E2 DUP3 DUP5 ADD DUP5 PUSH2 0xAE3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x877 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x48B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x910 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A0 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9B2 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x4A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50617573653A206E6F7420706175736564000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA66 JUMPI PUSH2 0xA52 DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xA46 JUMPI PUSH2 0xA46 PUSH2 0xD84 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0xA6F JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xA5E DUP2 PUSH2 0xC4B JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA28 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xA8B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA9A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xA9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xB3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB46 DUP7 PUSH2 0xAFC JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xB86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xB98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP7 POP DUP1 SWAP6 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xBB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xBD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xBEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA9A DUP3 PUSH2 0xAFC JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xC7C JUMPI PUSH2 0xC7C PUSH2 0xC1C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP6 PUSH1 0x60 SHL AND DUP2 MSTORE DUP3 DUP5 PUSH1 0x14 DUP4 ADD CALLDATACOPY PUSH1 0x14 SWAP3 ADD SWAP2 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP5 ADD ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xD3C PUSH1 0x60 DUP4 ADD DUP6 DUP8 PUSH2 0xCC3 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0xD61 PUSH1 0x40 DUP4 ADD DUP6 DUP8 PUSH2 0xCC3 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1FF JUMPI PUSH2 0x1FF PUSH2 0xC1C JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD0 0xD9 CODECOPY SWAP7 0xC2 0x4D 0xA7 LOG1 DUP6 PUSH2 0xE607 0xC4 LOG3 0x27 0xB7 LT 0xB2 0x27 RETURNDATACOPY 0xF 0x28 0xB8 PREVRANDAO PUSH31 0xDC88AD2131593C64736F6C6343000813003300000000000000000000000000 ","sourceMap":"281:382:16:-:0;;;390:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2605:4:10;2629:10;1007:63:0;2629:10:10;1007:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;706:47:7;744:8;706:21;:19;:21::i;:::-;:37;;:47::i;:::-;-1:-1:-1;;;;;;435:14:16;;;281:382;;3707:174:3;3748:16;;601:71;671:1;609:58;601:71;:::i;:::-;593:80;3707:174;-1:-1:-1;;3707:174:3:o;1332:341::-;-1:-1:-1;;;;;1420:26:3;;;1416:152;;1462:30;;-1:-1:-1;;;;;;1462:30:3;-1:-1:-1;;;;;1462:30:3;;;;;;;1511:46;;-1:-1:-1;;1511:46:3;;-1:-1:-1;;1511:46:3;1416:152;1577:89;-1:-1:-1;;;1661:4:3;1577:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1332:341;;:::o;2859:174:9:-;2900:16;;325:62;386:1;333:49;325:62;:::i;874:166::-;955:8;951:83;;;979:17;;-1:-1:-1;;979:17:9;992:4;979:17;;;1015:8;;;;979:10;;1015:8;874:166;;:::o;1613:174:6:-;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;-1:-1:-1;;;;;;;;;782:35:6;;;774:79;;;;-1:-1:-1;;;774:79:6;;764:2:17;774:79:6;;;746:21:17;803:2;783:18;;;776:30;842:33;822:18;;;815:61;893:18;;774:79:6;;;;;;;;-1:-1:-1;;;;;;863:34:6;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;863:46:6;;;;;;;;;;670:246::o;14:313:17:-;107:6;160:2;148:9;139:7;135:23;131:32;128:52;;;176:1;173;166:12;128:52;202:16;;-1:-1:-1;;;;;247:31:17;;237:42;;227:70;;293:1;290;283:12;227:70;316:5;14:313;-1:-1:-1;;;14:313:17:o;332:225::-;399:9;;;420:11;;;417:134;;;473:10;468:3;464:20;461:1;454:31;508:4;505:1;498:15;536:4;533:1;526:15;562:355;281:382:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_distributePayout_1645":{"entryPoint":2004,"id":1645,"parameterSlots":3,"returnSlots":0},"@_efficientHash_1596":{"entryPoint":null,"id":1596,"parameterSlots":2,"returnSlots":1},"@_hashPair_1585":{"entryPoint":2671,"id":1585,"parameterSlots":2,"returnSlots":1},"@_msgSender_1025":{"entryPoint":null,"id":1025,"parameterSlots":0,"returnSlots":1},"@claimPayout_943":{"entryPoint":743,"id":943,"parameterSlots":5,"returnSlots":0},"@claimed_783":{"entryPoint":null,"id":783,"parameterSlots":0,"returnSlots":0},"@enforceIsContractOwner_294":{"entryPoint":1506,"id":294,"parameterSlots":2,"returnSlots":0},"@enforceIsNotPaused_735":{"entryPoint":1872,"id":735,"parameterSlots":1,"returnSlots":0},"@enforceIsPaused_720":{"entryPoint":2488,"id":720,"parameterSlots":1,"returnSlots":0},"@layout_306":{"entryPoint":1460,"id":306,"parameterSlots":0,"returnSlots":1},"@layout_448":{"entryPoint":1196,"id":448,"parameterSlots":0,"returnSlots":1},"@layout_747":{"entryPoint":1641,"id":747,"parameterSlots":0,"returnSlots":1},"@nonce_779":{"entryPoint":null,"id":779,"parameterSlots":0,"returnSlots":0},"@owner_276":{"entryPoint":null,"id":276,"parameterSlots":1,"returnSlots":1},"@owner_63":{"entryPoint":704,"id":63,"parameterSlots":0,"returnSlots":1},"@pause_528":{"entryPoint":679,"id":528,"parameterSlots":0,"returnSlots":0},"@pause_671":{"entryPoint":1778,"id":671,"parameterSlots":1,"returnSlots":0},"@paused_562":{"entryPoint":554,"id":562,"parameterSlots":0,"returnSlots":1},"@paused_706":{"entryPoint":null,"id":706,"parameterSlots":1,"returnSlots":1},"@processProofCalldata_1220":{"entryPoint":2595,"id":1220,"parameterSlots":3,"returnSlots":1},"@root_777":{"entryPoint":null,"id":777,"parameterSlots":0,"returnSlots":0},"@setMerkleRoot_862":{"entryPoint":579,"id":862,"parameterSlots":1,"returnSlots":0},"@shard_1608":{"entryPoint":null,"id":1608,"parameterSlots":0,"returnSlots":0},"@supportsInterface_337":{"entryPoint":491,"id":337,"parameterSlots":1,"returnSlots":1},"@supportsInterface_436":{"entryPoint":1242,"id":436,"parameterSlots":2,"returnSlots":1},"@transferOwnership_263":{"entryPoint":2187,"id":263,"parameterSlots":3,"returnSlots":0},"@transferOwnership_81":{"entryPoint":1173,"id":81,"parameterSlots":1,"returnSlots":0},"@unpause_549":{"entryPoint":517,"id":549,"parameterSlots":0,"returnSlots":0},"@unpause_693":{"entryPoint":1687,"id":693,"parameterSlots":1,"returnSlots":0},"@verifyCalldata_1140":{"entryPoint":1980,"id":1140,"parameterSlots":4,"returnSlots":1},"abi_decode_address":{"entryPoint":2812,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3073,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes_calldata_ptrt_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":2853,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes32":{"entryPoint":2787,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":2721,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes_calldata":{"entryPoint":3267,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_bytes_calldata_ptr_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":3203,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes_calldata_ptr_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":3340,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":3405,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20Mintable_$1013__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":3441,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":3147,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3100,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3460,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6919:17","statements":[{"nodeType":"YulBlock","src":"6:3:17","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:263:17","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:17"},"nodeType":"YulFunctionCall","src":"131:12:17"},"nodeType":"YulExpressionStatement","src":"131:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:17"},"nodeType":"YulFunctionCall","src":"100:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:17"},"nodeType":"YulFunctionCall","src":"96:32:17"},"nodeType":"YulIf","src":"93:52:17"},{"nodeType":"YulVariableDeclaration","src":"154:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:17"},"nodeType":"YulFunctionCall","src":"167:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"300:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"309:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"312:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:17"},"nodeType":"YulFunctionCall","src":"302:12:17"},"nodeType":"YulExpressionStatement","src":"302:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"230:66:17","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:17"},"nodeType":"YulFunctionCall","src":"219:78:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:17"},"nodeType":"YulFunctionCall","src":"209:89:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:17"},"nodeType":"YulFunctionCall","src":"202:97:17"},"nodeType":"YulIf","src":"199:117:17"},{"nodeType":"YulAssignment","src":"325:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"335:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"325:6:17"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:17","type":""}],"src":"14:332:17"},{"body":{"nodeType":"YulBlock","src":"446:92:17","statements":[{"nodeType":"YulAssignment","src":"456:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:17"},"nodeType":"YulFunctionCall","src":"464:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"456:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"498:9:17"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"523:6:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"516:6:17"},"nodeType":"YulFunctionCall","src":"516:14:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"509:6:17"},"nodeType":"YulFunctionCall","src":"509:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"491:6:17"},"nodeType":"YulFunctionCall","src":"491:41:17"},"nodeType":"YulExpressionStatement","src":"491:41:17"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"415:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"426:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"437:4:17","type":""}],"src":"351:187:17"},{"body":{"nodeType":"YulBlock","src":"613:110:17","statements":[{"body":{"nodeType":"YulBlock","src":"659:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"668:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"671:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"661:6:17"},"nodeType":"YulFunctionCall","src":"661:12:17"},"nodeType":"YulExpressionStatement","src":"661:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"634:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"643:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"630:3:17"},"nodeType":"YulFunctionCall","src":"630:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"655:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"626:3:17"},"nodeType":"YulFunctionCall","src":"626:32:17"},"nodeType":"YulIf","src":"623:52:17"},{"nodeType":"YulAssignment","src":"684:33:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"707:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"694:12:17"},"nodeType":"YulFunctionCall","src":"694:23:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"684:6:17"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"579:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"590:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"602:6:17","type":""}],"src":"543:180:17"},{"body":{"nodeType":"YulBlock","src":"829:125:17","statements":[{"nodeType":"YulAssignment","src":"839:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"851:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"862:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"847:3:17"},"nodeType":"YulFunctionCall","src":"847:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"839:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"881:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"896:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"904:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"892:3:17"},"nodeType":"YulFunctionCall","src":"892:55:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"874:6:17"},"nodeType":"YulFunctionCall","src":"874:74:17"},"nodeType":"YulExpressionStatement","src":"874:74:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"798:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"809:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"820:4:17","type":""}],"src":"728:226:17"},{"body":{"nodeType":"YulBlock","src":"1083:125:17","statements":[{"nodeType":"YulAssignment","src":"1093:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1105:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1116:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1101:3:17"},"nodeType":"YulFunctionCall","src":"1101:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1093:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1135:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1150:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1158:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1146:3:17"},"nodeType":"YulFunctionCall","src":"1146:55:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1128:6:17"},"nodeType":"YulFunctionCall","src":"1128:74:17"},"nodeType":"YulExpressionStatement","src":"1128:74:17"}]},"name":"abi_encode_tuple_t_contract$_IERC20Mintable_$1013__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1052:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1063:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1074:4:17","type":""}],"src":"959:249:17"},{"body":{"nodeType":"YulBlock","src":"1314:76:17","statements":[{"nodeType":"YulAssignment","src":"1324:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1336:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1347:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1332:3:17"},"nodeType":"YulFunctionCall","src":"1332:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1324:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1366:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"1377:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1359:6:17"},"nodeType":"YulFunctionCall","src":"1359:25:17"},"nodeType":"YulExpressionStatement","src":"1359:25:17"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1283:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1294:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1305:4:17","type":""}],"src":"1213:177:17"},{"body":{"nodeType":"YulBlock","src":"1496:76:17","statements":[{"nodeType":"YulAssignment","src":"1506:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1518:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1529:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1514:3:17"},"nodeType":"YulFunctionCall","src":"1514:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1506:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1548:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"1559:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1541:6:17"},"nodeType":"YulFunctionCall","src":"1541:25:17"},"nodeType":"YulExpressionStatement","src":"1541:25:17"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1465:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1476:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1487:4:17","type":""}],"src":"1395:177:17"},{"body":{"nodeType":"YulBlock","src":"1626:147:17","statements":[{"nodeType":"YulAssignment","src":"1636:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1658:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1645:12:17"},"nodeType":"YulFunctionCall","src":"1645:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1636:5:17"}]},{"body":{"nodeType":"YulBlock","src":"1751:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1760:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1763:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1753:6:17"},"nodeType":"YulFunctionCall","src":"1753:12:17"},"nodeType":"YulExpressionStatement","src":"1753:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1687:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1698:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"1705:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1694:3:17"},"nodeType":"YulFunctionCall","src":"1694:54:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1684:2:17"},"nodeType":"YulFunctionCall","src":"1684:65:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1677:6:17"},"nodeType":"YulFunctionCall","src":"1677:73:17"},"nodeType":"YulIf","src":"1674:93:17"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1605:6:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1616:5:17","type":""}],"src":"1577:196:17"},{"body":{"nodeType":"YulBlock","src":"1936:987:17","statements":[{"body":{"nodeType":"YulBlock","src":"1982:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1991:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1994:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1984:6:17"},"nodeType":"YulFunctionCall","src":"1984:12:17"},"nodeType":"YulExpressionStatement","src":"1984:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1957:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"1966:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1953:3:17"},"nodeType":"YulFunctionCall","src":"1953:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"1978:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1949:3:17"},"nodeType":"YulFunctionCall","src":"1949:32:17"},"nodeType":"YulIf","src":"1946:52:17"},{"nodeType":"YulAssignment","src":"2007:39:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2036:9:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2017:18:17"},"nodeType":"YulFunctionCall","src":"2017:29:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2007:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"2055:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2086:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2097:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2082:3:17"},"nodeType":"YulFunctionCall","src":"2082:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2069:12:17"},"nodeType":"YulFunctionCall","src":"2069:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2059:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2110:28:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2120:18:17","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2114:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2165:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2174:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2177:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2167:6:17"},"nodeType":"YulFunctionCall","src":"2167:12:17"},"nodeType":"YulExpressionStatement","src":"2167:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2153:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"2161:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2150:2:17"},"nodeType":"YulFunctionCall","src":"2150:14:17"},"nodeType":"YulIf","src":"2147:34:17"},{"nodeType":"YulVariableDeclaration","src":"2190:32:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2204:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"2215:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2200:3:17"},"nodeType":"YulFunctionCall","src":"2200:22:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2194:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2270:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2279:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2282:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2272:6:17"},"nodeType":"YulFunctionCall","src":"2272:12:17"},"nodeType":"YulExpressionStatement","src":"2272:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2249:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"2253:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2245:3:17"},"nodeType":"YulFunctionCall","src":"2245:13:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2260:7:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2241:3:17"},"nodeType":"YulFunctionCall","src":"2241:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2234:6:17"},"nodeType":"YulFunctionCall","src":"2234:35:17"},"nodeType":"YulIf","src":"2231:55:17"},{"nodeType":"YulVariableDeclaration","src":"2295:30:17","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2322:2:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2309:12:17"},"nodeType":"YulFunctionCall","src":"2309:16:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2299:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2352:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2361:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2364:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2354:6:17"},"nodeType":"YulFunctionCall","src":"2354:12:17"},"nodeType":"YulExpressionStatement","src":"2354:12:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2340:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"2348:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2337:2:17"},"nodeType":"YulFunctionCall","src":"2337:14:17"},"nodeType":"YulIf","src":"2334:34:17"},{"body":{"nodeType":"YulBlock","src":"2418:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2427:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2430:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2420:6:17"},"nodeType":"YulFunctionCall","src":"2420:12:17"},"nodeType":"YulExpressionStatement","src":"2420:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2391:2:17"},{"name":"length","nodeType":"YulIdentifier","src":"2395:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2387:3:17"},"nodeType":"YulFunctionCall","src":"2387:15:17"},{"kind":"number","nodeType":"YulLiteral","src":"2404:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2383:3:17"},"nodeType":"YulFunctionCall","src":"2383:24:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2409:7:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2380:2:17"},"nodeType":"YulFunctionCall","src":"2380:37:17"},"nodeType":"YulIf","src":"2377:57:17"},{"nodeType":"YulAssignment","src":"2443:21:17","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2457:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"2461:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2453:3:17"},"nodeType":"YulFunctionCall","src":"2453:11:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2443:6:17"}]},{"nodeType":"YulAssignment","src":"2473:16:17","value":{"name":"length","nodeType":"YulIdentifier","src":"2483:6:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2473:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"2498:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2531:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2542:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2527:3:17"},"nodeType":"YulFunctionCall","src":"2527:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2514:12:17"},"nodeType":"YulFunctionCall","src":"2514:32:17"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2502:8:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2575:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2584:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2587:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2577:6:17"},"nodeType":"YulFunctionCall","src":"2577:12:17"},"nodeType":"YulExpressionStatement","src":"2577:12:17"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2561:8:17"},{"name":"_1","nodeType":"YulIdentifier","src":"2571:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2558:2:17"},"nodeType":"YulFunctionCall","src":"2558:16:17"},"nodeType":"YulIf","src":"2555:36:17"},{"nodeType":"YulVariableDeclaration","src":"2600:34:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2614:9:17"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2625:8:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2610:3:17"},"nodeType":"YulFunctionCall","src":"2610:24:17"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2604:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2682:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2691:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2694:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2684:6:17"},"nodeType":"YulFunctionCall","src":"2684:12:17"},"nodeType":"YulExpressionStatement","src":"2684:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2661:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"2665:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2657:3:17"},"nodeType":"YulFunctionCall","src":"2657:13:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2672:7:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2653:3:17"},"nodeType":"YulFunctionCall","src":"2653:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2646:6:17"},"nodeType":"YulFunctionCall","src":"2646:35:17"},"nodeType":"YulIf","src":"2643:55:17"},{"nodeType":"YulVariableDeclaration","src":"2707:32:17","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2736:2:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2723:12:17"},"nodeType":"YulFunctionCall","src":"2723:16:17"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"2711:8:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2768:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2777:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2780:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2770:6:17"},"nodeType":"YulFunctionCall","src":"2770:12:17"},"nodeType":"YulExpressionStatement","src":"2770:12:17"}]},"condition":{"arguments":[{"name":"length_1","nodeType":"YulIdentifier","src":"2754:8:17"},{"name":"_1","nodeType":"YulIdentifier","src":"2764:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2751:2:17"},"nodeType":"YulFunctionCall","src":"2751:16:17"},"nodeType":"YulIf","src":"2748:36:17"},{"body":{"nodeType":"YulBlock","src":"2844:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2853:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2856:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2846:6:17"},"nodeType":"YulFunctionCall","src":"2846:12:17"},"nodeType":"YulExpressionStatement","src":"2846:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2807:2:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2815:1:17","type":"","value":"5"},{"name":"length_1","nodeType":"YulIdentifier","src":"2818:8:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2811:3:17"},"nodeType":"YulFunctionCall","src":"2811:16:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2803:3:17"},"nodeType":"YulFunctionCall","src":"2803:25:17"},{"kind":"number","nodeType":"YulLiteral","src":"2830:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2799:3:17"},"nodeType":"YulFunctionCall","src":"2799:34:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2835:7:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2796:2:17"},"nodeType":"YulFunctionCall","src":"2796:47:17"},"nodeType":"YulIf","src":"2793:67:17"},{"nodeType":"YulAssignment","src":"2869:21:17","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2883:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"2887:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2879:3:17"},"nodeType":"YulFunctionCall","src":"2879:11:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2869:6:17"}]},{"nodeType":"YulAssignment","src":"2899:18:17","value":{"name":"length_1","nodeType":"YulIdentifier","src":"2909:8:17"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2899:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_calldata_ptrt_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1870:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1881:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1893:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1901:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1909:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1917:6:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1925:6:17","type":""}],"src":"1778:1145:17"},{"body":{"nodeType":"YulBlock","src":"2998:116:17","statements":[{"body":{"nodeType":"YulBlock","src":"3044:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3053:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3056:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3046:6:17"},"nodeType":"YulFunctionCall","src":"3046:12:17"},"nodeType":"YulExpressionStatement","src":"3046:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3019:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"3028:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3015:3:17"},"nodeType":"YulFunctionCall","src":"3015:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"3040:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3011:3:17"},"nodeType":"YulFunctionCall","src":"3011:32:17"},"nodeType":"YulIf","src":"3008:52:17"},{"nodeType":"YulAssignment","src":"3069:39:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3098:9:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3079:18:17"},"nodeType":"YulFunctionCall","src":"3079:29:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3069:6:17"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2964:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2975:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2987:6:17","type":""}],"src":"2928:186:17"},{"body":{"nodeType":"YulBlock","src":"3151:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3168:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3171:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3161:6:17"},"nodeType":"YulFunctionCall","src":"3161:88:17"},"nodeType":"YulExpressionStatement","src":"3161:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3265:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3268:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3258:6:17"},"nodeType":"YulFunctionCall","src":"3258:15:17"},"nodeType":"YulExpressionStatement","src":"3258:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3289:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3292:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3282:6:17"},"nodeType":"YulFunctionCall","src":"3282:15:17"},"nodeType":"YulExpressionStatement","src":"3282:15:17"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"3119:184:17"},{"body":{"nodeType":"YulBlock","src":"3355:148:17","statements":[{"body":{"nodeType":"YulBlock","src":"3446:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3448:16:17"},"nodeType":"YulFunctionCall","src":"3448:18:17"},"nodeType":"YulExpressionStatement","src":"3448:18:17"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3371:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"3378:66:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3368:2:17"},"nodeType":"YulFunctionCall","src":"3368:77:17"},"nodeType":"YulIf","src":"3365:103:17"},{"nodeType":"YulAssignment","src":"3477:20:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3488:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"3495:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3484:3:17"},"nodeType":"YulFunctionCall","src":"3484:13:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"3477:3:17"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3337:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"3347:3:17","type":""}],"src":"3308:195:17"},{"body":{"nodeType":"YulBlock","src":"3711:266:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3728:3:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3741:2:17","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"3745:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3737:3:17"},"nodeType":"YulFunctionCall","src":"3737:15:17"},{"kind":"number","nodeType":"YulLiteral","src":"3754:66:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3733:3:17"},"nodeType":"YulFunctionCall","src":"3733:88:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3721:6:17"},"nodeType":"YulFunctionCall","src":"3721:101:17"},"nodeType":"YulExpressionStatement","src":"3721:101:17"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3848:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"3853:2:17","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3844:3:17"},"nodeType":"YulFunctionCall","src":"3844:12:17"},{"name":"value1","nodeType":"YulIdentifier","src":"3858:6:17"},{"name":"value2","nodeType":"YulIdentifier","src":"3866:6:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3831:12:17"},"nodeType":"YulFunctionCall","src":"3831:42:17"},"nodeType":"YulExpressionStatement","src":"3831:42:17"},{"nodeType":"YulVariableDeclaration","src":"3882:26:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3896:3:17"},{"name":"value2","nodeType":"YulIdentifier","src":"3901:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3892:3:17"},"nodeType":"YulFunctionCall","src":"3892:16:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3886:2:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3928:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"3932:2:17","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3924:3:17"},"nodeType":"YulFunctionCall","src":"3924:11:17"},{"name":"value3","nodeType":"YulIdentifier","src":"3937:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3917:6:17"},"nodeType":"YulFunctionCall","src":"3917:27:17"},"nodeType":"YulExpressionStatement","src":"3917:27:17"},{"nodeType":"YulAssignment","src":"3953:18:17","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3964:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"3968:2:17","type":"","value":"52"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3960:3:17"},"nodeType":"YulFunctionCall","src":"3960:11:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3953:3:17"}]}]},"name":"abi_encode_tuple_packed_t_address_t_bytes_calldata_ptr_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3663:3:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3668:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3676:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3684:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3692:6:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3703:3:17","type":""}],"src":"3508:469:17"},{"body":{"nodeType":"YulBlock","src":"4048:259:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4065:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"4070:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4058:6:17"},"nodeType":"YulFunctionCall","src":"4058:19:17"},"nodeType":"YulExpressionStatement","src":"4058:19:17"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4103:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"4108:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4099:3:17"},"nodeType":"YulFunctionCall","src":"4099:14:17"},{"name":"start","nodeType":"YulIdentifier","src":"4115:5:17"},{"name":"length","nodeType":"YulIdentifier","src":"4122:6:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4086:12:17"},"nodeType":"YulFunctionCall","src":"4086:43:17"},"nodeType":"YulExpressionStatement","src":"4086:43:17"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4153:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"4158:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4149:3:17"},"nodeType":"YulFunctionCall","src":"4149:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"4167:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4145:3:17"},"nodeType":"YulFunctionCall","src":"4145:27:17"},{"kind":"number","nodeType":"YulLiteral","src":"4174:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4138:6:17"},"nodeType":"YulFunctionCall","src":"4138:38:17"},"nodeType":"YulExpressionStatement","src":"4138:38:17"},{"nodeType":"YulAssignment","src":"4185:116:17","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4200:3:17"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4213:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"4221:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4209:3:17"},"nodeType":"YulFunctionCall","src":"4209:15:17"},{"kind":"number","nodeType":"YulLiteral","src":"4226:66:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4205:3:17"},"nodeType":"YulFunctionCall","src":"4205:88:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4196:3:17"},"nodeType":"YulFunctionCall","src":"4196:98:17"},{"kind":"number","nodeType":"YulLiteral","src":"4296:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4192:3:17"},"nodeType":"YulFunctionCall","src":"4192:109:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4185:3:17"}]}]},"name":"abi_encode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"4017:5:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"4024:6:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4032:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4040:3:17","type":""}],"src":"3982:325:17"},{"body":{"nodeType":"YulBlock","src":"4497:250:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4514:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4529:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"4537:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4525:3:17"},"nodeType":"YulFunctionCall","src":"4525:55:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4507:6:17"},"nodeType":"YulFunctionCall","src":"4507:74:17"},"nodeType":"YulExpressionStatement","src":"4507:74:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4601:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4612:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4597:3:17"},"nodeType":"YulFunctionCall","src":"4597:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"4617:2:17","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4590:6:17"},"nodeType":"YulFunctionCall","src":"4590:30:17"},"nodeType":"YulExpressionStatement","src":"4590:30:17"},{"nodeType":"YulAssignment","src":"4629:69:17","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4663:6:17"},{"name":"value2","nodeType":"YulIdentifier","src":"4671:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4683:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4694:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4679:3:17"},"nodeType":"YulFunctionCall","src":"4679:18:17"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"4637:25:17"},"nodeType":"YulFunctionCall","src":"4637:61:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4629:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4718:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4729:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4714:3:17"},"nodeType":"YulFunctionCall","src":"4714:18:17"},{"name":"value3","nodeType":"YulIdentifier","src":"4734:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4707:6:17"},"nodeType":"YulFunctionCall","src":"4707:34:17"},"nodeType":"YulExpressionStatement","src":"4707:34:17"}]},"name":"abi_encode_tuple_t_address_t_bytes_calldata_ptr_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4442:9:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4453:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4461:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4469:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4477:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4488:4:17","type":""}],"src":"4312:435:17"},{"body":{"nodeType":"YulBlock","src":"4909:158:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4926:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4937:2:17","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4919:6:17"},"nodeType":"YulFunctionCall","src":"4919:21:17"},"nodeType":"YulExpressionStatement","src":"4919:21:17"},{"nodeType":"YulAssignment","src":"4949:69:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4983:6:17"},{"name":"value1","nodeType":"YulIdentifier","src":"4991:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5003:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5014:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4999:3:17"},"nodeType":"YulFunctionCall","src":"4999:18:17"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"4957:25:17"},"nodeType":"YulFunctionCall","src":"4957:61:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4949:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5038:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5049:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5034:3:17"},"nodeType":"YulFunctionCall","src":"5034:18:17"},{"name":"value2","nodeType":"YulIdentifier","src":"5054:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5027:6:17"},"nodeType":"YulFunctionCall","src":"5027:34:17"},"nodeType":"YulExpressionStatement","src":"5027:34:17"}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4862:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4873:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4881:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4889:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4900:4:17","type":""}],"src":"4752:315:17"},{"body":{"nodeType":"YulBlock","src":"5121:79:17","statements":[{"nodeType":"YulAssignment","src":"5131:17:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5143:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"5146:1:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5139:3:17"},"nodeType":"YulFunctionCall","src":"5139:9:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"5131:4:17"}]},{"body":{"nodeType":"YulBlock","src":"5172:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5174:16:17"},"nodeType":"YulFunctionCall","src":"5174:18:17"},"nodeType":"YulExpressionStatement","src":"5174:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"5163:4:17"},{"name":"x","nodeType":"YulIdentifier","src":"5169:1:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5160:2:17"},"nodeType":"YulFunctionCall","src":"5160:11:17"},"nodeType":"YulIf","src":"5157:37:17"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5103:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"5106:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"5112:4:17","type":""}],"src":"5072:128:17"},{"body":{"nodeType":"YulBlock","src":"5379:174:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5396:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5407:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5389:6:17"},"nodeType":"YulFunctionCall","src":"5389:21:17"},"nodeType":"YulExpressionStatement","src":"5389:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5430:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5441:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5426:3:17"},"nodeType":"YulFunctionCall","src":"5426:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"5446:2:17","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5419:6:17"},"nodeType":"YulFunctionCall","src":"5419:30:17"},"nodeType":"YulExpressionStatement","src":"5419:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5469:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5480:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5465:3:17"},"nodeType":"YulFunctionCall","src":"5465:18:17"},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"5485:26:17","type":"","value":"Ownership: not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5458:6:17"},"nodeType":"YulFunctionCall","src":"5458:54:17"},"nodeType":"YulExpressionStatement","src":"5458:54:17"},{"nodeType":"YulAssignment","src":"5521:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5533:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5544:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5529:3:17"},"nodeType":"YulFunctionCall","src":"5529:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5521:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5356:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5370:4:17","type":""}],"src":"5205:348:17"},{"body":{"nodeType":"YulBlock","src":"5732:163:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5749:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5760:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5742:6:17"},"nodeType":"YulFunctionCall","src":"5742:21:17"},"nodeType":"YulExpressionStatement","src":"5742:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5783:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5794:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5779:3:17"},"nodeType":"YulFunctionCall","src":"5779:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"5799:2:17","type":"","value":"13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5772:6:17"},"nodeType":"YulFunctionCall","src":"5772:30:17"},"nodeType":"YulExpressionStatement","src":"5772:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5822:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5833:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5818:3:17"},"nodeType":"YulFunctionCall","src":"5818:18:17"},{"hexValue":"50617573653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"5838:15:17","type":"","value":"Pause: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5811:6:17"},"nodeType":"YulFunctionCall","src":"5811:43:17"},"nodeType":"YulExpressionStatement","src":"5811:43:17"},{"nodeType":"YulAssignment","src":"5863:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5875:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5886:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5871:3:17"},"nodeType":"YulFunctionCall","src":"5871:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5863:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5709:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5723:4:17","type":""}],"src":"5558:337:17"},{"body":{"nodeType":"YulBlock","src":"5970:110:17","statements":[{"body":{"nodeType":"YulBlock","src":"6016:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6025:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6028:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6018:6:17"},"nodeType":"YulFunctionCall","src":"6018:12:17"},"nodeType":"YulExpressionStatement","src":"6018:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5991:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6000:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5987:3:17"},"nodeType":"YulFunctionCall","src":"5987:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"6012:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5983:3:17"},"nodeType":"YulFunctionCall","src":"5983:32:17"},"nodeType":"YulIf","src":"5980:52:17"},{"nodeType":"YulAssignment","src":"6041:33:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6064:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6051:12:17"},"nodeType":"YulFunctionCall","src":"6051:23:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6041:6:17"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5936:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5947:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5959:6:17","type":""}],"src":"5900:180:17"},{"body":{"nodeType":"YulBlock","src":"6214:168:17","statements":[{"nodeType":"YulAssignment","src":"6224:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6236:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6247:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6232:3:17"},"nodeType":"YulFunctionCall","src":"6232:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6224:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6266:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6281:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"6289:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6277:3:17"},"nodeType":"YulFunctionCall","src":"6277:55:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6259:6:17"},"nodeType":"YulFunctionCall","src":"6259:74:17"},"nodeType":"YulExpressionStatement","src":"6259:74:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6353:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6364:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6349:3:17"},"nodeType":"YulFunctionCall","src":"6349:18:17"},{"name":"value1","nodeType":"YulIdentifier","src":"6369:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6342:6:17"},"nodeType":"YulFunctionCall","src":"6342:34:17"},"nodeType":"YulExpressionStatement","src":"6342:34:17"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6175:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6186:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6194:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6205:4:17","type":""}],"src":"6085:297:17"},{"body":{"nodeType":"YulBlock","src":"6561:167:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6578:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6589:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6571:6:17"},"nodeType":"YulFunctionCall","src":"6571:21:17"},"nodeType":"YulExpressionStatement","src":"6571:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6612:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6623:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6608:3:17"},"nodeType":"YulFunctionCall","src":"6608:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"6628:2:17","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6601:6:17"},"nodeType":"YulFunctionCall","src":"6601:30:17"},"nodeType":"YulExpressionStatement","src":"6601:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6651:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6662:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6647:3:17"},"nodeType":"YulFunctionCall","src":"6647:18:17"},{"hexValue":"50617573653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"6667:19:17","type":"","value":"Pause: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6640:6:17"},"nodeType":"YulFunctionCall","src":"6640:47:17"},"nodeType":"YulExpressionStatement","src":"6640:47:17"},{"nodeType":"YulAssignment","src":"6696:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6708:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6719:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6704:3:17"},"nodeType":"YulFunctionCall","src":"6704:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6696:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6538:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6552:4:17","type":""}],"src":"6387:341:17"},{"body":{"nodeType":"YulBlock","src":"6765:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6782:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6785:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6775:6:17"},"nodeType":"YulFunctionCall","src":"6775:88:17"},"nodeType":"YulExpressionStatement","src":"6775:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6879:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6882:4:17","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6872:6:17"},"nodeType":"YulFunctionCall","src":"6872:15:17"},"nodeType":"YulExpressionStatement","src":"6872:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6903:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6906:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6896:6:17"},"nodeType":"YulFunctionCall","src":"6896:15:17"},"nodeType":"YulExpressionStatement","src":"6896:15:17"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6733:184:17"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IERC20Mintable_$1013__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bytes_calldata_ptrt_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let _3 := add(headStart, offset_1)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let length_1 := calldataload(_3)\n        if gt(length_1, _1) { revert(0, 0) }\n        if gt(add(add(_3, shl(5, length_1)), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_3, 32)\n        value4 := length_1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_packed_t_address_t_bytes_calldata_ptr_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        calldatacopy(add(pos, 20), value1, value2)\n        let _1 := add(pos, value2)\n        mstore(add(_1, 20), value3)\n        end := add(_1, 52)\n    }\n    function abi_encode_bytes_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_bytes_calldata_ptr_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 96)\n        tail := abi_encode_bytes_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), value3)\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_bytes_calldata(value0, value1, add(headStart, 64))\n        mstore(add(headStart, 32), value2)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Ownership: not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Pause: paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Pause: not paused\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1608":[{"length":32,"start":352},{"length":32,"start":2097}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100d45760003560e01c8063996373c311610081578063ebf0c7171161005b578063ebf0c717146101bc578063edcdebcc146101c5578063f2fde38b146101d857600080fd5b8063996373c31461015b578063affed0e014610182578063cc3c0f061461019957600080fd5b80637cb64759116100b25780637cb64759146101135780638456cb59146101265780638da5cb5b1461012e57600080fd5b806301ffc9a7146100d95780633f4ba83a146101015780635c975abb1461010b575b600080fd5b6100ec6100e7366004610aa1565b6101eb565b60405190151581526020015b60405180910390f35b610109610205565b005b6100ec61022a565b610109610121366004610ae3565b610243565b6101096102a7565b6101366102c0565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f8565b6101367f000000000000000000000000000000000000000000000000000000000000000081565b61018b60015481565b6040519081526020016100f8565b6100ec6101a7366004610ae3565b60026020526000908152604090205460ff1681565b61018b60005481565b6101096101d3366004610b25565b6102e7565b6101096101e6366004610c01565b610495565b60006101ff826101f96104ac565b906104da565b92915050565b610218335b6102126105b4565b906105e2565b610228610223610669565b610697565b565b600061023e610237610669565b5460ff1690565b905090565b61024c3361020a565b610257610223610669565b8060008190555060016000815461026d90610c4b565b909155506040518181527f42cbc405e4dbf1b691e85b9a34b08ecfcf7a9ad9078bf4d645ccfa1fac11c10b9060200160405180910390a150565b6102b03361020a565b6102286102bb610669565b6106f2565b600061023e6102cd6105b4565b5473ffffffffffffffffffffffffffffffffffffffff1690565b6102f76102f2610669565b610750565b60015460008054604051909190610318908990899089908790602001610c83565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600290935291205490915060ff16156103a957878787856040517f7fbf25470000000000000000000000000000000000000000000000000000000081526004016103a09493929190610d0c565b60405180910390fd5b6103b5858584846107bc565b6103f357878787856040517f91ebfb310000000000000000000000000000000000000000000000000000000081526004016103a09493929190610d0c565b6000818152600260205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555173ffffffffffffffffffffffffffffffffffffffff89169083907f6a4408e44c908d501056e1ef88baf30a72467f3a181544a67a30cb14c8e8059890610478908b908b908990610d4d565b60405180910390a361048b8888886107d4565b5050505050505050565b6104a933826104a26105b4565b919061088b565b50565b6000806101ff60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610d71565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161052a575060006101ff565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161057b575060016101ff565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000806101ff60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610d71565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e6572000000000000000060448201526064016103a0565b5050565b6000806101ff60017f0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f610d71565b6106a0816109b8565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681556040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693390600090a150565b6106fb81610750565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011781556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a150565b805460ff16156104a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50617573653a207061757365640000000000000000000000000000000000000060448201526064016103a0565b6000826107ca868685610a23565b1495945050505050565b60006107e282840184610ae3565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018390529192507f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b15801561087757600080fd5b505af115801561048b573d6000803e3d6000fd5b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e6572000000000000000060448201526064016103a0565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109b25783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b805460ff166104a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f50617573653a206e6f742070617573656400000000000000000000000000000060448201526064016103a0565b600081815b84811015610a6657610a5282878784818110610a4657610a46610d84565b90506020020135610a6f565b915080610a5e81610c4b565b915050610a28565b50949350505050565b6000818310610a8b576000828152602084905260409020610a9a565b60008381526020839052604090205b9392505050565b600060208284031215610ab357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a9a57600080fd5b600060208284031215610af557600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b2057600080fd5b919050565b600080600080600060608688031215610b3d57600080fd5b610b4686610afc565b9450602086013567ffffffffffffffff80821115610b6357600080fd5b818801915088601f830112610b7757600080fd5b813581811115610b8657600080fd5b896020828501011115610b9857600080fd5b602083019650809550506040880135915080821115610bb657600080fd5b818801915088601f830112610bca57600080fd5b813581811115610bd957600080fd5b8960208260051b8501011115610bee57600080fd5b9699959850939650602001949392505050565b600060208284031215610c1357600080fd5b610a9a82610afc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c7c57610c7c610c1c565b5060010190565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b16815282846014830137601492019182015260340192915050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff85168152606060208201526000610d3c606083018587610cc3565b905082604083015295945050505050565b604081526000610d61604083018587610cc3565b9050826020830152949350505050565b818103818111156101ff576101ff610c1c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220d0d93996c24da7a18561e607c4a327b710b2273e0f28b8447edc88ad2131593c64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x996373C3 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xEBF0C717 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xEBF0C717 EQ PUSH2 0x1BC JUMPI DUP1 PUSH4 0xEDCDEBCC EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x996373C3 EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7CB64759 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x10B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEC PUSH2 0xE7 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA1 JUMP JUMPDEST PUSH2 0x1EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x109 PUSH2 0x205 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEC PUSH2 0x22A JUMP JUMPDEST PUSH2 0x109 PUSH2 0x121 CALLDATASIZE PUSH1 0x4 PUSH2 0xAE3 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST PUSH2 0x109 PUSH2 0x2A7 JUMP JUMPDEST PUSH2 0x136 PUSH2 0x2C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0x136 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x18B PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xEC PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0xAE3 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x18B PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x109 PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0xB25 JUMP JUMPDEST PUSH2 0x2E7 JUMP JUMPDEST PUSH2 0x109 PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x495 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FF DUP3 PUSH2 0x1F9 PUSH2 0x4AC JUMP JUMPDEST SWAP1 PUSH2 0x4DA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x218 CALLER JUMPDEST PUSH2 0x212 PUSH2 0x5B4 JUMP JUMPDEST SWAP1 PUSH2 0x5E2 JUMP JUMPDEST PUSH2 0x228 PUSH2 0x223 PUSH2 0x669 JUMP JUMPDEST PUSH2 0x697 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E PUSH2 0x237 PUSH2 0x669 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x24C CALLER PUSH2 0x20A JUMP JUMPDEST PUSH2 0x257 PUSH2 0x223 PUSH2 0x669 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x26D SWAP1 PUSH2 0xC4B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x42CBC405E4DBF1B691E85B9A34B08ECFCF7A9AD9078BF4D645CCFA1FAC11C10B SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x2B0 CALLER PUSH2 0x20A JUMP JUMPDEST PUSH2 0x228 PUSH2 0x2BB PUSH2 0x669 JUMP JUMPDEST PUSH2 0x6F2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E PUSH2 0x2CD PUSH2 0x5B4 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2F7 PUSH2 0x2F2 PUSH2 0x669 JUMP JUMPDEST PUSH2 0x750 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x318 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP8 SWAP1 PUSH1 0x20 ADD PUSH2 0xC83 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x3A9 JUMPI DUP8 DUP8 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH32 0x7FBF254700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A0 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3B5 DUP6 DUP6 DUP5 DUP5 PUSH2 0x7BC JUMP JUMPDEST PUSH2 0x3F3 JUMPI DUP8 DUP8 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH32 0x91EBFB3100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A0 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD0C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP1 DUP4 SWAP1 PUSH32 0x6A4408E44C908D501056E1EF88BAF30A72467F3A181544A67A30CB14C8E80598 SWAP1 PUSH2 0x478 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP10 SWAP1 PUSH2 0xD4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x48B DUP9 DUP9 DUP9 PUSH2 0x7D4 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4A9 CALLER DUP3 PUSH2 0x4A2 PUSH2 0x5B4 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x88B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FF PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xD71 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x52A JUMPI POP PUSH1 0x0 PUSH2 0x1FF JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x57B JUMPI POP PUSH1 0x1 PUSH2 0x1FF JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FF PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xD71 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x665 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FF PUSH1 0x1 PUSH32 0x186A05F63B1553398AD5EA3233C0CE68B8C9EECC47717F123C5C2B42FBD6D9F PUSH2 0xD71 JUMP JUMPDEST PUSH2 0x6A0 DUP2 PUSH2 0x9B8 JUMP JUMPDEST DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xA45F47FDEA8A1EFDD9029A5691C7F759C32B7C698632B563573E155625D16933 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x6FB DUP2 PUSH2 0x750 JUMP JUMPDEST DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x9E87FAC88FF661F02D44F95383C817FECE4BCE600A3DAB7A54406878B965E752 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50617573653A2070617573656400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7CA DUP7 DUP7 DUP6 PUSH2 0xA23 JUMP JUMPDEST EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E2 DUP3 DUP5 ADD DUP5 PUSH2 0xAE3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x877 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x48B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x910 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A0 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9B2 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x4A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50617573653A206E6F7420706175736564000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA66 JUMPI PUSH2 0xA52 DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xA46 JUMPI PUSH2 0xA46 PUSH2 0xD84 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0xA6F JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xA5E DUP2 PUSH2 0xC4B JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA28 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xA8B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA9A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xA9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xB3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB46 DUP7 PUSH2 0xAFC JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xB86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xB98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP7 POP DUP1 SWAP6 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xBB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xBD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xBEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA9A DUP3 PUSH2 0xAFC JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xC7C JUMPI PUSH2 0xC7C PUSH2 0xC1C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP6 PUSH1 0x60 SHL AND DUP2 MSTORE DUP3 DUP5 PUSH1 0x14 DUP4 ADD CALLDATACOPY PUSH1 0x14 SWAP3 ADD SWAP2 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP5 ADD ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xD3C PUSH1 0x60 DUP4 ADD DUP6 DUP8 PUSH2 0xCC3 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0xD61 PUSH1 0x40 DUP4 ADD DUP6 DUP8 PUSH2 0xCC3 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1FF JUMPI PUSH2 0x1FF PUSH2 0xC1C JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD0 0xD9 CODECOPY SWAP7 0xC2 0x4D 0xA7 LOG1 DUP6 PUSH2 0xE607 0xC4 LOG3 0x27 0xB7 LT 0xB2 0x27 RETURNDATACOPY 0xF 0x28 0xB8 PREVRANDAO PUSH31 0xDC88AD2131593C64736F6C6343000813003300000000000000000000000000 ","sourceMap":"281:382:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;541:174:4;;;;;;:::i;:::-;;:::i;:::-;;;516:14:17;;509:22;491:41;;479:2;464:18;541:174:4;;;;;;;;1339:156:8;;;:::i;:::-;;1615:101;;;:::i;2983:262:10:-;;;;;;:::i;:::-;;:::i;988:152:8:-;;;:::i;709:129:1:-;;;:::i;:::-;;;904:42:17;892:55;;;874:74;;862:2;847:18;709:129:1;728:226:17;346:37:16;;;;;1345:20:10;;;;;;;;;1359:25:17;;;1347:2;1332:18;1345:20:10;1213:177:17;1372:39:10;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1320:19;;;;;;3799:729;;;;;;:::i;:::-;;:::i;872:161:1:-;;;;;;:::i;:::-;;:::i;541:174:4:-;620:4;643:65;696:11;643:34;:32;:34::i;:::-;:52;;:65::i;:::-;636:72;541:174;-1:-1:-1;;541:174:4:o;1339:156:8:-;1377:70;719:10:13;1434:12:8;1377:33;:31;:33::i;:::-;:56;;:70::i;:::-;1457:31;:21;:19;:21::i;:::-;:29;:31::i;:::-;1339:156::o;1615:101::-;1656:4;1679:30;:21;:19;:21::i;:::-;2386:10:9;;;;2297:106;1679:30:8;1672:37;;1615:101;:::o;2983:262:10:-;3043:70;719:10:13;3100:12:10;640:96:13;3043:70:10;3123:31;:21;:19;:21::i;:31::-;3171:10;3164:4;:17;;;;3193:5;;3191:7;;;;;:::i;:::-;;;;-1:-1:-1;3213:25:10;;1359::17;;;3213::10;;1347:2:17;1332:18;3213:25:10;;;;;;;2983:262;:::o;988:152:8:-;1024:70;719:10:13;1081:12:8;640:96:13;1024:70:8;1104:29;:21;:19;:21::i;:::-;:27;:29::i;709:129:1:-;764:7;790:41;:33;:31;:33::i;:::-;3352:15:3;;;;3256:118;3799:729:10;3910:42;:21;:19;:21::i;:::-;:40;:42::i;:::-;3986:5;;3963:20;4023:4;;4062:52;;4023:4;;3963:20;4062:52;;4079:9;;4090;;;;3986:5;;4062:52;;;:::i;:::-;;;;;;;;;;;;;;4052:63;;4062:52;4052:63;;;;4130:13;;;;:7;:13;;;;;;4052:63;;-1:-1:-1;4130:13:10;;4126:101;;;4181:9;4192;;4203:12;4166:50;;;;;;;;;;;;;;:::i;:::-;;;;;;;;4126:101;4242:39;:5;;4263:11;4276:4;4242:20;:39::i;:::-;4237:126;;4317:9;4328;;4339:12;4304:48;;;;;;;;;;;;;;:::i;4237:126::-;4373:13;;;;:7;:13;;;;;;;:20;;;;4389:4;4373:20;;;4409:62;;;;;4423:11;;4409:62;;;;4447:9;;;;4458:12;;4409:62;:::i;:::-;;;;;;;;4482:39;4500:9;4511;;4482:17;:39::i;:::-;3900:628;;;3799:729;;;;;:::o;872:161:1:-;951:75;719:10:13;1017:8:1;951:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;872:161;:::o;1613:174:6:-;1654:16;;287:79;365:1;295:66;287:79;:::i;1267:340::-;1355:14;1385:35;1400:20;1385:35;;;1381:78;;-1:-1:-1;1443:5:6;1436:12;;1381:78;1472:40;;;;;1468:82;;-1:-1:-1;1535:4:6;1528:11;;1468:82;-1:-1:-1;1566:34:6;;:21;:34;;;;;;;;;;;;;;;1267:340::o;3707:174:3:-;3748:16;;601:71;671:1;609:58;601:71;:::i;3540:161::-;3650:15;;;3639:26;;;3650:15;;3639:26;3631:63;;;;;;;5407:2:17;3631:63:3;;;5389:21:17;5446:2;5426:18;;;5419:30;5485:26;5465:18;;;5458:54;5529:18;;3631:63:3;5205:348:17;3631:63:3;3540:161;;:::o;2859:174:9:-;2900:16;;325:62;386:1;333:49;325:62;:::i;2044:133::-;2098:19;:1;:17;:19::i;:::-;2127:18;;;;;;2160:10;;;;2140:5;;2160:10;2044:133;:::o;1776:131::-;1828:22;:1;:20;:22::i;:::-;1860:17;;;;1873:4;1860:17;;;1892:8;;;;1860:10;;1892:8;1776:131;:::o;2739:114::-;2818:10;;;;2817:11;2809:37;;;;;;;5760:2:17;2809:37:9;;;5742:21:17;5799:2;5779:18;;;5772:30;5838:15;5818:18;;;5811:43;5871:18;;2809:37:9;5558:337:17;1441:202:15;1572:4;1632;1595:33;1616:5;;1623:4;1595:20;:33::i;:::-;:41;;1441:202;-1:-1:-1;;;;;1441:202:15:o;462:199:16:-;568:14;585:32;;;;596:9;585:32;:::i;:::-;627:27;;;;;:10;6277:55:17;;;627:27:16;;;6259:74:17;6349:18;;;6342:34;;;568:49:16;;-1:-1:-1;627:5:16;:10;;;;;;6232:18:17;;627:27:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2760:369:3;2882:15;;;;;;;2915:23;;;;2907:60;;;;;;;5407:2:17;2907:60:3;;;5389:21:17;5446:2;5426:18;;;5419:30;5485:26;5465:18;;;5458:54;5529:18;;2907:60:3;5205:348:17;2907:60:3;2998:8;2981:25;;:13;:25;;;2977:146;;3022:26;;;;;;;;;;;;;3067:45;;;;;;;;-1:-1:-1;;3067:45:3;2977:146;2848:281;2760:369;;;:::o;2514:114:9:-;2589:10;;;;2581:40;;;;;;;6589:2:17;2581:40:9;;;6571:21:17;6628:2;6608:18;;;6601:30;6667:19;6647:18;;;6640:47;6704:18;;2581:40:9;6387:341:17;2391:300:15;2484:7;2526:4;2484:7;2540:116;2560:16;;;2540:116;;;2612:33;2622:12;2636:5;;2642:1;2636:8;;;;;;;:::i;:::-;;;;;;;2612:9;:33::i;:::-;2597:48;-1:-1:-1;2578:3:15;;;;:::i;:::-;;;;2540:116;;;-1:-1:-1;2672:12:15;2391:300;-1:-1:-1;;;;2391:300:15:o;8879:147::-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:15:o;14:332:17:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:180;602:6;655:2;643:9;634:7;630:23;626:32;623:52;;;671:1;668;661:12;623:52;-1:-1:-1;694:23:17;;543:180;-1:-1:-1;543:180:17:o;1577:196::-;1645:20;;1705:42;1694:54;;1684:65;;1674:93;;1763:1;1760;1753:12;1674:93;1577:196;;;:::o;1778:1145::-;1893:6;1901;1909;1917;1925;1978:2;1966:9;1957:7;1953:23;1949:32;1946:52;;;1994:1;1991;1984:12;1946:52;2017:29;2036:9;2017:29;:::i;:::-;2007:39;;2097:2;2086:9;2082:18;2069:32;2120:18;2161:2;2153:6;2150:14;2147:34;;;2177:1;2174;2167:12;2147:34;2215:6;2204:9;2200:22;2190:32;;2260:7;2253:4;2249:2;2245:13;2241:27;2231:55;;2282:1;2279;2272:12;2231:55;2322:2;2309:16;2348:2;2340:6;2337:14;2334:34;;;2364:1;2361;2354:12;2334:34;2409:7;2404:2;2395:6;2391:2;2387:15;2383:24;2380:37;2377:57;;;2430:1;2427;2420:12;2377:57;2461:2;2457;2453:11;2443:21;;2483:6;2473:16;;;2542:2;2531:9;2527:18;2514:32;2498:48;;2571:2;2561:8;2558:16;2555:36;;;2587:1;2584;2577:12;2555:36;2625:8;2614:9;2610:24;2600:34;;2672:7;2665:4;2661:2;2657:13;2653:27;2643:55;;2694:1;2691;2684:12;2643:55;2736:2;2723:16;2764:2;2754:8;2751:16;2748:36;;;2780:1;2777;2770:12;2748:36;2835:7;2830:2;2818:8;2815:1;2811:16;2807:2;2803:25;2799:34;2796:47;2793:67;;;2856:1;2853;2846:12;2793:67;1778:1145;;;;-1:-1:-1;1778:1145:17;;-1:-1:-1;2887:2:17;2879:11;;2909:8;1778:1145;-1:-1:-1;;;1778:1145:17:o;2928:186::-;2987:6;3040:2;3028:9;3019:7;3015:23;3011:32;3008:52;;;3056:1;3053;3046:12;3008:52;3079:29;3098:9;3079:29;:::i;3119:184::-;3171:77;3168:1;3161:88;3268:4;3265:1;3258:15;3292:4;3289:1;3282:15;3308:195;3347:3;3378:66;3371:5;3368:77;3365:103;;3448:18;;:::i;:::-;-1:-1:-1;3495:1:17;3484:13;;3308:195::o;3508:469::-;3754:66;3745:6;3741:2;3737:15;3733:88;3728:3;3721:101;3866:6;3858;3853:2;3848:3;3844:12;3831:42;3932:2;3892:16;;3924:11;;;3917:27;3968:2;3960:11;;3508:469;-1:-1:-1;;3508:469:17:o;3982:325::-;4070:6;4065:3;4058:19;4122:6;4115:5;4108:4;4103:3;4099:14;4086:43;;4174:1;4167:4;4158:6;4153:3;4149:16;4145:27;4138:38;4040:3;4296:4;4226:66;4221:2;4213:6;4209:15;4205:88;4200:3;4196:98;4192:109;4185:116;;3982:325;;;;:::o;4312:435::-;4537:42;4529:6;4525:55;4514:9;4507:74;4617:2;4612;4601:9;4597:18;4590:30;4488:4;4637:61;4694:2;4683:9;4679:18;4671:6;4663;4637:61;:::i;:::-;4629:69;;4734:6;4729:2;4718:9;4714:18;4707:34;4312:435;;;;;;;:::o;4752:315::-;4937:2;4926:9;4919:21;4900:4;4957:61;5014:2;5003:9;4999:18;4991:6;4983;4957:61;:::i;:::-;4949:69;;5054:6;5049:2;5038:9;5034:18;5027:34;4752:315;;;;;;:::o;5072:128::-;5139:9;;;5160:11;;;5157:37;;;5174:18;;:::i;6733:184::-;6785:77;6782:1;6775:88;6882:4;6879:1;6872:15;6906:4;6903:1;6896:15"},"gasEstimates":{"creation":{"codeDepositCost":"712200","executionCost":"infinite","totalCost":"infinite"},"external":{"claimPayout(address,bytes,bytes32[])":"infinite","claimed(bytes32)":"2506","nonce()":"2340","owner()":"infinite","pause()":"infinite","paused()":"infinite","root()":"2317","setMerkleRoot(bytes32)":"infinite","shard()":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite","unpause()":"infinite"},"internal":{"_distributePayout(address,bytes calldata)":"infinite"}},"methodIdentifiers":{"claimPayout(address,bytes,bytes32[])":"edcdebcc","claimed(bytes32)":"cc3c0f06","nonce()":"affed0e0","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","root()":"ebf0c717","setMerkleRoot(bytes32)":"7cb64759","shard()":"996373c3","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"shard_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shard\",\"outputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyClaimed(address,bytes,uint256)\":[{\"params\":{\"claimData\":\"The encoded claim data for the claim.\",\"nonce\":\"The nonce as when the claim was made.\",\"recipient\":\"The recipient of the claim.\"}}],\"InvalidProof(address,bytes,uint256)\":[{\"params\":{\"claimData\":\"The encoded claim data for the claim.\",\"nonce\":\"The nonce as when the claim was made.\",\"recipient\":\"The recipient of the claim.\"}}]},\"events\":{\"MerkleRootSet(bytes32)\":{\"params\":{\"root\":\"The new merkle root.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"PayoutClaimed(bytes32,address,bytes,uint256)\":{\"params\":{\"claimData\":\"The encoded claim data for the claim.\",\"nonce\":\"The nonce as when the claim was made.\",\"recipient\":\"The recipient of the claim.\",\"root\":\"The merkle root on which the claim was made.\"}}},\"kind\":\"dev\",\"methods\":{\"claimPayout(address,bytes,bytes32[])\":{\"details\":\"Reverts if the contract is paused.Reverts with {AlreadyClaimed} if this specific payout has already been claimed.Reverts with {InvalidProof} if the merkle proof cannot be verified.Emits a {PayoutClaimed} event.\",\"params\":{\"claimData\":\"Encoded claim data for `recipient`\",\"proof\":\"Merkle proof of the user based on the merkle root\",\"recipient\":\"Address of the user to claim the payout\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"pause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event.\"},\"paused()\":{\"returns\":{\"_0\":\"isPaused The paused state of the contract.\"}},\"setMerkleRoot(bytes32)\":{\"details\":\"Reverts if not called by the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event.Emits a {MerkleRootSet} event.\",\"params\":{\"merkleRoot\":\"The merkle root to set.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"unpause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(address,bytes,uint256)\":[{\"notice\":\"Thrown when trying to claim the same leaf more than once.\"}],\"InvalidProof(address,bytes,uint256)\":[{\"notice\":\"Thrown when a proof cannot be verified.\"}]},\"events\":{\"MerkleRootSet(bytes32)\":{\"notice\":\"Emitted when a new merkle root is set.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"Paused()\":{\"notice\":\"Emitted when the pause is triggered.\"},\"PayoutClaimed(bytes32,address,bytes,uint256)\":{\"notice\":\"Emitted when a payout is claimed.\"},\"Unpaused()\":{\"notice\":\"Emitted when the pause is lifted.\"}},\"kind\":\"user\",\"methods\":{\"claimPayout(address,bytes,bytes32[])\":{\"notice\":\"Executes the payout for a given user (anyone can call this function).\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"paused()\":{\"notice\":\"Gets the paused state of the contract.\"},\"setMerkleRoot(bytes32)\":{\"notice\":\"Sets the merkle root for a new claiming period and unpauses the contract.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payment/REVVMotorsportShardClaim.sol\":\"REVVMotorsportShardClaim\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {PauseStorage} from \\\"./libraries/PauseStorage.sol\\\";\\nimport {PauseBase} from \\\"./base/PauseBase.sol\\\";\\nimport {ContractOwnership} from \\\"../access/ContractOwnership.sol\\\";\\n\\n/// @title Pausing mechanism (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract Pause is PauseBase, ContractOwnership {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial pause state.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    constructor(bool isPaused) {\\n        PauseStorage.layout().constructorInit(isPaused);\\n    }\\n}\\n\",\"keccak256\":\"0x8fa8023486d561e0a2941485e1d02d9db3f899f143c7f8a6ab0643beeb3258de\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {PauseStorage} from \\\"./../libraries/PauseStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Pausing mechanism (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PauseBase is Context {\\n    using PauseStorage for PauseStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when the pause is triggered.\\n    event Paused();\\n\\n    /// @notice Emitted when the pause is lifted.\\n    event Unpaused();\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().unpause();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused() external view returns (bool) {\\n        return PauseStorage.layout().paused();\\n    }\\n}\\n\",\"keccak256\":\"0x771539326a06f752e7fe6bca3e1f36668749a158bef6e9107e8502d16abe9fd1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PauseStorage {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    struct Layout {\\n        bool isPaused;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.phase\\\")) - 1);\\n\\n    event Paused();\\n    event Unpaused();\\n\\n    /// @notice Initializes the storage with an initial pause state (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function constructorInit(Layout storage s, bool isPaused) internal {\\n        if (isPaused) {\\n            s.isPaused = true;\\n            emit Paused();\\n        }\\n    }\\n\\n    /// @notice Initializes the storage with an initial pause state (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function proxyInit(Layout storage s, bool isPaused) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(isPaused);\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause(Layout storage s) internal {\\n        s.enforceIsNotPaused();\\n        s.isPaused = true;\\n        emit Paused();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause(Layout storage s) internal {\\n        s.enforceIsPaused();\\n        s.isPaused = false;\\n        emit Unpaused();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused(Layout storage s) internal view returns (bool isPaused) {\\n        return s.isPaused;\\n    }\\n\\n    /// @notice Ensures that the contract is paused.\\n    /// @dev Reverts if the contract is not paused.\\n    function enforceIsPaused(Layout storage s) internal view {\\n        require(s.isPaused, \\\"Pause: not paused\\\");\\n    }\\n\\n    /// @notice Ensures that the contract is not paused.\\n    /// @dev Reverts if the contract is paused.\\n    function enforceIsNotPaused(Layout storage s) internal view {\\n        require(!s.isPaused, \\\"Pause: paused\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb10c9dfe4535fea92eb0975b33171b65bdb955d997771cb1abf7adb4d27d4756\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {PauseStorage} from \\\"./../lifecycle/libraries/PauseStorage.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\nimport {Pause} from \\\"./../lifecycle/Pause.sol\\\";\\n\\n/// @title CumulativeMerkleClaim\\n/// @notice This contract is designed for claiming payouts which will cumulate over time.\\n/// @notice A merkle tree is generated with one leaf for each claim recipient together with the description of the claim (claimData).\\n/// @notice Flow: when new claims become available, the contract is paused to avoid further claims, a new tree is generated by summing up the current\\n/// @notice unclaimed payouts and the new payouts, per user. The new tree is set and replaces the previous one and the contract is unpaused.\\n/// @notice A nonce is used for each new tree and is included in every leaf to prevent collisions with claims from previous trees.\\nabstract contract CumulativeMerkleClaim is Pause {\\n    using MerkleProof for bytes32[];\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    bytes32 public root;\\n    uint256 public nonce;\\n\\n    mapping(bytes32 => bool) public claimed;\\n\\n    /// @notice Emitted when a new merkle root is set.\\n    /// @param root The new merkle root.\\n    event MerkleRootSet(bytes32 root);\\n\\n    /// @notice Emitted when a payout is claimed.\\n    /// @param root The merkle root on which the claim was made.\\n    /// @param recipient The recipient of the claim.\\n    /// @param claimData The encoded claim data for the claim.\\n    /// @param nonce The nonce as when the claim was made.\\n    event PayoutClaimed(bytes32 indexed root, address indexed recipient, bytes claimData, uint256 nonce);\\n\\n    /// @notice Thrown when trying to claim the same leaf more than once.\\n    /// @param recipient The recipient of the claim.\\n    /// @param claimData The encoded claim data for the claim.\\n    /// @param nonce The nonce as when the claim was made.\\n    error AlreadyClaimed(address recipient, bytes claimData, uint256 nonce);\\n\\n    /// @notice Thrown when a proof cannot be verified.\\n    /// @param recipient The recipient of the claim.\\n    /// @param claimData The encoded claim data for the claim.\\n    /// @param nonce The nonce as when the claim was made.\\n    error InvalidProof(address recipient, bytes claimData, uint256 nonce);\\n\\n    constructor() Pause(true) ContractOwnership(msg.sender) {}\\n\\n    /// @notice Sets the merkle root for a new claiming period and unpauses the contract.\\n    /// @dev Reverts if not called by the contract owner.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    /// @dev Emits a {MerkleRootSet} event.\\n    /// @param merkleRoot The merkle root to set.\\n    function setMerkleRoot(bytes32 merkleRoot) public {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().unpause();\\n        root = merkleRoot;\\n        ++nonce;\\n        emit MerkleRootSet(merkleRoot);\\n    }\\n\\n    /// @notice Executes the payout for a given user (anyone can call this function).\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Reverts with {AlreadyClaimed} if this specific payout has already been claimed.\\n    /// @dev Reverts with {InvalidProof} if the merkle proof cannot be verified.\\n    /// @dev Emits a {PayoutClaimed} event.\\n    /// @param recipient Address of the user to claim the payout\\n    /// @param claimData Encoded claim data for `recipient`\\n    /// @param proof Merkle proof of the user based on the merkle root\\n    function claimPayout(address recipient, bytes calldata claimData, bytes32[] calldata proof) external {\\n        PauseStorage.layout().enforceIsNotPaused();\\n\\n        uint256 currentNonce = nonce;\\n        bytes32 currentRoot = root;\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, claimData, currentNonce));\\n\\n        if (claimed[leaf]) {\\n            revert AlreadyClaimed(recipient, claimData, currentNonce);\\n        }\\n\\n        if (!proof.verifyCalldata(currentRoot, leaf)) {\\n            revert InvalidProof(recipient, claimData, currentNonce);\\n        }\\n\\n        claimed[leaf] = true;\\n\\n        emit PayoutClaimed(currentRoot, recipient, claimData, currentNonce);\\n\\n        _distributePayout(recipient, claimData);\\n    }\\n\\n    /// @notice Distributes the payout to the recipient.\\n    /// @dev This virtual function must be implemented by inheriting contracts.\\n    /// @param recipient Address of the user to claim the payout\\n    /// @param claimData Encoded claim data for `recipient`. The encoding is specific to the inheriting contract, for example a quantity of tokens.\\n    function _distributePayout(address recipient, bytes calldata claimData) internal virtual;\\n}\\n\",\"keccak256\":\"0x1361aea9edc2186ef05761ec228892ce4f8ec2e9c6d47f4dc5d2cae29d7175f2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/payment/REVVMotorsportShardClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IERC20Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\\\";\\nimport {CumulativeMerkleClaim} from \\\"@animoca/ethereum-contracts/contracts/payment/CumulativeMerkleClaim.sol\\\";\\n\\ncontract REVVMotorsportShardClaim is CumulativeMerkleClaim {\\n    IERC20Mintable public immutable shard;\\n\\n    constructor(IERC20Mintable shard_) {\\n        shard = shard_;\\n    }\\n\\n    function _distributePayout(address claimer, bytes calldata claimData) internal virtual override {\\n        uint256 amount = abi.decode(claimData, (uint256));\\n        shard.mint(claimer, amount);\\n    }\\n}\",\"keccak256\":\"0x81cf9530fdf3d67e6352662b1024d50771b23a6b1fc3facd9f36651a533bbd27\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":777,"contract":"contracts/payment/REVVMotorsportShardClaim.sol:REVVMotorsportShardClaim","label":"root","offset":0,"slot":"0","type":"t_bytes32"},{"astId":779,"contract":"contracts/payment/REVVMotorsportShardClaim.sol:REVVMotorsportShardClaim","label":"nonce","offset":0,"slot":"1","type":"t_uint256"},{"astId":783,"contract":"contracts/payment/REVVMotorsportShardClaim.sol:REVVMotorsportShardClaim","label":"claimed","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(address,bytes,uint256)":[{"notice":"Thrown when trying to claim the same leaf more than once."}],"InvalidProof(address,bytes,uint256)":[{"notice":"Thrown when a proof cannot be verified."}]},"events":{"MerkleRootSet(bytes32)":{"notice":"Emitted when a new merkle root is set."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"Paused()":{"notice":"Emitted when the pause is triggered."},"PayoutClaimed(bytes32,address,bytes,uint256)":{"notice":"Emitted when a payout is claimed."},"Unpaused()":{"notice":"Emitted when the pause is lifted."}},"kind":"user","methods":{"claimPayout(address,bytes,bytes32[])":{"notice":"Executes the payout for a given user (anyone can call this function)."},"owner()":{"notice":"Gets the address of the contract owner."},"pause()":{"notice":"Pauses the contract."},"paused()":{"notice":"Gets the paused state of the contract."},"setMerkleRoot(bytes32)":{"notice":"Sets the merkle root for a new claiming period and unpauses the contract."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"unpause()":{"notice":"Unpauses the contract."}},"version":1}}}}}}